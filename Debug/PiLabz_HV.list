
PiLabz_HV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007394  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800756c  0800756c  0001756c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075ac  080075ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080075ac  080075ac  000175ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075b4  080075b4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075b4  080075b4  000175b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075b8  080075b8  000175b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080075bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  2000000c  080075c8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  080075c8  00020364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e4a7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032e7  00000000  00000000  0003e4e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001990  00000000  00000000  000417d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001868  00000000  00000000  00043160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000210cf  00000000  00000000  000449c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b470  00000000  00000000  00065a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2501  00000000  00000000  00080f07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00163408  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070cc  00000000  00000000  00163458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007554 	.word	0x08007554

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08007554 	.word	0x08007554

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a68:	f000 b974 	b.w	8000d54 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	468e      	mov	lr, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14d      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a92:	428a      	cmp	r2, r1
 8000a94:	4694      	mov	ip, r2
 8000a96:	d969      	bls.n	8000b6c <__udivmoddi4+0xe8>
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	b152      	cbz	r2, 8000ab4 <__udivmoddi4+0x30>
 8000a9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000aa2:	f1c2 0120 	rsb	r1, r2, #32
 8000aa6:	fa20 f101 	lsr.w	r1, r0, r1
 8000aaa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aae:	ea41 0e03 	orr.w	lr, r1, r3
 8000ab2:	4094      	lsls	r4, r2
 8000ab4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab8:	0c21      	lsrs	r1, r4, #16
 8000aba:	fbbe f6f8 	udiv	r6, lr, r8
 8000abe:	fa1f f78c 	uxth.w	r7, ip
 8000ac2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ac6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aca:	fb06 f107 	mul.w	r1, r6, r7
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000ada:	f080 811f 	bcs.w	8000d1c <__udivmoddi4+0x298>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 811c 	bls.w	8000d1c <__udivmoddi4+0x298>
 8000ae4:	3e02      	subs	r6, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a5b      	subs	r3, r3, r1
 8000aea:	b2a4      	uxth	r4, r4
 8000aec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af0:	fb08 3310 	mls	r3, r8, r0, r3
 8000af4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af8:	fb00 f707 	mul.w	r7, r0, r7
 8000afc:	42a7      	cmp	r7, r4
 8000afe:	d90a      	bls.n	8000b16 <__udivmoddi4+0x92>
 8000b00:	eb1c 0404 	adds.w	r4, ip, r4
 8000b04:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b08:	f080 810a 	bcs.w	8000d20 <__udivmoddi4+0x29c>
 8000b0c:	42a7      	cmp	r7, r4
 8000b0e:	f240 8107 	bls.w	8000d20 <__udivmoddi4+0x29c>
 8000b12:	4464      	add	r4, ip
 8000b14:	3802      	subs	r0, #2
 8000b16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1a:	1be4      	subs	r4, r4, r7
 8000b1c:	2600      	movs	r6, #0
 8000b1e:	b11d      	cbz	r5, 8000b28 <__udivmoddi4+0xa4>
 8000b20:	40d4      	lsrs	r4, r2
 8000b22:	2300      	movs	r3, #0
 8000b24:	e9c5 4300 	strd	r4, r3, [r5]
 8000b28:	4631      	mov	r1, r6
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d909      	bls.n	8000b46 <__udivmoddi4+0xc2>
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	f000 80ef 	beq.w	8000d16 <__udivmoddi4+0x292>
 8000b38:	2600      	movs	r6, #0
 8000b3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3e:	4630      	mov	r0, r6
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	fab3 f683 	clz	r6, r3
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d14a      	bne.n	8000be4 <__udivmoddi4+0x160>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xd4>
 8000b52:	4282      	cmp	r2, r0
 8000b54:	f200 80f9 	bhi.w	8000d4a <__udivmoddi4+0x2c6>
 8000b58:	1a84      	subs	r4, r0, r2
 8000b5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	469e      	mov	lr, r3
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d0e0      	beq.n	8000b28 <__udivmoddi4+0xa4>
 8000b66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b6a:	e7dd      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000b6c:	b902      	cbnz	r2, 8000b70 <__udivmoddi4+0xec>
 8000b6e:	deff      	udf	#255	; 0xff
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	2a00      	cmp	r2, #0
 8000b76:	f040 8092 	bne.w	8000c9e <__udivmoddi4+0x21a>
 8000b7a:	eba1 010c 	sub.w	r1, r1, ip
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2601      	movs	r6, #1
 8000b88:	0c20      	lsrs	r0, r4, #16
 8000b8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b96:	fb0e f003 	mul.w	r0, lr, r3
 8000b9a:	4288      	cmp	r0, r1
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x12c>
 8000b9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x12a>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2c0>
 8000bae:	4643      	mov	r3, r8
 8000bb0:	1a09      	subs	r1, r1, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bbc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x156>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x154>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2ca>
 8000bd8:	4608      	mov	r0, r1
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000be2:	e79c      	b.n	8000b1e <__udivmoddi4+0x9a>
 8000be4:	f1c6 0720 	rsb	r7, r6, #32
 8000be8:	40b3      	lsls	r3, r6
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bf6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bfa:	431c      	orrs	r4, r3
 8000bfc:	40f9      	lsrs	r1, r7
 8000bfe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c02:	fa00 f306 	lsl.w	r3, r0, r6
 8000c06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c0a:	0c20      	lsrs	r0, r4, #16
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fb09 1118 	mls	r1, r9, r8, r1
 8000c14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c18:	fb08 f00e 	mul.w	r0, r8, lr
 8000c1c:	4288      	cmp	r0, r1
 8000c1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b8>
 8000c24:	eb1c 0101 	adds.w	r1, ip, r1
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2bc>
 8000c30:	4288      	cmp	r0, r1
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2bc>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4461      	add	r1, ip
 8000c3c:	1a09      	subs	r1, r1, r0
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c44:	fb09 1110 	mls	r1, r9, r0, r1
 8000c48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	458e      	cmp	lr, r1
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1e2>
 8000c54:	eb1c 0101 	adds.w	r1, ip, r1
 8000c58:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2b4>
 8000c5e:	458e      	cmp	lr, r1
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2b4>
 8000c62:	3802      	subs	r0, #2
 8000c64:	4461      	add	r1, ip
 8000c66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c6e:	eba1 010e 	sub.w	r1, r1, lr
 8000c72:	42a1      	cmp	r1, r4
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46a6      	mov	lr, r4
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x2a4>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x2a0>
 8000c7c:	b15d      	cbz	r5, 8000c96 <__udivmoddi4+0x212>
 8000c7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c82:	eb61 010e 	sbc.w	r1, r1, lr
 8000c86:	fa01 f707 	lsl.w	r7, r1, r7
 8000c8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c8e:	40f1      	lsrs	r1, r6
 8000c90:	431f      	orrs	r7, r3
 8000c92:	e9c5 7100 	strd	r7, r1, [r5]
 8000c96:	2600      	movs	r6, #0
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ca2:	40d8      	lsrs	r0, r3
 8000ca4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4301      	orrs	r1, r0
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc0:	0c0b      	lsrs	r3, r1, #16
 8000cc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x260>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b8>
 8000cdc:	429e      	cmp	r6, r3
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b8>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4463      	add	r3, ip
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	b289      	uxth	r1, r1
 8000ce8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cec:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x28a>
 8000cfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000d00:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000d0a:	3e02      	subs	r6, #2
 8000d0c:	4461      	add	r1, ip
 8000d0e:	1ac9      	subs	r1, r1, r3
 8000d10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0x104>
 8000d16:	462e      	mov	r6, r5
 8000d18:	4628      	mov	r0, r5
 8000d1a:	e705      	b.n	8000b28 <__udivmoddi4+0xa4>
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	e6e3      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d20:	4618      	mov	r0, r3
 8000d22:	e6f8      	b.n	8000b16 <__udivmoddi4+0x92>
 8000d24:	454b      	cmp	r3, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f8>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d30:	3801      	subs	r0, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f8>
 8000d34:	4646      	mov	r6, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x28a>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1e2>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x260>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b8>
 8000d44:	3b02      	subs	r3, #2
 8000d46:	4461      	add	r1, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x12c>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e709      	b.n	8000b62 <__udivmoddi4+0xde>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x156>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d5c:	f001 f890 	bl	8001e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d60:	f000 f826 	bl	8000db0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d64:	f000 fb36 	bl	80013d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d68:	f000 fb0a 	bl	8001380 <MX_DMA_Init>
  MX_ADC1_Init();
 8000d6c:	f000 f86a 	bl	8000e44 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000d70:	f000 f8ba 	bl	8000ee8 <MX_ADC2_Init>
  MX_FDCAN1_Init();
 8000d74:	f000 f8f6 	bl	8000f64 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 8000d78:	f000 f93a 	bl	8000ff0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000d7c:	f000 f976 	bl	800106c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000d80:	f000 fa5c 	bl	800123c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000d84:	f000 fab0 	bl	80012e8 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	angleMech = getEncoderAngleFromSPI(1);
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f001 f837 	bl	8001dfc <getEncoderAngleFromSPI>
 8000d8e:	eef0 7a40 	vmov.f32	s15, s0
 8000d92:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <main+0x50>)
 8000d94:	edc3 7a00 	vstr	s15, [r3]
	HAL_GPIO_TogglePin(GPIOB,FAULT_LED_Pin);
 8000d98:	2180      	movs	r1, #128	; 0x80
 8000d9a:	4804      	ldr	r0, [pc, #16]	; (8000dac <main+0x54>)
 8000d9c:	f002 fd16 	bl	80037cc <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8000da0:	2064      	movs	r0, #100	; 0x64
 8000da2:	f001 f8dd 	bl	8001f60 <HAL_Delay>
	angleMech = getEncoderAngleFromSPI(1);
 8000da6:	e7ef      	b.n	8000d88 <main+0x30>
 8000da8:	20000350 	.word	0x20000350
 8000dac:	48000400 	.word	0x48000400

08000db0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b094      	sub	sp, #80	; 0x50
 8000db4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db6:	f107 0318 	add.w	r3, r7, #24
 8000dba:	2238      	movs	r2, #56	; 0x38
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f006 fbc0 	bl	8007544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
 8000dd0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dd2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000dd6:	f002 fd13 	bl	8003800 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de4:	2302      	movs	r3, #2
 8000de6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000de8:	2303      	movs	r3, #3
 8000dea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000dec:	2304      	movs	r3, #4
 8000dee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8000df0:	234b      	movs	r3, #75	; 0x4b
 8000df2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000df4:	2302      	movs	r3, #2
 8000df6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e00:	f107 0318 	add.w	r3, r7, #24
 8000e04:	4618      	mov	r0, r3
 8000e06:	f002 fdaf 	bl	8003968 <HAL_RCC_OscConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000e10:	f000 fba0 	bl	8001554 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e14:	230f      	movs	r3, #15
 8000e16:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e20:	2300      	movs	r3, #0
 8000e22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	2104      	movs	r1, #4
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f003 f8b3 	bl	8003f98 <HAL_RCC_ClockConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000e38:	f000 fb8c 	bl	8001554 <Error_Handler>
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	3750      	adds	r7, #80	; 0x50
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e54:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <MX_ADC1_Init+0xa0>)
 8000e56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e5c:	4b21      	ldr	r3, [pc, #132]	; (8000ee4 <MX_ADC1_Init+0xa0>)
 8000e5e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e64:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <MX_ADC1_Init+0xa0>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <MX_ADC1_Init+0xa0>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e70:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <MX_ADC1_Init+0xa0>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e76:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <MX_ADC1_Init+0xa0>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e7c:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <MX_ADC1_Init+0xa0>)
 8000e7e:	2204      	movs	r2, #4
 8000e80:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e82:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <MX_ADC1_Init+0xa0>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e88:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <MX_ADC1_Init+0xa0>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000e8e:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <MX_ADC1_Init+0xa0>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e94:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <MX_ADC1_Init+0xa0>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <MX_ADC1_Init+0xa0>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <MX_ADC1_Init+0xa0>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <MX_ADC1_Init+0xa0>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eb2:	480c      	ldr	r0, [pc, #48]	; (8000ee4 <MX_ADC1_Init+0xa0>)
 8000eb4:	f001 f952 	bl	800215c <HAL_ADC_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8000ebe:	f000 fb49 	bl	8001554 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4806      	ldr	r0, [pc, #24]	; (8000ee4 <MX_ADC1_Init+0xa0>)
 8000ecc:	f001 fd60 	bl	8002990 <HAL_ADCEx_MultiModeConfigChannel>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000ed6:	f000 fb3d 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000028 	.word	0x20000028

08000ee8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000eec:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <MX_ADC2_Init+0x74>)
 8000eee:	4a1c      	ldr	r2, [pc, #112]	; (8000f60 <MX_ADC2_Init+0x78>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <MX_ADC2_Init+0x74>)
 8000ef4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ef8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <MX_ADC2_Init+0x74>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f00:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <MX_ADC2_Init+0x74>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <MX_ADC2_Init+0x74>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <MX_ADC2_Init+0x74>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <MX_ADC2_Init+0x74>)
 8000f14:	2204      	movs	r2, #4
 8000f16:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000f18:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <MX_ADC2_Init+0x74>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <MX_ADC2_Init+0x74>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000f24:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <MX_ADC2_Init+0x74>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <MX_ADC2_Init+0x74>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <MX_ADC2_Init+0x74>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f3a:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <MX_ADC2_Init+0x74>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <MX_ADC2_Init+0x74>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f48:	4804      	ldr	r0, [pc, #16]	; (8000f5c <MX_ADC2_Init+0x74>)
 8000f4a:	f001 f907 	bl	800215c <HAL_ADC_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000f54:	f000 fafe 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000094 	.word	0x20000094
 8000f60:	50000100 	.word	0x50000100

08000f64 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000f68:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <MX_FDCAN1_Init+0x84>)
 8000f6a:	4a20      	ldr	r2, [pc, #128]	; (8000fec <MX_FDCAN1_Init+0x88>)
 8000f6c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000f6e:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <MX_FDCAN1_Init+0x84>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f74:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <MX_FDCAN1_Init+0x84>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000f7a:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <MX_FDCAN1_Init+0x84>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <MX_FDCAN1_Init+0x84>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000f86:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <MX_FDCAN1_Init+0x84>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000f8c:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <MX_FDCAN1_Init+0x84>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <MX_FDCAN1_Init+0x84>)
 8000f94:	2210      	movs	r2, #16
 8000f96:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <MX_FDCAN1_Init+0x84>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000f9e:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <MX_FDCAN1_Init+0x84>)
 8000fa0:	2202      	movs	r2, #2
 8000fa2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000fa4:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <MX_FDCAN1_Init+0x84>)
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <MX_FDCAN1_Init+0x84>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000fb0:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <MX_FDCAN1_Init+0x84>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <MX_FDCAN1_Init+0x84>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <MX_FDCAN1_Init+0x84>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <MX_FDCAN1_Init+0x84>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000fc8:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <MX_FDCAN1_Init+0x84>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <MX_FDCAN1_Init+0x84>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000fd4:	4804      	ldr	r0, [pc, #16]	; (8000fe8 <MX_FDCAN1_Init+0x84>)
 8000fd6:	f002 f8af 	bl	8003138 <HAL_FDCAN_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000fe0:	f000 fab8 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000160 	.word	0x20000160
 8000fec:	40006400 	.word	0x40006400

08000ff0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <MX_SPI1_Init+0x74>)
 8000ff6:	4a1c      	ldr	r2, [pc, #112]	; (8001068 <MX_SPI1_Init+0x78>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ffa:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <MX_SPI1_Init+0x74>)
 8000ffc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001000:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <MX_SPI1_Init+0x74>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001008:	4b16      	ldr	r3, [pc, #88]	; (8001064 <MX_SPI1_Init+0x74>)
 800100a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800100e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001010:	4b14      	ldr	r3, [pc, #80]	; (8001064 <MX_SPI1_Init+0x74>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001016:	4b13      	ldr	r3, [pc, #76]	; (8001064 <MX_SPI1_Init+0x74>)
 8001018:	2201      	movs	r2, #1
 800101a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_SPI1_Init+0x74>)
 800101e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001022:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_SPI1_Init+0x74>)
 8001026:	2220      	movs	r2, #32
 8001028:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <MX_SPI1_Init+0x74>)
 800102c:	2200      	movs	r2, #0
 800102e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <MX_SPI1_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001036:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <MX_SPI1_Init+0x74>)
 8001038:	2200      	movs	r2, #0
 800103a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800103c:	4b09      	ldr	r3, [pc, #36]	; (8001064 <MX_SPI1_Init+0x74>)
 800103e:	2207      	movs	r2, #7
 8001040:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <MX_SPI1_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <MX_SPI1_Init+0x74>)
 800104a:	2200      	movs	r2, #0
 800104c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800104e:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_SPI1_Init+0x74>)
 8001050:	f003 fbaa 	bl	80047a8 <HAL_SPI_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800105a:	f000 fa7b 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200001c4 	.word	0x200001c4
 8001068:	40013000 	.word	0x40013000

0800106c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b09e      	sub	sp, #120	; 0x78
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001072:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001080:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 800108c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001098:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
 80010a8:	615a      	str	r2, [r3, #20]
 80010aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010ac:	463b      	mov	r3, r7
 80010ae:	2234      	movs	r2, #52	; 0x34
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f006 fa46 	bl	8007544 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010b8:	4b5e      	ldr	r3, [pc, #376]	; (8001234 <MX_TIM1_Init+0x1c8>)
 80010ba:	4a5f      	ldr	r2, [pc, #380]	; (8001238 <MX_TIM1_Init+0x1cc>)
 80010bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 80010be:	4b5d      	ldr	r3, [pc, #372]	; (8001234 <MX_TIM1_Init+0x1c8>)
 80010c0:	2204      	movs	r2, #4
 80010c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c4:	4b5b      	ldr	r3, [pc, #364]	; (8001234 <MX_TIM1_Init+0x1c8>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1499;
 80010ca:	4b5a      	ldr	r3, [pc, #360]	; (8001234 <MX_TIM1_Init+0x1c8>)
 80010cc:	f240 52db 	movw	r2, #1499	; 0x5db
 80010d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d2:	4b58      	ldr	r3, [pc, #352]	; (8001234 <MX_TIM1_Init+0x1c8>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010d8:	4b56      	ldr	r3, [pc, #344]	; (8001234 <MX_TIM1_Init+0x1c8>)
 80010da:	2200      	movs	r2, #0
 80010dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010de:	4b55      	ldr	r3, [pc, #340]	; (8001234 <MX_TIM1_Init+0x1c8>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010e4:	4853      	ldr	r0, [pc, #332]	; (8001234 <MX_TIM1_Init+0x1c8>)
 80010e6:	f004 f8a1 	bl	800522c <HAL_TIM_Base_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80010f0:	f000 fa30 	bl	8001554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010fa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80010fe:	4619      	mov	r1, r3
 8001100:	484c      	ldr	r0, [pc, #304]	; (8001234 <MX_TIM1_Init+0x1c8>)
 8001102:	f004 fc85 	bl	8005a10 <HAL_TIM_ConfigClockSource>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800110c:	f000 fa22 	bl	8001554 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001110:	4848      	ldr	r0, [pc, #288]	; (8001234 <MX_TIM1_Init+0x1c8>)
 8001112:	f004 f8e2 	bl	80052da <HAL_TIM_PWM_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 800111c:	f000 fa1a 	bl	8001554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001120:	2300      	movs	r3, #0
 8001122:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001124:	2300      	movs	r3, #0
 8001126:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800112c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001130:	4619      	mov	r1, r3
 8001132:	4840      	ldr	r0, [pc, #256]	; (8001234 <MX_TIM1_Init+0x1c8>)
 8001134:	f005 f9ba 	bl	80064ac <HAL_TIMEx_MasterConfigSynchronization>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800113e:	f000 fa09 	bl	8001554 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8001142:	2301      	movs	r3, #1
 8001144:	653b      	str	r3, [r7, #80]	; 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8001146:	2301      	movs	r3, #1
 8001148:	657b      	str	r3, [r7, #84]	; 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 800114a:	2300      	movs	r3, #0
 800114c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 800114e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001152:	461a      	mov	r2, r3
 8001154:	2102      	movs	r1, #2
 8001156:	4837      	ldr	r0, [pc, #220]	; (8001234 <MX_TIM1_Init+0x1c8>)
 8001158:	f005 faca 	bl	80066f0 <HAL_TIMEx_ConfigBreakInput>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001162:	f000 f9f7 	bl	8001554 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001166:	2360      	movs	r3, #96	; 0x60
 8001168:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800116e:	2300      	movs	r3, #0
 8001170:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001172:	2308      	movs	r3, #8
 8001174:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001176:	2300      	movs	r3, #0
 8001178:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800117a:	2300      	movs	r3, #0
 800117c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 800117e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001182:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001184:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001188:	2200      	movs	r2, #0
 800118a:	4619      	mov	r1, r3
 800118c:	4829      	ldr	r0, [pc, #164]	; (8001234 <MX_TIM1_Init+0x1c8>)
 800118e:	f004 fb2b 	bl	80057e8 <HAL_TIM_PWM_ConfigChannel>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001198:	f000 f9dc 	bl	8001554 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800119c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011a0:	2204      	movs	r2, #4
 80011a2:	4619      	mov	r1, r3
 80011a4:	4823      	ldr	r0, [pc, #140]	; (8001234 <MX_TIM1_Init+0x1c8>)
 80011a6:	f004 fb1f 	bl	80057e8 <HAL_TIM_PWM_ConfigChannel>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80011b0:	f000 f9d0 	bl	8001554 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011b8:	2208      	movs	r2, #8
 80011ba:	4619      	mov	r1, r3
 80011bc:	481d      	ldr	r0, [pc, #116]	; (8001234 <MX_TIM1_Init+0x1c8>)
 80011be:	f004 fb13 	bl	80057e8 <HAL_TIM_PWM_ConfigChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM1_Init+0x160>
  {
    Error_Handler();
 80011c8:	f000 f9c4 	bl	8001554 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 80011cc:	4819      	ldr	r0, [pc, #100]	; (8001234 <MX_TIM1_Init+0x1c8>)
 80011ce:	f005 fb67 	bl	80068a0 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80011d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011d6:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80011d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 90;
 80011e2:	235a      	movs	r3, #90	; 0x5a
 80011e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 80011f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011fc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80011fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001208:	2300      	movs	r3, #0
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001210:	463b      	mov	r3, r7
 8001212:	4619      	mov	r1, r3
 8001214:	4807      	ldr	r0, [pc, #28]	; (8001234 <MX_TIM1_Init+0x1c8>)
 8001216:	f005 f9cb 	bl	80065b0 <HAL_TIMEx_ConfigBreakDeadTime>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM1_Init+0x1b8>
  {
    Error_Handler();
 8001220:	f000 f998 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001224:	4803      	ldr	r0, [pc, #12]	; (8001234 <MX_TIM1_Init+0x1c8>)
 8001226:	f000 fc1d 	bl	8001a64 <HAL_TIM_MspPostInit>

}
 800122a:	bf00      	nop
 800122c:	3778      	adds	r7, #120	; 0x78
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000228 	.word	0x20000228
 8001238:	40012c00 	.word	0x40012c00

0800123c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08c      	sub	sp, #48	; 0x30
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001242:	f107 030c 	add.w	r3, r7, #12
 8001246:	2224      	movs	r2, #36	; 0x24
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f006 f97a 	bl	8007544 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001250:	463b      	mov	r3, r7
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800125a:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <MX_TIM3_Init+0xa4>)
 800125c:	4a21      	ldr	r2, [pc, #132]	; (80012e4 <MX_TIM3_Init+0xa8>)
 800125e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001260:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <MX_TIM3_Init+0xa4>)
 8001262:	2200      	movs	r2, #0
 8001264:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001266:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <MX_TIM3_Init+0xa4>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 800126c:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <MX_TIM3_Init+0xa4>)
 800126e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001272:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001274:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <MX_TIM3_Init+0xa4>)
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127a:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <MX_TIM3_Init+0xa4>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001280:	2301      	movs	r3, #1
 8001282:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001284:	2300      	movs	r3, #0
 8001286:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001288:	2301      	movs	r3, #1
 800128a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800128c:	2300      	movs	r3, #0
 800128e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001294:	2300      	movs	r3, #0
 8001296:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001298:	2301      	movs	r3, #1
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800129c:	2300      	movs	r3, #0
 800129e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	4619      	mov	r1, r3
 80012aa:	480d      	ldr	r0, [pc, #52]	; (80012e0 <MX_TIM3_Init+0xa4>)
 80012ac:	f004 f876 	bl	800539c <HAL_TIM_Encoder_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80012b6:	f000 f94d 	bl	8001554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ba:	2300      	movs	r3, #0
 80012bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012c2:	463b      	mov	r3, r7
 80012c4:	4619      	mov	r1, r3
 80012c6:	4806      	ldr	r0, [pc, #24]	; (80012e0 <MX_TIM3_Init+0xa4>)
 80012c8:	f005 f8f0 	bl	80064ac <HAL_TIMEx_MasterConfigSynchronization>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80012d2:	f000 f93f 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	3730      	adds	r7, #48	; 0x30
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000274 	.word	0x20000274
 80012e4:	40000400 	.word	0x40000400

080012e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012ec:	4b22      	ldr	r3, [pc, #136]	; (8001378 <MX_USART2_UART_Init+0x90>)
 80012ee:	4a23      	ldr	r2, [pc, #140]	; (800137c <MX_USART2_UART_Init+0x94>)
 80012f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012f2:	4b21      	ldr	r3, [pc, #132]	; (8001378 <MX_USART2_UART_Init+0x90>)
 80012f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012fa:	4b1f      	ldr	r3, [pc, #124]	; (8001378 <MX_USART2_UART_Init+0x90>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001300:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <MX_USART2_UART_Init+0x90>)
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001306:	4b1c      	ldr	r3, [pc, #112]	; (8001378 <MX_USART2_UART_Init+0x90>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800130c:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <MX_USART2_UART_Init+0x90>)
 800130e:	220c      	movs	r2, #12
 8001310:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001312:	4b19      	ldr	r3, [pc, #100]	; (8001378 <MX_USART2_UART_Init+0x90>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001318:	4b17      	ldr	r3, [pc, #92]	; (8001378 <MX_USART2_UART_Init+0x90>)
 800131a:	2200      	movs	r2, #0
 800131c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800131e:	4b16      	ldr	r3, [pc, #88]	; (8001378 <MX_USART2_UART_Init+0x90>)
 8001320:	2200      	movs	r2, #0
 8001322:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <MX_USART2_UART_Init+0x90>)
 8001326:	2200      	movs	r2, #0
 8001328:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800132a:	4b13      	ldr	r3, [pc, #76]	; (8001378 <MX_USART2_UART_Init+0x90>)
 800132c:	2200      	movs	r2, #0
 800132e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001330:	4811      	ldr	r0, [pc, #68]	; (8001378 <MX_USART2_UART_Init+0x90>)
 8001332:	f005 fb0e 	bl	8006952 <HAL_UART_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800133c:	f000 f90a 	bl	8001554 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001340:	2100      	movs	r1, #0
 8001342:	480d      	ldr	r0, [pc, #52]	; (8001378 <MX_USART2_UART_Init+0x90>)
 8001344:	f006 f810 	bl	8007368 <HAL_UARTEx_SetTxFifoThreshold>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800134e:	f000 f901 	bl	8001554 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001352:	2100      	movs	r1, #0
 8001354:	4808      	ldr	r0, [pc, #32]	; (8001378 <MX_USART2_UART_Init+0x90>)
 8001356:	f006 f845 	bl	80073e4 <HAL_UARTEx_SetRxFifoThreshold>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001360:	f000 f8f8 	bl	8001554 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001364:	4804      	ldr	r0, [pc, #16]	; (8001378 <MX_USART2_UART_Init+0x90>)
 8001366:	f005 ffc6 	bl	80072f6 <HAL_UARTEx_DisableFifoMode>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001370:	f000 f8f0 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200002c0 	.word	0x200002c0
 800137c:	40004400 	.word	0x40004400

08001380 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001386:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <MX_DMA_Init+0x50>)
 8001388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800138a:	4a11      	ldr	r2, [pc, #68]	; (80013d0 <MX_DMA_Init+0x50>)
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	6493      	str	r3, [r2, #72]	; 0x48
 8001392:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <MX_DMA_Init+0x50>)
 8001394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <MX_DMA_Init+0x50>)
 80013a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013a2:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <MX_DMA_Init+0x50>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6493      	str	r3, [r2, #72]	; 0x48
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <MX_DMA_Init+0x50>)
 80013ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	603b      	str	r3, [r7, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	200b      	movs	r0, #11
 80013bc:	f001 fc67 	bl	8002c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013c0:	200b      	movs	r0, #11
 80013c2:	f001 fc7e 	bl	8002cc2 <HAL_NVIC_EnableIRQ>

}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40021000 	.word	0x40021000

080013d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	; 0x28
 80013d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013da:	f107 0314 	add.w	r3, r7, #20
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
 80013e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ea:	4b57      	ldr	r3, [pc, #348]	; (8001548 <MX_GPIO_Init+0x174>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	4a56      	ldr	r2, [pc, #344]	; (8001548 <MX_GPIO_Init+0x174>)
 80013f0:	f043 0304 	orr.w	r3, r3, #4
 80013f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f6:	4b54      	ldr	r3, [pc, #336]	; (8001548 <MX_GPIO_Init+0x174>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fa:	f003 0304 	and.w	r3, r3, #4
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001402:	4b51      	ldr	r3, [pc, #324]	; (8001548 <MX_GPIO_Init+0x174>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001406:	4a50      	ldr	r2, [pc, #320]	; (8001548 <MX_GPIO_Init+0x174>)
 8001408:	f043 0320 	orr.w	r3, r3, #32
 800140c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140e:	4b4e      	ldr	r3, [pc, #312]	; (8001548 <MX_GPIO_Init+0x174>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	f003 0320 	and.w	r3, r3, #32
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800141a:	4b4b      	ldr	r3, [pc, #300]	; (8001548 <MX_GPIO_Init+0x174>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	4a4a      	ldr	r2, [pc, #296]	; (8001548 <MX_GPIO_Init+0x174>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001426:	4b48      	ldr	r3, [pc, #288]	; (8001548 <MX_GPIO_Init+0x174>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001432:	4b45      	ldr	r3, [pc, #276]	; (8001548 <MX_GPIO_Init+0x174>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001436:	4a44      	ldr	r2, [pc, #272]	; (8001548 <MX_GPIO_Init+0x174>)
 8001438:	f043 0302 	orr.w	r3, r3, #2
 800143c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800143e:	4b42      	ldr	r3, [pc, #264]	; (8001548 <MX_GPIO_Init+0x174>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ISO_OP_1_Pin|ISO_OP_2_Pin|ISO_OP_3_Pin, GPIO_PIN_RESET);
 800144a:	2200      	movs	r2, #0
 800144c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001450:	483e      	ldr	r0, [pc, #248]	; (800154c <MX_GPIO_Init+0x178>)
 8001452:	f002 f9a3 	bl	800379c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CS_Pin|FAULT_LED_Pin, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	21c0      	movs	r1, #192	; 0xc0
 800145a:	483d      	ldr	r0, [pc, #244]	; (8001550 <MX_GPIO_Init+0x17c>)
 800145c:	f002 f99e 	bl	800379c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ISO_OP_1_Pin ISO_OP_2_Pin ISO_OP_3_Pin */
  GPIO_InitStruct.Pin = ISO_OP_1_Pin|ISO_OP_2_Pin|ISO_OP_3_Pin;
 8001460:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001466:	2311      	movs	r3, #17
 8001468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2300      	movs	r3, #0
 8001470:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4619      	mov	r1, r3
 8001478:	4834      	ldr	r0, [pc, #208]	; (800154c <MX_GPIO_Init+0x178>)
 800147a:	f002 f80d 	bl	8003498 <HAL_GPIO_Init>

  /*Configure GPIO pin : ISO_IP_1_Pin */
  GPIO_InitStruct.Pin = ISO_IP_1_Pin;
 800147e:	2301      	movs	r3, #1
 8001480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001482:	2300      	movs	r3, #0
 8001484:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ISO_IP_1_GPIO_Port, &GPIO_InitStruct);
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	4619      	mov	r1, r3
 8001490:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001494:	f002 f800 	bl	8003498 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_INDEX_Pin */
  GPIO_InitStruct.Pin = ENC_INDEX_Pin;
 8001498:	2301      	movs	r3, #1
 800149a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800149c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_INDEX_GPIO_Port, &GPIO_InitStruct);
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	4619      	mov	r1, r3
 80014ac:	4828      	ldr	r0, [pc, #160]	; (8001550 <MX_GPIO_Init+0x17c>)
 80014ae:	f001 fff3 	bl	8003498 <HAL_GPIO_Init>

  /*Configure GPIO pins : UNUSED_Pin UNUSED2_Pin */
  GPIO_InitStruct.Pin = UNUSED_Pin|UNUSED2_Pin;
 80014b2:	f240 4302 	movw	r3, #1026	; 0x402
 80014b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014bc:	2301      	movs	r3, #1
 80014be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4619      	mov	r1, r3
 80014c6:	4822      	ldr	r0, [pc, #136]	; (8001550 <MX_GPIO_Init+0x17c>)
 80014c8:	f001 ffe6 	bl	8003498 <HAL_GPIO_Init>

  /*Configure GPIO pin : DC_OVP_Pin */
  GPIO_InitStruct.Pin = DC_OVP_Pin;
 80014cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DC_OVP_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e6:	f001 ffd7 	bl	8003498 <HAL_GPIO_Init>

  /*Configure GPIO pin : UNUSED3_Pin */
  GPIO_InitStruct.Pin = UNUSED3_Pin;
 80014ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014f4:	2301      	movs	r3, #1
 80014f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UNUSED3_GPIO_Port, &GPIO_InitStruct);
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4619      	mov	r1, r3
 80014fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001502:	f001 ffc9 	bl	8003498 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001506:	2340      	movs	r3, #64	; 0x40
 8001508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150a:	2301      	movs	r3, #1
 800150c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4619      	mov	r1, r3
 800151c:	480c      	ldr	r0, [pc, #48]	; (8001550 <MX_GPIO_Init+0x17c>)
 800151e:	f001 ffbb 	bl	8003498 <HAL_GPIO_Init>

  /*Configure GPIO pin : FAULT_LED_Pin */
  GPIO_InitStruct.Pin = FAULT_LED_Pin;
 8001522:	2380      	movs	r3, #128	; 0x80
 8001524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001526:	2311      	movs	r3, #17
 8001528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FAULT_LED_GPIO_Port, &GPIO_InitStruct);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	4805      	ldr	r0, [pc, #20]	; (8001550 <MX_GPIO_Init+0x17c>)
 800153a:	f001 ffad 	bl	8003498 <HAL_GPIO_Init>

}
 800153e:	bf00      	nop
 8001540:	3728      	adds	r7, #40	; 0x28
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40021000 	.word	0x40021000
 800154c:	48000800 	.word	0x48000800
 8001550:	48000400 	.word	0x48000400

08001554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001558:	b672      	cpsid	i
}
 800155a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800155c:	e7fe      	b.n	800155c <Error_Handler+0x8>
	...

08001560 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001566:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <HAL_MspInit+0x44>)
 8001568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800156a:	4a0e      	ldr	r2, [pc, #56]	; (80015a4 <HAL_MspInit+0x44>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6613      	str	r3, [r2, #96]	; 0x60
 8001572:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <HAL_MspInit+0x44>)
 8001574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800157e:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <HAL_MspInit+0x44>)
 8001580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001582:	4a08      	ldr	r2, [pc, #32]	; (80015a4 <HAL_MspInit+0x44>)
 8001584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001588:	6593      	str	r3, [r2, #88]	; 0x58
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_MspInit+0x44>)
 800158c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001592:	603b      	str	r3, [r7, #0]
 8001594:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001596:	f002 f9d7 	bl	8003948 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40021000 	.word	0x40021000

080015a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b09e      	sub	sp, #120	; 0x78
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015c0:	f107 0320 	add.w	r3, r7, #32
 80015c4:	2244      	movs	r2, #68	; 0x44
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f005 ffbb 	bl	8007544 <memset>
  if(hadc->Instance==ADC1)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015d6:	f040 808b 	bne.w	80016f0 <HAL_ADC_MspInit+0x148>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80015da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015de:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80015e0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80015e4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015e6:	f107 0320 	add.w	r3, r7, #32
 80015ea:	4618      	mov	r0, r3
 80015ec:	f002 feec 	bl	80043c8 <HAL_RCCEx_PeriphCLKConfig>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80015f6:	f7ff ffad 	bl	8001554 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80015fa:	4b71      	ldr	r3, [pc, #452]	; (80017c0 <HAL_ADC_MspInit+0x218>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	3301      	adds	r3, #1
 8001600:	4a6f      	ldr	r2, [pc, #444]	; (80017c0 <HAL_ADC_MspInit+0x218>)
 8001602:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001604:	4b6e      	ldr	r3, [pc, #440]	; (80017c0 <HAL_ADC_MspInit+0x218>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d10b      	bne.n	8001624 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800160c:	4b6d      	ldr	r3, [pc, #436]	; (80017c4 <HAL_ADC_MspInit+0x21c>)
 800160e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001610:	4a6c      	ldr	r2, [pc, #432]	; (80017c4 <HAL_ADC_MspInit+0x21c>)
 8001612:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001616:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001618:	4b6a      	ldr	r3, [pc, #424]	; (80017c4 <HAL_ADC_MspInit+0x21c>)
 800161a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001620:	61fb      	str	r3, [r7, #28]
 8001622:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001624:	4b67      	ldr	r3, [pc, #412]	; (80017c4 <HAL_ADC_MspInit+0x21c>)
 8001626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001628:	4a66      	ldr	r2, [pc, #408]	; (80017c4 <HAL_ADC_MspInit+0x21c>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001630:	4b64      	ldr	r3, [pc, #400]	; (80017c4 <HAL_ADC_MspInit+0x21c>)
 8001632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	61bb      	str	r3, [r7, #24]
 800163a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163c:	4b61      	ldr	r3, [pc, #388]	; (80017c4 <HAL_ADC_MspInit+0x21c>)
 800163e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001640:	4a60      	ldr	r2, [pc, #384]	; (80017c4 <HAL_ADC_MspInit+0x21c>)
 8001642:	f043 0302 	orr.w	r3, r3, #2
 8001646:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001648:	4b5e      	ldr	r3, [pc, #376]	; (80017c4 <HAL_ADC_MspInit+0x21c>)
 800164a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = FET_TEMP_Pin;
 8001654:	2302      	movs	r3, #2
 8001656:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001658:	2303      	movs	r3, #3
 800165a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(FET_TEMP_GPIO_Port, &GPIO_InitStruct);
 8001660:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001664:	4619      	mov	r1, r3
 8001666:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800166a:	f001 ff15 	bl	8003498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CS_U_Pin;
 800166e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001672:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001674:	2303      	movs	r3, #3
 8001676:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(CS_U_GPIO_Port, &GPIO_InitStruct);
 800167c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001680:	4619      	mov	r1, r3
 8001682:	4851      	ldr	r0, [pc, #324]	; (80017c8 <HAL_ADC_MspInit+0x220>)
 8001684:	f001 ff08 	bl	8003498 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001688:	4b50      	ldr	r3, [pc, #320]	; (80017cc <HAL_ADC_MspInit+0x224>)
 800168a:	4a51      	ldr	r2, [pc, #324]	; (80017d0 <HAL_ADC_MspInit+0x228>)
 800168c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800168e:	4b4f      	ldr	r3, [pc, #316]	; (80017cc <HAL_ADC_MspInit+0x224>)
 8001690:	2205      	movs	r2, #5
 8001692:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001694:	4b4d      	ldr	r3, [pc, #308]	; (80017cc <HAL_ADC_MspInit+0x224>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800169a:	4b4c      	ldr	r3, [pc, #304]	; (80017cc <HAL_ADC_MspInit+0x224>)
 800169c:	2200      	movs	r2, #0
 800169e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016a0:	4b4a      	ldr	r3, [pc, #296]	; (80017cc <HAL_ADC_MspInit+0x224>)
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016a6:	4b49      	ldr	r3, [pc, #292]	; (80017cc <HAL_ADC_MspInit+0x224>)
 80016a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016ae:	4b47      	ldr	r3, [pc, #284]	; (80017cc <HAL_ADC_MspInit+0x224>)
 80016b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016b6:	4b45      	ldr	r3, [pc, #276]	; (80017cc <HAL_ADC_MspInit+0x224>)
 80016b8:	2220      	movs	r2, #32
 80016ba:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80016bc:	4b43      	ldr	r3, [pc, #268]	; (80017cc <HAL_ADC_MspInit+0x224>)
 80016be:	2200      	movs	r2, #0
 80016c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016c2:	4842      	ldr	r0, [pc, #264]	; (80017cc <HAL_ADC_MspInit+0x224>)
 80016c4:	f001 fb18 	bl	8002cf8 <HAL_DMA_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_ADC_MspInit+0x12a>
    {
      Error_Handler();
 80016ce:	f7ff ff41 	bl	8001554 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a3d      	ldr	r2, [pc, #244]	; (80017cc <HAL_ADC_MspInit+0x224>)
 80016d6:	655a      	str	r2, [r3, #84]	; 0x54
 80016d8:	4a3c      	ldr	r2, [pc, #240]	; (80017cc <HAL_ADC_MspInit+0x224>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2100      	movs	r1, #0
 80016e2:	2012      	movs	r0, #18
 80016e4:	f001 fad3 	bl	8002c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80016e8:	2012      	movs	r0, #18
 80016ea:	f001 faea 	bl	8002cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80016ee:	e063      	b.n	80017b8 <HAL_ADC_MspInit+0x210>
  else if(hadc->Instance==ADC2)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a37      	ldr	r2, [pc, #220]	; (80017d4 <HAL_ADC_MspInit+0x22c>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d15e      	bne.n	80017b8 <HAL_ADC_MspInit+0x210>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80016fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016fe:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001700:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001704:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001706:	f107 0320 	add.w	r3, r7, #32
 800170a:	4618      	mov	r0, r3
 800170c:	f002 fe5c 	bl	80043c8 <HAL_RCCEx_PeriphCLKConfig>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_ADC_MspInit+0x172>
      Error_Handler();
 8001716:	f7ff ff1d 	bl	8001554 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800171a:	4b29      	ldr	r3, [pc, #164]	; (80017c0 <HAL_ADC_MspInit+0x218>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	3301      	adds	r3, #1
 8001720:	4a27      	ldr	r2, [pc, #156]	; (80017c0 <HAL_ADC_MspInit+0x218>)
 8001722:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001724:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <HAL_ADC_MspInit+0x218>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d10b      	bne.n	8001744 <HAL_ADC_MspInit+0x19c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800172c:	4b25      	ldr	r3, [pc, #148]	; (80017c4 <HAL_ADC_MspInit+0x21c>)
 800172e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001730:	4a24      	ldr	r2, [pc, #144]	; (80017c4 <HAL_ADC_MspInit+0x21c>)
 8001732:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001736:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001738:	4b22      	ldr	r3, [pc, #136]	; (80017c4 <HAL_ADC_MspInit+0x21c>)
 800173a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001744:	4b1f      	ldr	r3, [pc, #124]	; (80017c4 <HAL_ADC_MspInit+0x21c>)
 8001746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001748:	4a1e      	ldr	r2, [pc, #120]	; (80017c4 <HAL_ADC_MspInit+0x21c>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001750:	4b1c      	ldr	r3, [pc, #112]	; (80017c4 <HAL_ADC_MspInit+0x21c>)
 8001752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <HAL_ADC_MspInit+0x21c>)
 800175e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001760:	4a18      	ldr	r2, [pc, #96]	; (80017c4 <HAL_ADC_MspInit+0x21c>)
 8001762:	f043 0302 	orr.w	r3, r3, #2
 8001766:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001768:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <HAL_ADC_MspInit+0x21c>)
 800176a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VBUS_ADC_Pin|MOTOR_TEMP_Pin;
 8001774:	2330      	movs	r3, #48	; 0x30
 8001776:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001778:	2303      	movs	r3, #3
 800177a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001780:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001784:	4619      	mov	r1, r3
 8001786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800178a:	f001 fe85 	bl	8003498 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CS_W_Pin|CS_V_Pin;
 800178e:	f640 0304 	movw	r3, #2052	; 0x804
 8001792:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001794:	2303      	movs	r3, #3
 8001796:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017a0:	4619      	mov	r1, r3
 80017a2:	4809      	ldr	r0, [pc, #36]	; (80017c8 <HAL_ADC_MspInit+0x220>)
 80017a4:	f001 fe78 	bl	8003498 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2100      	movs	r1, #0
 80017ac:	2012      	movs	r0, #18
 80017ae:	f001 fa6e 	bl	8002c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80017b2:	2012      	movs	r0, #18
 80017b4:	f001 fa85 	bl	8002cc2 <HAL_NVIC_EnableIRQ>
}
 80017b8:	bf00      	nop
 80017ba:	3778      	adds	r7, #120	; 0x78
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000354 	.word	0x20000354
 80017c4:	40021000 	.word	0x40021000
 80017c8:	48000400 	.word	0x48000400
 80017cc:	20000100 	.word	0x20000100
 80017d0:	40020008 	.word	0x40020008
 80017d4:	50000100 	.word	0x50000100

080017d8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b09a      	sub	sp, #104	; 0x68
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017f0:	f107 0310 	add.w	r3, r7, #16
 80017f4:	2244      	movs	r2, #68	; 0x44
 80017f6:	2100      	movs	r1, #0
 80017f8:	4618      	mov	r0, r3
 80017fa:	f005 fea3 	bl	8007544 <memset>
  if(hfdcan->Instance==FDCAN1)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a20      	ldr	r2, [pc, #128]	; (8001884 <HAL_FDCAN_MspInit+0xac>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d138      	bne.n	800187a <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800180c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800180e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001812:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001814:	f107 0310 	add.w	r3, r7, #16
 8001818:	4618      	mov	r0, r3
 800181a:	f002 fdd5 	bl	80043c8 <HAL_RCCEx_PeriphCLKConfig>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001824:	f7ff fe96 	bl	8001554 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001828:	4b17      	ldr	r3, [pc, #92]	; (8001888 <HAL_FDCAN_MspInit+0xb0>)
 800182a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182c:	4a16      	ldr	r2, [pc, #88]	; (8001888 <HAL_FDCAN_MspInit+0xb0>)
 800182e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001832:	6593      	str	r3, [r2, #88]	; 0x58
 8001834:	4b14      	ldr	r3, [pc, #80]	; (8001888 <HAL_FDCAN_MspInit+0xb0>)
 8001836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <HAL_FDCAN_MspInit+0xb0>)
 8001842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001844:	4a10      	ldr	r2, [pc, #64]	; (8001888 <HAL_FDCAN_MspInit+0xb0>)
 8001846:	f043 0302 	orr.w	r3, r3, #2
 800184a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800184c:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <HAL_FDCAN_MspInit+0xb0>)
 800184e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001858:	f44f 7340 	mov.w	r3, #768	; 0x300
 800185c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	2300      	movs	r3, #0
 8001868:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800186a:	2309      	movs	r3, #9
 800186c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001872:	4619      	mov	r1, r3
 8001874:	4805      	ldr	r0, [pc, #20]	; (800188c <HAL_FDCAN_MspInit+0xb4>)
 8001876:	f001 fe0f 	bl	8003498 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800187a:	bf00      	nop
 800187c:	3768      	adds	r7, #104	; 0x68
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40006400 	.word	0x40006400
 8001888:	40021000 	.word	0x40021000
 800188c:	48000400 	.word	0x48000400

08001890 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	; 0x28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a1b      	ldr	r2, [pc, #108]	; (800191c <HAL_SPI_MspInit+0x8c>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d12f      	bne.n	8001912 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018b2:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <HAL_SPI_MspInit+0x90>)
 80018b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b6:	4a1a      	ldr	r2, [pc, #104]	; (8001920 <HAL_SPI_MspInit+0x90>)
 80018b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018bc:	6613      	str	r3, [r2, #96]	; 0x60
 80018be:	4b18      	ldr	r3, [pc, #96]	; (8001920 <HAL_SPI_MspInit+0x90>)
 80018c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_SPI_MspInit+0x90>)
 80018cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ce:	4a14      	ldr	r2, [pc, #80]	; (8001920 <HAL_SPI_MspInit+0x90>)
 80018d0:	f043 0302 	orr.w	r3, r3, #2
 80018d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d6:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_SPI_MspInit+0x90>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80018e2:	2338      	movs	r3, #56	; 0x38
 80018e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018f2:	2305      	movs	r3, #5
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	4809      	ldr	r0, [pc, #36]	; (8001924 <HAL_SPI_MspInit+0x94>)
 80018fe:	f001 fdcb 	bl	8003498 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2100      	movs	r1, #0
 8001906:	2023      	movs	r0, #35	; 0x23
 8001908:	f001 f9c1 	bl	8002c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800190c:	2023      	movs	r0, #35	; 0x23
 800190e:	f001 f9d8 	bl	8002cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001912:	bf00      	nop
 8001914:	3728      	adds	r7, #40	; 0x28
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40013000 	.word	0x40013000
 8001920:	40021000 	.word	0x40021000
 8001924:	48000400 	.word	0x48000400

08001928 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	; 0x28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a24      	ldr	r2, [pc, #144]	; (80019d8 <HAL_TIM_Base_MspInit+0xb0>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d141      	bne.n	80019ce <HAL_TIM_Base_MspInit+0xa6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800194a:	4b24      	ldr	r3, [pc, #144]	; (80019dc <HAL_TIM_Base_MspInit+0xb4>)
 800194c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194e:	4a23      	ldr	r2, [pc, #140]	; (80019dc <HAL_TIM_Base_MspInit+0xb4>)
 8001950:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001954:	6613      	str	r3, [r2, #96]	; 0x60
 8001956:	4b21      	ldr	r3, [pc, #132]	; (80019dc <HAL_TIM_Base_MspInit+0xb4>)
 8001958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800195a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001962:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <HAL_TIM_Base_MspInit+0xb4>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001966:	4a1d      	ldr	r2, [pc, #116]	; (80019dc <HAL_TIM_Base_MspInit+0xb4>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800196e:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <HAL_TIM_Base_MspInit+0xb4>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_BKIN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800197a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800197e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001980:	2312      	movs	r3, #18
 8001982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2300      	movs	r3, #0
 800198a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 800198c:	230c      	movs	r3, #12
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4619      	mov	r1, r3
 8001996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800199a:	f001 fd7d 	bl	8003498 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	2100      	movs	r1, #0
 80019a2:	2018      	movs	r0, #24
 80019a4:	f001 f973 	bl	8002c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80019a8:	2018      	movs	r0, #24
 80019aa:	f001 f98a 	bl	8002cc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2101      	movs	r1, #1
 80019b2:	2019      	movs	r0, #25
 80019b4:	f001 f96b 	bl	8002c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80019b8:	2019      	movs	r0, #25
 80019ba:	f001 f982 	bl	8002cc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80019be:	2200      	movs	r2, #0
 80019c0:	2100      	movs	r1, #0
 80019c2:	201a      	movs	r0, #26
 80019c4:	f001 f963 	bl	8002c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80019c8:	201a      	movs	r0, #26
 80019ca:	f001 f97a 	bl	8002cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80019ce:	bf00      	nop
 80019d0:	3728      	adds	r7, #40	; 0x28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40012c00 	.word	0x40012c00
 80019dc:	40021000 	.word	0x40021000

080019e0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	; 0x28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a17      	ldr	r2, [pc, #92]	; (8001a5c <HAL_TIM_Encoder_MspInit+0x7c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d128      	bne.n	8001a54 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a02:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <HAL_TIM_Encoder_MspInit+0x80>)
 8001a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a06:	4a16      	ldr	r2, [pc, #88]	; (8001a60 <HAL_TIM_Encoder_MspInit+0x80>)
 8001a08:	f043 0302 	orr.w	r3, r3, #2
 8001a0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a0e:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <HAL_TIM_Encoder_MspInit+0x80>)
 8001a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1a:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <HAL_TIM_Encoder_MspInit+0x80>)
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1e:	4a10      	ldr	r2, [pc, #64]	; (8001a60 <HAL_TIM_Encoder_MspInit+0x80>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a26:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <HAL_TIM_Encoder_MspInit+0x80>)
 8001a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8001a32:	23c0      	movs	r3, #192	; 0xc0
 8001a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a42:	2302      	movs	r3, #2
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a50:	f001 fd22 	bl	8003498 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a54:	bf00      	nop
 8001a56:	3728      	adds	r7, #40	; 0x28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40000400 	.word	0x40000400
 8001a60:	40021000 	.word	0x40021000

08001a64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	; 0x28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a29      	ldr	r2, [pc, #164]	; (8001b28 <HAL_TIM_MspPostInit+0xc4>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d14b      	bne.n	8001b1e <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a86:	4b29      	ldr	r3, [pc, #164]	; (8001b2c <HAL_TIM_MspPostInit+0xc8>)
 8001a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8a:	4a28      	ldr	r2, [pc, #160]	; (8001b2c <HAL_TIM_MspPostInit+0xc8>)
 8001a8c:	f043 0302 	orr.w	r3, r3, #2
 8001a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a92:	4b26      	ldr	r3, [pc, #152]	; (8001b2c <HAL_TIM_MspPostInit+0xc8>)
 8001a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9e:	4b23      	ldr	r3, [pc, #140]	; (8001b2c <HAL_TIM_MspPostInit+0xc8>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa2:	4a22      	ldr	r2, [pc, #136]	; (8001b2c <HAL_TIM_MspPostInit+0xc8>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aaa:	4b20      	ldr	r3, [pc, #128]	; (8001b2c <HAL_TIM_MspPostInit+0xc8>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001ab6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abc:	2302      	movs	r3, #2
 8001abe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001ac8:	2306      	movs	r3, #6
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4817      	ldr	r0, [pc, #92]	; (8001b30 <HAL_TIM_MspPostInit+0xcc>)
 8001ad4:	f001 fce0 	bl	8003498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ad8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001aea:	2304      	movs	r3, #4
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	4619      	mov	r1, r3
 8001af4:	480e      	ldr	r0, [pc, #56]	; (8001b30 <HAL_TIM_MspPostInit+0xcc>)
 8001af6:	f001 fccf 	bl	8003498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001afa:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001b0c:	2306      	movs	r3, #6
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	4619      	mov	r1, r3
 8001b16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b1a:	f001 fcbd 	bl	8003498 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b1e:	bf00      	nop
 8001b20:	3728      	adds	r7, #40	; 0x28
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40012c00 	.word	0x40012c00
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	48000400 	.word	0x48000400

08001b34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b09a      	sub	sp, #104	; 0x68
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b4c:	f107 0310 	add.w	r3, r7, #16
 8001b50:	2244      	movs	r2, #68	; 0x44
 8001b52:	2100      	movs	r1, #0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f005 fcf5 	bl	8007544 <memset>
  if(huart->Instance==USART2)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a1f      	ldr	r2, [pc, #124]	; (8001bdc <HAL_UART_MspInit+0xa8>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d136      	bne.n	8001bd2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b64:	2302      	movs	r3, #2
 8001b66:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b6c:	f107 0310 	add.w	r3, r7, #16
 8001b70:	4618      	mov	r0, r3
 8001b72:	f002 fc29 	bl	80043c8 <HAL_RCCEx_PeriphCLKConfig>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b7c:	f7ff fcea 	bl	8001554 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b80:	4b17      	ldr	r3, [pc, #92]	; (8001be0 <HAL_UART_MspInit+0xac>)
 8001b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b84:	4a16      	ldr	r2, [pc, #88]	; (8001be0 <HAL_UART_MspInit+0xac>)
 8001b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b8a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b8c:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <HAL_UART_MspInit+0xac>)
 8001b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b98:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <HAL_UART_MspInit+0xac>)
 8001b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9c:	4a10      	ldr	r2, [pc, #64]	; (8001be0 <HAL_UART_MspInit+0xac>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ba4:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <HAL_UART_MspInit+0xac>)
 8001ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bb0:	230c      	movs	r3, #12
 8001bb2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bc0:	2307      	movs	r3, #7
 8001bc2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bce:	f001 fc63 	bl	8003498 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bd2:	bf00      	nop
 8001bd4:	3768      	adds	r7, #104	; 0x68
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40004400 	.word	0x40004400
 8001be0:	40021000 	.word	0x40021000

08001be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <NMI_Handler+0x4>

08001bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bee:	e7fe      	b.n	8001bee <HardFault_Handler+0x4>

08001bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf4:	e7fe      	b.n	8001bf4 <MemManage_Handler+0x4>

08001bf6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bfa:	e7fe      	b.n	8001bfa <BusFault_Handler+0x4>

08001bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c00:	e7fe      	b.n	8001c00 <UsageFault_Handler+0x4>

08001c02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c30:	f000 f978 	bl	8001f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c3c:	4802      	ldr	r0, [pc, #8]	; (8001c48 <DMA1_Channel1_IRQHandler+0x10>)
 8001c3e:	f001 f96a 	bl	8002f16 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000100 	.word	0x20000100

08001c4c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c50:	4803      	ldr	r0, [pc, #12]	; (8001c60 <ADC1_2_IRQHandler+0x14>)
 8001c52:	f000 fc0d 	bl	8002470 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001c56:	4803      	ldr	r0, [pc, #12]	; (8001c64 <ADC1_2_IRQHandler+0x18>)
 8001c58:	f000 fc0a 	bl	8002470 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000028 	.word	0x20000028
 8001c64:	20000094 	.word	0x20000094

08001c68 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c6c:	4802      	ldr	r0, [pc, #8]	; (8001c78 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001c6e:	f003 fc3b 	bl	80054e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000228 	.word	0x20000228

08001c7c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c80:	4802      	ldr	r0, [pc, #8]	; (8001c8c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001c82:	f003 fc31 	bl	80054e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000228 	.word	0x20000228

08001c90 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c94:	4802      	ldr	r0, [pc, #8]	; (8001ca0 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001c96:	f003 fc27 	bl	80054e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000228 	.word	0x20000228

08001ca4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001ca8:	4802      	ldr	r0, [pc, #8]	; (8001cb4 <SPI1_IRQHandler+0x10>)
 8001caa:	f003 f83b 	bl	8004d24 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	200001c4 	.word	0x200001c4

08001cb8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <SystemInit+0x20>)
 8001cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cc2:	4a05      	ldr	r2, [pc, #20]	; (8001cd8 <SystemInit+0x20>)
 8001cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cdc:	480d      	ldr	r0, [pc, #52]	; (8001d14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cde:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ce0:	480d      	ldr	r0, [pc, #52]	; (8001d18 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ce2:	490e      	ldr	r1, [pc, #56]	; (8001d1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ce4:	4a0e      	ldr	r2, [pc, #56]	; (8001d20 <LoopForever+0xe>)
  movs r3, #0
 8001ce6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001ce8:	e002      	b.n	8001cf0 <LoopCopyDataInit>

08001cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cee:	3304      	adds	r3, #4

08001cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cf4:	d3f9      	bcc.n	8001cea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cf6:	4a0b      	ldr	r2, [pc, #44]	; (8001d24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cf8:	4c0b      	ldr	r4, [pc, #44]	; (8001d28 <LoopForever+0x16>)
  movs r3, #0
 8001cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cfc:	e001      	b.n	8001d02 <LoopFillZerobss>

08001cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d00:	3204      	adds	r2, #4

08001d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d04:	d3fb      	bcc.n	8001cfe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d06:	f7ff ffd7 	bl	8001cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d0a:	f005 fbf7 	bl	80074fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d0e:	f7ff f823 	bl	8000d58 <main>

08001d12 <LoopForever>:

LoopForever:
    b LoopForever
 8001d12:	e7fe      	b.n	8001d12 <LoopForever>
  ldr   r0, =_estack
 8001d14:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001d20:	080075bc 	.word	0x080075bc
  ldr r2, =_sbss
 8001d24:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001d28:	20000364 	.word	0x20000364

08001d2c <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d2c:	e7fe      	b.n	8001d2c <COMP1_2_3_IRQHandler>
	...

08001d30 <AS5047_SPI_Read>:

  return 0;
}


uint16_t AS5047_SPI_Read(uint16_t command, uint8_t continuousRead) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af02      	add	r7, sp, #8
 8001d36:	4603      	mov	r3, r0
 8001d38:	460a      	mov	r2, r1
 8001d3a:	80fb      	strh	r3, [r7, #6]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	717b      	strb	r3, [r7, #5]
  //write command frame.
  uint16_t finalDataVal;
  txbuf[0] = command >> 8U;
 8001d40:	88fb      	ldrh	r3, [r7, #6]
 8001d42:	0a1b      	lsrs	r3, r3, #8
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	4b28      	ldr	r3, [pc, #160]	; (8001dec <AS5047_SPI_Read+0xbc>)
 8001d4a:	701a      	strb	r2, [r3, #0]
  txbuf[1] = command & 0xFF;
 8001d4c:	88fb      	ldrh	r3, [r7, #6]
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	4b26      	ldr	r3, [pc, #152]	; (8001dec <AS5047_SPI_Read+0xbc>)
 8001d52:	705a      	strb	r2, [r3, #1]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001d54:	2200      	movs	r2, #0
 8001d56:	2140      	movs	r1, #64	; 0x40
 8001d58:	4825      	ldr	r0, [pc, #148]	; (8001df0 <AS5047_SPI_Read+0xc0>)
 8001d5a:	f001 fd1f 	bl	800379c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&txbuf, (uint8_t*)&rxbuf, 2,100);
 8001d5e:	2364      	movs	r3, #100	; 0x64
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	2302      	movs	r3, #2
 8001d64:	4a23      	ldr	r2, [pc, #140]	; (8001df4 <AS5047_SPI_Read+0xc4>)
 8001d66:	4921      	ldr	r1, [pc, #132]	; (8001dec <AS5047_SPI_Read+0xbc>)
 8001d68:	4823      	ldr	r0, [pc, #140]	; (8001df8 <AS5047_SPI_Read+0xc8>)
 8001d6a:	f002 fdc8 	bl	80048fe <HAL_SPI_TransmitReceive>
  while( hspi1.State == HAL_SPI_STATE_BUSY );
 8001d6e:	bf00      	nop
 8001d70:	4b21      	ldr	r3, [pc, #132]	; (8001df8 <AS5047_SPI_Read+0xc8>)
 8001d72:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d0f9      	beq.n	8001d70 <AS5047_SPI_Read+0x40>
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	2140      	movs	r1, #64	; 0x40
 8001d80:	481b      	ldr	r0, [pc, #108]	; (8001df0 <AS5047_SPI_Read+0xc0>)
 8001d82:	f001 fd0b 	bl	800379c <HAL_GPIO_WritePin>

  if (continuousRead ==0){
 8001d86:	797b      	ldrb	r3, [r7, #5]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d11e      	bne.n	8001dca <AS5047_SPI_Read+0x9a>
	  //this is the NOP command frame for receiving data if you want to read the register once.
	  txbuf[0] = NOP_FRAME >> 8;
 8001d8c:	4b17      	ldr	r3, [pc, #92]	; (8001dec <AS5047_SPI_Read+0xbc>)
 8001d8e:	22c0      	movs	r2, #192	; 0xc0
 8001d90:	701a      	strb	r2, [r3, #0]
	  txbuf[1] = NOP_FRAME & 0xFF;
 8001d92:	4b16      	ldr	r3, [pc, #88]	; (8001dec <AS5047_SPI_Read+0xbc>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	705a      	strb	r2, [r3, #1]
	  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2140      	movs	r1, #64	; 0x40
 8001d9c:	4814      	ldr	r0, [pc, #80]	; (8001df0 <AS5047_SPI_Read+0xc0>)
 8001d9e:	f001 fcfd 	bl	800379c <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&txbuf, (uint8_t*)&rxbuf, 2,100);
 8001da2:	2364      	movs	r3, #100	; 0x64
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	2302      	movs	r3, #2
 8001da8:	4a12      	ldr	r2, [pc, #72]	; (8001df4 <AS5047_SPI_Read+0xc4>)
 8001daa:	4910      	ldr	r1, [pc, #64]	; (8001dec <AS5047_SPI_Read+0xbc>)
 8001dac:	4812      	ldr	r0, [pc, #72]	; (8001df8 <AS5047_SPI_Read+0xc8>)
 8001dae:	f002 fda6 	bl	80048fe <HAL_SPI_TransmitReceive>
	  while( hspi1.State == HAL_SPI_STATE_BUSY );
 8001db2:	bf00      	nop
 8001db4:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <AS5047_SPI_Read+0xc8>)
 8001db6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d0f9      	beq.n	8001db4 <AS5047_SPI_Read+0x84>
	  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	2140      	movs	r1, #64	; 0x40
 8001dc4:	480a      	ldr	r0, [pc, #40]	; (8001df0 <AS5047_SPI_Read+0xc0>)
 8001dc6:	f001 fce9 	bl	800379c <HAL_GPIO_WritePin>
  }
  finalDataVal = ((uint16_t)rxbuf[0])<<8;
 8001dca:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <AS5047_SPI_Read+0xc4>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	021b      	lsls	r3, r3, #8
 8001dd2:	81fb      	strh	r3, [r7, #14]
  finalDataVal += rxbuf[1];
 8001dd4:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <AS5047_SPI_Read+0xc4>)
 8001dd6:	785b      	ldrb	r3, [r3, #1]
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	89fb      	ldrh	r3, [r7, #14]
 8001ddc:	4413      	add	r3, r2
 8001dde:	81fb      	strh	r3, [r7, #14]

  return finalDataVal;
 8001de0:	89fb      	ldrh	r3, [r7, #14]

}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000358 	.word	0x20000358
 8001df0:	48000400 	.word	0x48000400
 8001df4:	2000035c 	.word	0x2000035c
 8001df8:	200001c4 	.word	0x200001c4

08001dfc <getEncoderAngleFromSPI>:
	angleMech_encCnt = encoderCNT * ENC_CNT_TO_MECH_ANGLE;
	return angleMech_encCnt;
}

//make continuous Read = 1 if your reading in the while loop etc.
float getEncoderAngleFromSPI(uint8_t continuousRead){
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
	uint16_t angleData = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	82fb      	strh	r3, [r7, #22]
	float angleMech = 0;
 8001e0a:	f04f 0300 	mov.w	r3, #0
 8001e0e:	613b      	str	r3, [r7, #16]
	ReadDataFrame readdataframe;
	Angle angle;
	readdataframe.raw = AS5047_SPI_Read(ANGLE_READ_FRAME,continuousRead);//AS5047_readRegister(ANGLE_REG,1);
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	4619      	mov	r1, r3
 8001e14:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 8001e18:	f7ff ff8a 	bl	8001d30 <AS5047_SPI_Read>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	81bb      	strh	r3, [r7, #12]
	angle.raw = readdataframe.values.data;
 8001e20:	89bb      	ldrh	r3, [r7, #12]
 8001e22:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	813b      	strh	r3, [r7, #8]
	angleData =  angle.values.cordicang;
 8001e2a:	893b      	ldrh	r3, [r7, #8]
 8001e2c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	82fb      	strh	r3, [r7, #22]
	angleMech = angleData*360.0/16384;
 8001e34:	8afb      	ldrh	r3, [r7, #22]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe fb40 	bl	80004bc <__aeabi_i2d>
 8001e3c:	f04f 0200 	mov.w	r2, #0
 8001e40:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <getEncoderAngleFromSPI+0x7c>)
 8001e42:	f7fe fba5 	bl	8000590 <__aeabi_dmul>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4610      	mov	r0, r2
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <getEncoderAngleFromSPI+0x80>)
 8001e54:	f7fe fcc6 	bl	80007e4 <__aeabi_ddiv>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f7fe fda8 	bl	80009b4 <__aeabi_d2f>
 8001e64:	4603      	mov	r3, r0
 8001e66:	613b      	str	r3, [r7, #16]
	return angleMech;
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	ee07 3a90 	vmov	s15, r3
}
 8001e6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40768000 	.word	0x40768000
 8001e7c:	40d00000 	.word	0x40d00000

08001e80 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e86:	2300      	movs	r3, #0
 8001e88:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e8a:	2003      	movs	r0, #3
 8001e8c:	f000 fef4 	bl	8002c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e90:	200f      	movs	r0, #15
 8001e92:	f000 f80d 	bl	8001eb0 <HAL_InitTick>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d002      	beq.n	8001ea2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	71fb      	strb	r3, [r7, #7]
 8001ea0:	e001      	b.n	8001ea6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ea2:	f7ff fb5d 	bl	8001560 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ea6:	79fb      	ldrb	r3, [r7, #7]

}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ebc:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <HAL_InitTick+0x68>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d022      	beq.n	8001f0a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ec4:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <HAL_InitTick+0x6c>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <HAL_InitTick+0x68>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ed0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 ff00 	bl	8002cde <HAL_SYSTICK_Config>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10f      	bne.n	8001f04 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b0f      	cmp	r3, #15
 8001ee8:	d809      	bhi.n	8001efe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eea:	2200      	movs	r2, #0
 8001eec:	6879      	ldr	r1, [r7, #4]
 8001eee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ef2:	f000 fecc 	bl	8002c8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ef6:	4a0a      	ldr	r2, [pc, #40]	; (8001f20 <HAL_InitTick+0x70>)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6013      	str	r3, [r2, #0]
 8001efc:	e007      	b.n	8001f0e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	73fb      	strb	r3, [r7, #15]
 8001f02:	e004      	b.n	8001f0e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	73fb      	strb	r3, [r7, #15]
 8001f08:	e001      	b.n	8001f0e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20000008 	.word	0x20000008
 8001f1c:	20000000 	.word	0x20000000
 8001f20:	20000004 	.word	0x20000004

08001f24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f28:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <HAL_IncTick+0x1c>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <HAL_IncTick+0x20>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4413      	add	r3, r2
 8001f32:	4a03      	ldr	r2, [pc, #12]	; (8001f40 <HAL_IncTick+0x1c>)
 8001f34:	6013      	str	r3, [r2, #0]
}
 8001f36:	bf00      	nop
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	20000360 	.word	0x20000360
 8001f44:	20000008 	.word	0x20000008

08001f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f4c:	4b03      	ldr	r3, [pc, #12]	; (8001f5c <HAL_GetTick+0x14>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	20000360 	.word	0x20000360

08001f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f68:	f7ff ffee 	bl	8001f48 <HAL_GetTick>
 8001f6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f78:	d004      	beq.n	8001f84 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f7a:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <HAL_Delay+0x40>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	4413      	add	r3, r2
 8001f82:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f84:	bf00      	nop
 8001f86:	f7ff ffdf 	bl	8001f48 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d8f7      	bhi.n	8001f86 <HAL_Delay+0x26>
  {
  }
}
 8001f96:	bf00      	nop
 8001f98:	bf00      	nop
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20000008 	.word	0x20000008

08001fa4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	609a      	str	r2, [r3, #8]
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffc:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002004:	2301      	movs	r3, #1
 8002006:	e000      	b.n	800200a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 031f 	and.w	r3, r3, #31
}
 8002026:	4618      	mov	r0, r3
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002042:	4618      	mov	r0, r3
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800205e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6093      	str	r3, [r2, #8]
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002082:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002086:	d101      	bne.n	800208c <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002088:	2301      	movs	r3, #1
 800208a:	e000      	b.n	800208e <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80020aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020ae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020d6:	d101      	bne.n	80020dc <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020d8:	2301      	movs	r3, #1
 80020da:	e000      	b.n	80020de <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d101      	bne.n	8002102 <LL_ADC_IsEnabled+0x18>
 80020fe:	2301      	movs	r3, #1
 8002100:	e000      	b.n	8002104 <LL_ADC_IsEnabled+0x1a>
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b04      	cmp	r3, #4
 8002122:	d101      	bne.n	8002128 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002124:	2301      	movs	r3, #1
 8002126:	e000      	b.n	800212a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b08      	cmp	r3, #8
 8002148:	d101      	bne.n	800214e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800215c:	b590      	push	{r4, r7, lr}
 800215e:	b089      	sub	sp, #36	; 0x24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002168:	2300      	movs	r3, #0
 800216a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e177      	b.n	8002466 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002180:	2b00      	cmp	r3, #0
 8002182:	d109      	bne.n	8002198 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff fa0f 	bl	80015a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff ff68 	bl	8002072 <LL_ADC_IsDeepPowerDownEnabled>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d004      	beq.n	80021b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff ff4e 	bl	800204e <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff ff83 	bl	80020c2 <LL_ADC_IsInternalRegulatorEnabled>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d115      	bne.n	80021ee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff ff67 	bl	800209a <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021cc:	4b9c      	ldr	r3, [pc, #624]	; (8002440 <HAL_ADC_Init+0x2e4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	099b      	lsrs	r3, r3, #6
 80021d2:	4a9c      	ldr	r2, [pc, #624]	; (8002444 <HAL_ADC_Init+0x2e8>)
 80021d4:	fba2 2303 	umull	r2, r3, r2, r3
 80021d8:	099b      	lsrs	r3, r3, #6
 80021da:	3301      	adds	r3, #1
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021e0:	e002      	b.n	80021e8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	3b01      	subs	r3, #1
 80021e6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f9      	bne.n	80021e2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff ff65 	bl	80020c2 <LL_ADC_IsInternalRegulatorEnabled>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10d      	bne.n	800221a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002202:	f043 0210 	orr.w	r2, r3, #16
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800220e:	f043 0201 	orr.w	r2, r3, #1
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff ff76 	bl	8002110 <LL_ADC_REG_IsConversionOngoing>
 8002224:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222a:	f003 0310 	and.w	r3, r3, #16
 800222e:	2b00      	cmp	r3, #0
 8002230:	f040 8110 	bne.w	8002454 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	2b00      	cmp	r3, #0
 8002238:	f040 810c 	bne.w	8002454 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002240:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002244:	f043 0202 	orr.w	r2, r3, #2
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff ff4a 	bl	80020ea <LL_ADC_IsEnabled>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d111      	bne.n	8002280 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800225c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002260:	f7ff ff43 	bl	80020ea <LL_ADC_IsEnabled>
 8002264:	4604      	mov	r4, r0
 8002266:	4878      	ldr	r0, [pc, #480]	; (8002448 <HAL_ADC_Init+0x2ec>)
 8002268:	f7ff ff3f 	bl	80020ea <LL_ADC_IsEnabled>
 800226c:	4603      	mov	r3, r0
 800226e:	4323      	orrs	r3, r4
 8002270:	2b00      	cmp	r3, #0
 8002272:	d105      	bne.n	8002280 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	4619      	mov	r1, r3
 800227a:	4874      	ldr	r0, [pc, #464]	; (800244c <HAL_ADC_Init+0x2f0>)
 800227c:	f7ff fe92 	bl	8001fa4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	7f5b      	ldrb	r3, [r3, #29]
 8002284:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800228a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002290:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002296:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800229e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d106      	bne.n	80022bc <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b2:	3b01      	subs	r3, #1
 80022b4:	045b      	lsls	r3, r3, #17
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d009      	beq.n	80022d8 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	4b5c      	ldr	r3, [pc, #368]	; (8002450 <HAL_ADC_Init+0x2f4>)
 80022e0:	4013      	ands	r3, r2
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6812      	ldr	r2, [r2, #0]
 80022e6:	69b9      	ldr	r1, [r7, #24]
 80022e8:	430b      	orrs	r3, r1
 80022ea:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff ff02 	bl	8002110 <LL_ADC_REG_IsConversionOngoing>
 800230c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff ff0f 	bl	8002136 <LL_ADC_INJ_IsConversionOngoing>
 8002318:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d16d      	bne.n	80023fc <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d16a      	bne.n	80023fc <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800232a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002332:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002342:	f023 0302 	bic.w	r3, r3, #2
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	69b9      	ldr	r1, [r7, #24]
 800234c:	430b      	orrs	r3, r1
 800234e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d017      	beq.n	8002388 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	691a      	ldr	r2, [r3, #16]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002366:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002370:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002374:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6911      	ldr	r1, [r2, #16]
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6812      	ldr	r2, [r2, #0]
 8002380:	430b      	orrs	r3, r1
 8002382:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002386:	e013      	b.n	80023b0 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691a      	ldr	r2, [r3, #16]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002396:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6812      	ldr	r2, [r2, #0]
 80023a4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80023a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023ac:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d118      	bne.n	80023ec <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80023c4:	f023 0304 	bic.w	r3, r3, #4
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80023d0:	4311      	orrs	r1, r2
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80023d6:	4311      	orrs	r1, r2
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023dc:	430a      	orrs	r2, r1
 80023de:	431a      	orrs	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f042 0201 	orr.w	r2, r2, #1
 80023e8:	611a      	str	r2, [r3, #16]
 80023ea:	e007      	b.n	80023fc <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	691a      	ldr	r2, [r3, #16]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0201 	bic.w	r2, r2, #1
 80023fa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d10c      	bne.n	800241e <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f023 010f 	bic.w	r1, r3, #15
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	1e5a      	subs	r2, r3, #1
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	631a      	str	r2, [r3, #48]	; 0x30
 800241c:	e007      	b.n	800242e <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 020f 	bic.w	r2, r2, #15
 800242c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002432:	f023 0303 	bic.w	r3, r3, #3
 8002436:	f043 0201 	orr.w	r2, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	65da      	str	r2, [r3, #92]	; 0x5c
 800243e:	e011      	b.n	8002464 <HAL_ADC_Init+0x308>
 8002440:	20000000 	.word	0x20000000
 8002444:	053e2d63 	.word	0x053e2d63
 8002448:	50000100 	.word	0x50000100
 800244c:	50000300 	.word	0x50000300
 8002450:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002458:	f043 0210 	orr.w	r2, r3, #16
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002464:	7ffb      	ldrb	r3, [r7, #31]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3724      	adds	r7, #36	; 0x24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd90      	pop	{r4, r7, pc}
 800246e:	bf00      	nop

08002470 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08a      	sub	sp, #40	; 0x28
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002478:	2300      	movs	r3, #0
 800247a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800248c:	4883      	ldr	r0, [pc, #524]	; (800269c <HAL_ADC_IRQHandler+0x22c>)
 800248e:	f7ff fdc2 	bl	8002016 <LL_ADC_GetMultimode>
 8002492:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d017      	beq.n	80024ce <HAL_ADC_IRQHandler+0x5e>
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d012      	beq.n	80024ce <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ac:	f003 0310 	and.w	r3, r3, #16
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d105      	bne.n	80024c0 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b8:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 fa5b 	bl	800297c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2202      	movs	r2, #2
 80024cc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d004      	beq.n	80024e2 <HAL_ADC_IRQHandler+0x72>
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	f003 0304 	and.w	r3, r3, #4
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10a      	bne.n	80024f8 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 8085 	beq.w	80025f8 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	f003 0308 	and.w	r3, r3, #8
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d07f      	beq.n	80025f8 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fc:	f003 0310 	and.w	r3, r3, #16
 8002500:	2b00      	cmp	r3, #0
 8002502:	d105      	bne.n	8002510 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002508:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fd58 	bl	8001fca <LL_ADC_REG_IsTriggerSourceSWStart>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d064      	beq.n	80025ea <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a5e      	ldr	r2, [pc, #376]	; (80026a0 <HAL_ADC_IRQHandler+0x230>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d002      	beq.n	8002530 <HAL_ADC_IRQHandler+0xc0>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	e001      	b.n	8002534 <HAL_ADC_IRQHandler+0xc4>
 8002530:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	4293      	cmp	r3, r2
 800253a:	d008      	beq.n	800254e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d005      	beq.n	800254e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2b05      	cmp	r3, #5
 8002546:	d002      	beq.n	800254e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	2b09      	cmp	r3, #9
 800254c:	d104      	bne.n	8002558 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	623b      	str	r3, [r7, #32]
 8002556:	e00d      	b.n	8002574 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a50      	ldr	r2, [pc, #320]	; (80026a0 <HAL_ADC_IRQHandler+0x230>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d002      	beq.n	8002568 <HAL_ADC_IRQHandler+0xf8>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	e001      	b.n	800256c <HAL_ADC_IRQHandler+0xfc>
 8002568:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800256c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002574:	6a3b      	ldr	r3, [r7, #32]
 8002576:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d135      	bne.n	80025ea <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0308 	and.w	r3, r3, #8
 8002588:	2b08      	cmp	r3, #8
 800258a:	d12e      	bne.n	80025ea <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff fdbd 	bl	8002110 <LL_ADC_REG_IsConversionOngoing>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d11a      	bne.n	80025d2 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 020c 	bic.w	r2, r2, #12
 80025aa:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d112      	bne.n	80025ea <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c8:	f043 0201 	orr.w	r2, r3, #1
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80025d0:	e00b      	b.n	80025ea <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d6:	f043 0210 	orr.w	r2, r3, #16
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025e2:	f043 0201 	orr.w	r2, r3, #1
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f95a 	bl	80028a4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	220c      	movs	r2, #12
 80025f6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f003 0320 	and.w	r3, r3, #32
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d004      	beq.n	800260c <HAL_ADC_IRQHandler+0x19c>
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10b      	bne.n	8002624 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 809e 	beq.w	8002754 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 8098 	beq.w	8002754 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002628:	f003 0310 	and.w	r3, r3, #16
 800262c:	2b00      	cmp	r3, #0
 800262e:	d105      	bne.n	800263c <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002634:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff fcd5 	bl	8001ff0 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002646:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fcbc 	bl	8001fca <LL_ADC_REG_IsTriggerSourceSWStart>
 8002652:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a11      	ldr	r2, [pc, #68]	; (80026a0 <HAL_ADC_IRQHandler+0x230>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d002      	beq.n	8002664 <HAL_ADC_IRQHandler+0x1f4>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	e001      	b.n	8002668 <HAL_ADC_IRQHandler+0x1f8>
 8002664:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6812      	ldr	r2, [r2, #0]
 800266c:	4293      	cmp	r3, r2
 800266e:	d008      	beq.n	8002682 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d005      	beq.n	8002682 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	2b06      	cmp	r3, #6
 800267a:	d002      	beq.n	8002682 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	2b07      	cmp	r3, #7
 8002680:	d104      	bne.n	800268c <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	623b      	str	r3, [r7, #32]
 800268a:	e011      	b.n	80026b0 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a03      	ldr	r2, [pc, #12]	; (80026a0 <HAL_ADC_IRQHandler+0x230>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d006      	beq.n	80026a4 <HAL_ADC_IRQHandler+0x234>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	e005      	b.n	80026a8 <HAL_ADC_IRQHandler+0x238>
 800269c:	50000300 	.word	0x50000300
 80026a0:	50000100 	.word	0x50000100
 80026a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026a8:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d047      	beq.n	8002746 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80026b6:	6a3b      	ldr	r3, [r7, #32]
 80026b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d007      	beq.n	80026d0 <HAL_ADC_IRQHandler+0x260>
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d03f      	beq.n	8002746 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d13a      	bne.n	8002746 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026da:	2b40      	cmp	r3, #64	; 0x40
 80026dc:	d133      	bne.n	8002746 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d12e      	bne.n	8002746 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff fd22 	bl	8002136 <LL_ADC_INJ_IsConversionOngoing>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d11a      	bne.n	800272e <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002706:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271c:	2b00      	cmp	r3, #0
 800271e:	d112      	bne.n	8002746 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002724:	f043 0201 	orr.w	r2, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	65da      	str	r2, [r3, #92]	; 0x5c
 800272c:	e00b      	b.n	8002746 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002732:	f043 0210 	orr.w	r2, r3, #16
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800273e:	f043 0201 	orr.w	r2, r3, #1
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f8f0 	bl	800292c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2260      	movs	r2, #96	; 0x60
 8002752:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275a:	2b00      	cmp	r3, #0
 800275c:	d011      	beq.n	8002782 <HAL_ADC_IRQHandler+0x312>
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00c      	beq.n	8002782 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 f89f 	bl	80028b8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2280      	movs	r2, #128	; 0x80
 8002780:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002788:	2b00      	cmp	r3, #0
 800278a:	d012      	beq.n	80027b2 <HAL_ADC_IRQHandler+0x342>
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00d      	beq.n	80027b2 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f8d6 	bl	8002954 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027b0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d012      	beq.n	80027e2 <HAL_ADC_IRQHandler+0x372>
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00d      	beq.n	80027e2 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f8c8 	bl	8002968 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027e0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	f003 0310 	and.w	r3, r3, #16
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d036      	beq.n	800285a <HAL_ADC_IRQHandler+0x3ea>
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	f003 0310 	and.w	r3, r3, #16
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d031      	beq.n	800285a <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d102      	bne.n	8002804 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80027fe:	2301      	movs	r3, #1
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
 8002802:	e014      	b.n	800282e <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d008      	beq.n	800281c <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800280a:	4825      	ldr	r0, [pc, #148]	; (80028a0 <HAL_ADC_IRQHandler+0x430>)
 800280c:	f7ff fc11 	bl	8002032 <LL_ADC_GetMultiDMATransfer>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00b      	beq.n	800282e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002816:	2301      	movs	r3, #1
 8002818:	627b      	str	r3, [r7, #36]	; 0x24
 800281a:	e008      	b.n	800282e <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800282a:	2301      	movs	r3, #1
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	2b01      	cmp	r3, #1
 8002832:	d10e      	bne.n	8002852 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002838:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002844:	f043 0202 	orr.w	r2, r3, #2
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 f83d 	bl	80028cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2210      	movs	r2, #16
 8002858:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002860:	2b00      	cmp	r3, #0
 8002862:	d018      	beq.n	8002896 <HAL_ADC_IRQHandler+0x426>
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800286a:	2b00      	cmp	r3, #0
 800286c:	d013      	beq.n	8002896 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002872:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800287e:	f043 0208 	orr.w	r2, r3, #8
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800288e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 f855 	bl	8002940 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002896:	bf00      	nop
 8002898:	3728      	adds	r7, #40	; 0x28
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	50000300 	.word	0x50000300

080028a4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <LL_ADC_IsEnabled>:
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <LL_ADC_IsEnabled+0x18>
 80028f4:	2301      	movs	r3, #1
 80028f6:	e000      	b.n	80028fa <LL_ADC_IsEnabled+0x1a>
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <LL_ADC_REG_IsConversionOngoing>:
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 0304 	and.w	r3, r3, #4
 8002916:	2b04      	cmp	r3, #4
 8002918:	d101      	bne.n	800291e <LL_ADC_REG_IsConversionOngoing+0x18>
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002990:	b590      	push	{r4, r7, lr}
 8002992:	b0a1      	sub	sp, #132	; 0x84
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d101      	bne.n	80029ae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80029aa:	2302      	movs	r3, #2
 80029ac:	e08b      	b.n	8002ac6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80029b6:	2300      	movs	r3, #0
 80029b8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80029ba:	2300      	movs	r3, #0
 80029bc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029c6:	d102      	bne.n	80029ce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80029c8:	4b41      	ldr	r3, [pc, #260]	; (8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	e001      	b.n	80029d2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80029ce:	2300      	movs	r3, #0
 80029d0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10b      	bne.n	80029f0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029dc:	f043 0220 	orr.w	r2, r3, #32
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e06a      	b.n	8002ac6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff ff87 	bl	8002906 <LL_ADC_REG_IsConversionOngoing>
 80029f8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff ff81 	bl	8002906 <LL_ADC_REG_IsConversionOngoing>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d14c      	bne.n	8002aa4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002a0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d149      	bne.n	8002aa4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a10:	4b30      	ldr	r3, [pc, #192]	; (8002ad4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002a12:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d028      	beq.n	8002a6e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002a1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	6859      	ldr	r1, [r3, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a2e:	035b      	lsls	r3, r3, #13
 8002a30:	430b      	orrs	r3, r1
 8002a32:	431a      	orrs	r2, r3
 8002a34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a36:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a38:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002a3c:	f7ff ff50 	bl	80028e0 <LL_ADC_IsEnabled>
 8002a40:	4604      	mov	r4, r0
 8002a42:	4823      	ldr	r0, [pc, #140]	; (8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002a44:	f7ff ff4c 	bl	80028e0 <LL_ADC_IsEnabled>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	4323      	orrs	r3, r4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d133      	bne.n	8002ab8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a58:	f023 030f 	bic.w	r3, r3, #15
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	6811      	ldr	r1, [r2, #0]
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	6892      	ldr	r2, [r2, #8]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	431a      	orrs	r2, r3
 8002a68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a6a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a6c:	e024      	b.n	8002ab8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a78:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a7a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002a7e:	f7ff ff2f 	bl	80028e0 <LL_ADC_IsEnabled>
 8002a82:	4604      	mov	r4, r0
 8002a84:	4812      	ldr	r0, [pc, #72]	; (8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002a86:	f7ff ff2b 	bl	80028e0 <LL_ADC_IsEnabled>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	4323      	orrs	r3, r4
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d112      	bne.n	8002ab8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a9a:	f023 030f 	bic.w	r3, r3, #15
 8002a9e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002aa0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002aa2:	e009      	b.n	8002ab8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa8:	f043 0220 	orr.w	r2, r3, #32
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002ab6:	e000      	b.n	8002aba <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ab8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ac2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3784      	adds	r7, #132	; 0x84
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd90      	pop	{r4, r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	50000100 	.word	0x50000100
 8002ad4:	50000300 	.word	0x50000300

08002ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ae8:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <__NVIC_SetPriorityGrouping+0x44>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002af4:	4013      	ands	r3, r2
 8002af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b0a:	4a04      	ldr	r2, [pc, #16]	; (8002b1c <__NVIC_SetPriorityGrouping+0x44>)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	60d3      	str	r3, [r2, #12]
}
 8002b10:	bf00      	nop
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b24:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <__NVIC_GetPriorityGrouping+0x18>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	0a1b      	lsrs	r3, r3, #8
 8002b2a:	f003 0307 	and.w	r3, r3, #7
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	db0b      	blt.n	8002b66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	f003 021f 	and.w	r2, r3, #31
 8002b54:	4907      	ldr	r1, [pc, #28]	; (8002b74 <__NVIC_EnableIRQ+0x38>)
 8002b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5a:	095b      	lsrs	r3, r3, #5
 8002b5c:	2001      	movs	r0, #1
 8002b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	e000e100 	.word	0xe000e100

08002b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	6039      	str	r1, [r7, #0]
 8002b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	db0a      	blt.n	8002ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	490c      	ldr	r1, [pc, #48]	; (8002bc4 <__NVIC_SetPriority+0x4c>)
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	0112      	lsls	r2, r2, #4
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ba0:	e00a      	b.n	8002bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	4908      	ldr	r1, [pc, #32]	; (8002bc8 <__NVIC_SetPriority+0x50>)
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	3b04      	subs	r3, #4
 8002bb0:	0112      	lsls	r2, r2, #4
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	761a      	strb	r2, [r3, #24]
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000e100 	.word	0xe000e100
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b089      	sub	sp, #36	; 0x24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f1c3 0307 	rsb	r3, r3, #7
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	bf28      	it	cs
 8002bea:	2304      	movcs	r3, #4
 8002bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	2b06      	cmp	r3, #6
 8002bf4:	d902      	bls.n	8002bfc <NVIC_EncodePriority+0x30>
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	3b03      	subs	r3, #3
 8002bfa:	e000      	b.n	8002bfe <NVIC_EncodePriority+0x32>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43da      	mvns	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	401a      	ands	r2, r3
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1e:	43d9      	mvns	r1, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c24:	4313      	orrs	r3, r2
         );
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3724      	adds	r7, #36	; 0x24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
	...

08002c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c44:	d301      	bcc.n	8002c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c46:	2301      	movs	r3, #1
 8002c48:	e00f      	b.n	8002c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c4a:	4a0a      	ldr	r2, [pc, #40]	; (8002c74 <SysTick_Config+0x40>)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c52:	210f      	movs	r1, #15
 8002c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c58:	f7ff ff8e 	bl	8002b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <SysTick_Config+0x40>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c62:	4b04      	ldr	r3, [pc, #16]	; (8002c74 <SysTick_Config+0x40>)
 8002c64:	2207      	movs	r2, #7
 8002c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	e000e010 	.word	0xe000e010

08002c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff ff29 	bl	8002ad8 <__NVIC_SetPriorityGrouping>
}
 8002c86:	bf00      	nop
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b086      	sub	sp, #24
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	4603      	mov	r3, r0
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	607a      	str	r2, [r7, #4]
 8002c9a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c9c:	f7ff ff40 	bl	8002b20 <__NVIC_GetPriorityGrouping>
 8002ca0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	68b9      	ldr	r1, [r7, #8]
 8002ca6:	6978      	ldr	r0, [r7, #20]
 8002ca8:	f7ff ff90 	bl	8002bcc <NVIC_EncodePriority>
 8002cac:	4602      	mov	r2, r0
 8002cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff ff5f 	bl	8002b78 <__NVIC_SetPriority>
}
 8002cba:	bf00      	nop
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	4603      	mov	r3, r0
 8002cca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff ff33 	bl	8002b3c <__NVIC_EnableIRQ>
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7ff ffa4 	bl	8002c34 <SysTick_Config>
 8002cec:	4603      	mov	r3, r0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
	...

08002cf8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e08d      	b.n	8002e26 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	4b47      	ldr	r3, [pc, #284]	; (8002e30 <HAL_DMA_Init+0x138>)
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d80f      	bhi.n	8002d36 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	4b45      	ldr	r3, [pc, #276]	; (8002e34 <HAL_DMA_Init+0x13c>)
 8002d1e:	4413      	add	r3, r2
 8002d20:	4a45      	ldr	r2, [pc, #276]	; (8002e38 <HAL_DMA_Init+0x140>)
 8002d22:	fba2 2303 	umull	r2, r3, r2, r3
 8002d26:	091b      	lsrs	r3, r3, #4
 8002d28:	009a      	lsls	r2, r3, #2
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a42      	ldr	r2, [pc, #264]	; (8002e3c <HAL_DMA_Init+0x144>)
 8002d32:	641a      	str	r2, [r3, #64]	; 0x40
 8002d34:	e00e      	b.n	8002d54 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	4b40      	ldr	r3, [pc, #256]	; (8002e40 <HAL_DMA_Init+0x148>)
 8002d3e:	4413      	add	r3, r2
 8002d40:	4a3d      	ldr	r2, [pc, #244]	; (8002e38 <HAL_DMA_Init+0x140>)
 8002d42:	fba2 2303 	umull	r2, r3, r2, r3
 8002d46:	091b      	lsrs	r3, r3, #4
 8002d48:	009a      	lsls	r2, r3, #2
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a3c      	ldr	r2, [pc, #240]	; (8002e44 <HAL_DMA_Init+0x14c>)
 8002d52:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2202      	movs	r2, #2
 8002d58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002d78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f964 	bl	8003074 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002db4:	d102      	bne.n	8002dbc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002dd0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d010      	beq.n	8002dfc <HAL_DMA_Init+0x104>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d80c      	bhi.n	8002dfc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f984 	bl	80030f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	e008      	b.n	8002e0e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40020407 	.word	0x40020407
 8002e34:	bffdfff8 	.word	0xbffdfff8
 8002e38:	cccccccd 	.word	0xcccccccd
 8002e3c:	40020000 	.word	0x40020000
 8002e40:	bffdfbf8 	.word	0xbffdfbf8
 8002e44:	40020400 	.word	0x40020400

08002e48 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e50:	2300      	movs	r3, #0
 8002e52:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d00d      	beq.n	8002e7c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2204      	movs	r2, #4
 8002e64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	73fb      	strb	r3, [r7, #15]
 8002e7a:	e047      	b.n	8002f0c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 020e 	bic.w	r2, r2, #14
 8002e8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0201 	bic.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eaa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb0:	f003 021f 	and.w	r2, r3, #31
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	2101      	movs	r1, #1
 8002eba:	fa01 f202 	lsl.w	r2, r1, r2
 8002ebe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ec8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00c      	beq.n	8002eec <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002edc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ee0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002eea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	4798      	blx	r3
    }
  }
  return status;
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b084      	sub	sp, #16
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f32:	f003 031f 	and.w	r3, r3, #31
 8002f36:	2204      	movs	r2, #4
 8002f38:	409a      	lsls	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d026      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x7a>
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d021      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0320 	and.w	r3, r3, #32
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d107      	bne.n	8002f6a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0204 	bic.w	r2, r2, #4
 8002f68:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6e:	f003 021f 	and.w	r2, r3, #31
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	2104      	movs	r1, #4
 8002f78:	fa01 f202 	lsl.w	r2, r1, r2
 8002f7c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d071      	beq.n	800306a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002f8e:	e06c      	b.n	800306a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f94:	f003 031f 	and.w	r3, r3, #31
 8002f98:	2202      	movs	r2, #2
 8002f9a:	409a      	lsls	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d02e      	beq.n	8003002 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d029      	beq.n	8003002 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0320 	and.w	r3, r3, #32
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10b      	bne.n	8002fd4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 020a 	bic.w	r2, r2, #10
 8002fca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd8:	f003 021f 	and.w	r2, r3, #31
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe0:	2102      	movs	r1, #2
 8002fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d038      	beq.n	800306a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003000:	e033      	b.n	800306a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003006:	f003 031f 	and.w	r3, r3, #31
 800300a:	2208      	movs	r2, #8
 800300c:	409a      	lsls	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	4013      	ands	r3, r2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d02a      	beq.n	800306c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	f003 0308 	and.w	r3, r3, #8
 800301c:	2b00      	cmp	r3, #0
 800301e:	d025      	beq.n	800306c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 020e 	bic.w	r2, r2, #14
 800302e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003034:	f003 021f 	and.w	r2, r3, #31
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	2101      	movs	r1, #1
 800303e:	fa01 f202 	lsl.w	r2, r1, r2
 8003042:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305e:	2b00      	cmp	r3, #0
 8003060:	d004      	beq.n	800306c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800306a:	bf00      	nop
 800306c:	bf00      	nop
}
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003074:	b480      	push	{r7}
 8003076:	b087      	sub	sp, #28
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	461a      	mov	r2, r3
 8003082:	4b16      	ldr	r3, [pc, #88]	; (80030dc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003084:	429a      	cmp	r2, r3
 8003086:	d802      	bhi.n	800308e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003088:	4b15      	ldr	r3, [pc, #84]	; (80030e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	e001      	b.n	8003092 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800308e:	4b15      	ldr	r3, [pc, #84]	; (80030e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003090:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	b2db      	uxtb	r3, r3
 800309c:	3b08      	subs	r3, #8
 800309e:	4a12      	ldr	r2, [pc, #72]	; (80030e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80030a0:	fba2 2303 	umull	r2, r3, r2, r3
 80030a4:	091b      	lsrs	r3, r3, #4
 80030a6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ac:	089b      	lsrs	r3, r3, #2
 80030ae:	009a      	lsls	r2, r3, #2
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	4413      	add	r3, r2
 80030b4:	461a      	mov	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a0b      	ldr	r2, [pc, #44]	; (80030ec <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80030be:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f003 031f 	and.w	r3, r3, #31
 80030c6:	2201      	movs	r2, #1
 80030c8:	409a      	lsls	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80030ce:	bf00      	nop
 80030d0:	371c      	adds	r7, #28
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	40020407 	.word	0x40020407
 80030e0:	40020800 	.word	0x40020800
 80030e4:	40020820 	.word	0x40020820
 80030e8:	cccccccd 	.word	0xcccccccd
 80030ec:	40020880 	.word	0x40020880

080030f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	461a      	mov	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a08      	ldr	r2, [pc, #32]	; (8003134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003112:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	3b01      	subs	r3, #1
 8003118:	f003 031f 	and.w	r3, r3, #31
 800311c:	2201      	movs	r2, #1
 800311e:	409a      	lsls	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003124:	bf00      	nop
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	1000823f 	.word	0x1000823f
 8003134:	40020940 	.word	0x40020940

08003138 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e147      	b.n	80033da <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d106      	bne.n	8003164 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7fe fb3a 	bl	80017d8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	699a      	ldr	r2, [r3, #24]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0210 	bic.w	r2, r2, #16
 8003172:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003174:	f7fe fee8 	bl	8001f48 <HAL_GetTick>
 8003178:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800317a:	e012      	b.n	80031a2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800317c:	f7fe fee4 	bl	8001f48 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b0a      	cmp	r3, #10
 8003188:	d90b      	bls.n	80031a2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800318e:	f043 0201 	orr.w	r2, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2203      	movs	r2, #3
 800319a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e11b      	b.n	80033da <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	f003 0308 	and.w	r3, r3, #8
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d0e5      	beq.n	800317c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699a      	ldr	r2, [r3, #24]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0201 	orr.w	r2, r2, #1
 80031be:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031c0:	f7fe fec2 	bl	8001f48 <HAL_GetTick>
 80031c4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80031c6:	e012      	b.n	80031ee <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80031c8:	f7fe febe 	bl	8001f48 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b0a      	cmp	r3, #10
 80031d4:	d90b      	bls.n	80031ee <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031da:	f043 0201 	orr.w	r2, r3, #1
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2203      	movs	r2, #3
 80031e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e0f5      	b.n	80033da <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0e5      	beq.n	80031c8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	699a      	ldr	r2, [r3, #24]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0202 	orr.w	r2, r2, #2
 800320a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a74      	ldr	r2, [pc, #464]	; (80033e4 <HAL_FDCAN_Init+0x2ac>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d103      	bne.n	800321e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003216:	4a74      	ldr	r2, [pc, #464]	; (80033e8 <HAL_FDCAN_Init+0x2b0>)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	7c1b      	ldrb	r3, [r3, #16]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d108      	bne.n	8003238 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	699a      	ldr	r2, [r3, #24]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003234:	619a      	str	r2, [r3, #24]
 8003236:	e007      	b.n	8003248 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	699a      	ldr	r2, [r3, #24]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003246:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	7c5b      	ldrb	r3, [r3, #17]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d108      	bne.n	8003262 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	699a      	ldr	r2, [r3, #24]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800325e:	619a      	str	r2, [r3, #24]
 8003260:	e007      	b.n	8003272 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	699a      	ldr	r2, [r3, #24]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003270:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	7c9b      	ldrb	r3, [r3, #18]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d108      	bne.n	800328c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	699a      	ldr	r2, [r3, #24]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003288:	619a      	str	r2, [r3, #24]
 800328a:	e007      	b.n	800329c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699a      	ldr	r2, [r3, #24]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800329a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	699a      	ldr	r2, [r3, #24]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80032c0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	691a      	ldr	r2, [r3, #16]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0210 	bic.w	r2, r2, #16
 80032d0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d108      	bne.n	80032ec <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	699a      	ldr	r2, [r3, #24]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f042 0204 	orr.w	r2, r2, #4
 80032e8:	619a      	str	r2, [r3, #24]
 80032ea:	e02c      	b.n	8003346 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d028      	beq.n	8003346 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d01c      	beq.n	8003336 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699a      	ldr	r2, [r3, #24]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800330a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	691a      	ldr	r2, [r3, #16]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0210 	orr.w	r2, r2, #16
 800331a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	2b03      	cmp	r3, #3
 8003322:	d110      	bne.n	8003346 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699a      	ldr	r2, [r3, #24]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0220 	orr.w	r2, r2, #32
 8003332:	619a      	str	r2, [r3, #24]
 8003334:	e007      	b.n	8003346 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	699a      	ldr	r2, [r3, #24]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f042 0220 	orr.w	r2, r2, #32
 8003344:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	3b01      	subs	r3, #1
 800334c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	3b01      	subs	r3, #1
 8003354:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003356:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800335e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	3b01      	subs	r3, #1
 8003368:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800336e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003370:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800337a:	d115      	bne.n	80033a8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003380:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003386:	3b01      	subs	r3, #1
 8003388:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800338a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003390:	3b01      	subs	r3, #1
 8003392:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003394:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	3b01      	subs	r3, #1
 800339e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80033a4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80033a6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f814 	bl	80033ec <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40006400 	.word	0x40006400
 80033e8:	40006500 	.word	0x40006500

080033ec <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80033f4:	4b27      	ldr	r3, [pc, #156]	; (8003494 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80033f6:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003406:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340e:	041a      	lsls	r2, r3, #16
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800342c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003434:	061a      	lsls	r2, r3, #24
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	e005      	b.n	800347a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	3304      	adds	r3, #4
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	429a      	cmp	r2, r3
 8003484:	d3f3      	bcc.n	800346e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8003486:	bf00      	nop
 8003488:	bf00      	nop
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	4000a400 	.word	0x4000a400

08003498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003498:	b480      	push	{r7}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80034a6:	e15a      	b.n	800375e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	2101      	movs	r1, #1
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	fa01 f303 	lsl.w	r3, r1, r3
 80034b4:	4013      	ands	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 814c 	beq.w	8003758 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 0303 	and.w	r3, r3, #3
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d005      	beq.n	80034d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d130      	bne.n	800353a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	2203      	movs	r2, #3
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	43db      	mvns	r3, r3
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	4013      	ands	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	68da      	ldr	r2, [r3, #12]
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4313      	orrs	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800350e:	2201      	movs	r2, #1
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	43db      	mvns	r3, r3
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4013      	ands	r3, r2
 800351c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	091b      	lsrs	r3, r3, #4
 8003524:	f003 0201 	and.w	r2, r3, #1
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	4313      	orrs	r3, r2
 8003532:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f003 0303 	and.w	r3, r3, #3
 8003542:	2b03      	cmp	r3, #3
 8003544:	d017      	beq.n	8003576 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	2203      	movs	r2, #3
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	43db      	mvns	r3, r3
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	4013      	ands	r3, r2
 800355c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d123      	bne.n	80035ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	08da      	lsrs	r2, r3, #3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	3208      	adds	r2, #8
 800358a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800358e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	220f      	movs	r2, #15
 800359a:	fa02 f303 	lsl.w	r3, r2, r3
 800359e:	43db      	mvns	r3, r3
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	4013      	ands	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	691a      	ldr	r2, [r3, #16]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	08da      	lsrs	r2, r3, #3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3208      	adds	r2, #8
 80035c4:	6939      	ldr	r1, [r7, #16]
 80035c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	2203      	movs	r2, #3
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	43db      	mvns	r3, r3
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	4013      	ands	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f003 0203 	and.w	r2, r3, #3
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 80a6 	beq.w	8003758 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800360c:	4b5b      	ldr	r3, [pc, #364]	; (800377c <HAL_GPIO_Init+0x2e4>)
 800360e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003610:	4a5a      	ldr	r2, [pc, #360]	; (800377c <HAL_GPIO_Init+0x2e4>)
 8003612:	f043 0301 	orr.w	r3, r3, #1
 8003616:	6613      	str	r3, [r2, #96]	; 0x60
 8003618:	4b58      	ldr	r3, [pc, #352]	; (800377c <HAL_GPIO_Init+0x2e4>)
 800361a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003624:	4a56      	ldr	r2, [pc, #344]	; (8003780 <HAL_GPIO_Init+0x2e8>)
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	089b      	lsrs	r3, r3, #2
 800362a:	3302      	adds	r3, #2
 800362c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003630:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f003 0303 	and.w	r3, r3, #3
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	220f      	movs	r2, #15
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	43db      	mvns	r3, r3
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4013      	ands	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800364e:	d01f      	beq.n	8003690 <HAL_GPIO_Init+0x1f8>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a4c      	ldr	r2, [pc, #304]	; (8003784 <HAL_GPIO_Init+0x2ec>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d019      	beq.n	800368c <HAL_GPIO_Init+0x1f4>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a4b      	ldr	r2, [pc, #300]	; (8003788 <HAL_GPIO_Init+0x2f0>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d013      	beq.n	8003688 <HAL_GPIO_Init+0x1f0>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a4a      	ldr	r2, [pc, #296]	; (800378c <HAL_GPIO_Init+0x2f4>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d00d      	beq.n	8003684 <HAL_GPIO_Init+0x1ec>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a49      	ldr	r2, [pc, #292]	; (8003790 <HAL_GPIO_Init+0x2f8>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d007      	beq.n	8003680 <HAL_GPIO_Init+0x1e8>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a48      	ldr	r2, [pc, #288]	; (8003794 <HAL_GPIO_Init+0x2fc>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d101      	bne.n	800367c <HAL_GPIO_Init+0x1e4>
 8003678:	2305      	movs	r3, #5
 800367a:	e00a      	b.n	8003692 <HAL_GPIO_Init+0x1fa>
 800367c:	2306      	movs	r3, #6
 800367e:	e008      	b.n	8003692 <HAL_GPIO_Init+0x1fa>
 8003680:	2304      	movs	r3, #4
 8003682:	e006      	b.n	8003692 <HAL_GPIO_Init+0x1fa>
 8003684:	2303      	movs	r3, #3
 8003686:	e004      	b.n	8003692 <HAL_GPIO_Init+0x1fa>
 8003688:	2302      	movs	r3, #2
 800368a:	e002      	b.n	8003692 <HAL_GPIO_Init+0x1fa>
 800368c:	2301      	movs	r3, #1
 800368e:	e000      	b.n	8003692 <HAL_GPIO_Init+0x1fa>
 8003690:	2300      	movs	r3, #0
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	f002 0203 	and.w	r2, r2, #3
 8003698:	0092      	lsls	r2, r2, #2
 800369a:	4093      	lsls	r3, r2
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	4313      	orrs	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036a2:	4937      	ldr	r1, [pc, #220]	; (8003780 <HAL_GPIO_Init+0x2e8>)
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	089b      	lsrs	r3, r3, #2
 80036a8:	3302      	adds	r3, #2
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036b0:	4b39      	ldr	r3, [pc, #228]	; (8003798 <HAL_GPIO_Init+0x300>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	43db      	mvns	r3, r3
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4013      	ands	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036d4:	4a30      	ldr	r2, [pc, #192]	; (8003798 <HAL_GPIO_Init+0x300>)
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80036da:	4b2f      	ldr	r3, [pc, #188]	; (8003798 <HAL_GPIO_Init+0x300>)
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	43db      	mvns	r3, r3
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	4013      	ands	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036fe:	4a26      	ldr	r2, [pc, #152]	; (8003798 <HAL_GPIO_Init+0x300>)
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003704:	4b24      	ldr	r3, [pc, #144]	; (8003798 <HAL_GPIO_Init+0x300>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	43db      	mvns	r3, r3
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4013      	ands	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4313      	orrs	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003728:	4a1b      	ldr	r2, [pc, #108]	; (8003798 <HAL_GPIO_Init+0x300>)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800372e:	4b1a      	ldr	r3, [pc, #104]	; (8003798 <HAL_GPIO_Init+0x300>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	43db      	mvns	r3, r3
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	4013      	ands	r3, r2
 800373c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003752:	4a11      	ldr	r2, [pc, #68]	; (8003798 <HAL_GPIO_Init+0x300>)
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	3301      	adds	r3, #1
 800375c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	fa22 f303 	lsr.w	r3, r2, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	f47f ae9d 	bne.w	80034a8 <HAL_GPIO_Init+0x10>
  }
}
 800376e:	bf00      	nop
 8003770:	bf00      	nop
 8003772:	371c      	adds	r7, #28
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	40021000 	.word	0x40021000
 8003780:	40010000 	.word	0x40010000
 8003784:	48000400 	.word	0x48000400
 8003788:	48000800 	.word	0x48000800
 800378c:	48000c00 	.word	0x48000c00
 8003790:	48001000 	.word	0x48001000
 8003794:	48001400 	.word	0x48001400
 8003798:	40010400 	.word	0x40010400

0800379c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	807b      	strh	r3, [r7, #2]
 80037a8:	4613      	mov	r3, r2
 80037aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037ac:	787b      	ldrb	r3, [r7, #1]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037b2:	887a      	ldrh	r2, [r7, #2]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037b8:	e002      	b.n	80037c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037ba:	887a      	ldrh	r2, [r7, #2]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	460b      	mov	r3, r1
 80037d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037de:	887a      	ldrh	r2, [r7, #2]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4013      	ands	r3, r2
 80037e4:	041a      	lsls	r2, r3, #16
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	43d9      	mvns	r1, r3
 80037ea:	887b      	ldrh	r3, [r7, #2]
 80037ec:	400b      	ands	r3, r1
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	619a      	str	r2, [r3, #24]
}
 80037f4:	bf00      	nop
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d141      	bne.n	8003892 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800380e:	4b4b      	ldr	r3, [pc, #300]	; (800393c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800381a:	d131      	bne.n	8003880 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800381c:	4b47      	ldr	r3, [pc, #284]	; (800393c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800381e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003822:	4a46      	ldr	r2, [pc, #280]	; (800393c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003824:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003828:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800382c:	4b43      	ldr	r3, [pc, #268]	; (800393c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003834:	4a41      	ldr	r2, [pc, #260]	; (800393c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003836:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800383a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800383c:	4b40      	ldr	r3, [pc, #256]	; (8003940 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2232      	movs	r2, #50	; 0x32
 8003842:	fb02 f303 	mul.w	r3, r2, r3
 8003846:	4a3f      	ldr	r2, [pc, #252]	; (8003944 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003848:	fba2 2303 	umull	r2, r3, r2, r3
 800384c:	0c9b      	lsrs	r3, r3, #18
 800384e:	3301      	adds	r3, #1
 8003850:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003852:	e002      	b.n	800385a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	3b01      	subs	r3, #1
 8003858:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800385a:	4b38      	ldr	r3, [pc, #224]	; (800393c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003866:	d102      	bne.n	800386e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1f2      	bne.n	8003854 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800386e:	4b33      	ldr	r3, [pc, #204]	; (800393c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800387a:	d158      	bne.n	800392e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e057      	b.n	8003930 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003880:	4b2e      	ldr	r3, [pc, #184]	; (800393c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003882:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003886:	4a2d      	ldr	r2, [pc, #180]	; (800393c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003888:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800388c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003890:	e04d      	b.n	800392e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003898:	d141      	bne.n	800391e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800389a:	4b28      	ldr	r3, [pc, #160]	; (800393c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a6:	d131      	bne.n	800390c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038a8:	4b24      	ldr	r3, [pc, #144]	; (800393c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038ae:	4a23      	ldr	r2, [pc, #140]	; (800393c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038b8:	4b20      	ldr	r3, [pc, #128]	; (800393c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038c0:	4a1e      	ldr	r2, [pc, #120]	; (800393c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038c8:	4b1d      	ldr	r3, [pc, #116]	; (8003940 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2232      	movs	r2, #50	; 0x32
 80038ce:	fb02 f303 	mul.w	r3, r2, r3
 80038d2:	4a1c      	ldr	r2, [pc, #112]	; (8003944 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80038d4:	fba2 2303 	umull	r2, r3, r2, r3
 80038d8:	0c9b      	lsrs	r3, r3, #18
 80038da:	3301      	adds	r3, #1
 80038dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038de:	e002      	b.n	80038e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038e6:	4b15      	ldr	r3, [pc, #84]	; (800393c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038f2:	d102      	bne.n	80038fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f2      	bne.n	80038e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038fa:	4b10      	ldr	r3, [pc, #64]	; (800393c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003906:	d112      	bne.n	800392e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e011      	b.n	8003930 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800390c:	4b0b      	ldr	r3, [pc, #44]	; (800393c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800390e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003912:	4a0a      	ldr	r2, [pc, #40]	; (800393c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003918:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800391c:	e007      	b.n	800392e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800391e:	4b07      	ldr	r3, [pc, #28]	; (800393c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003926:	4a05      	ldr	r2, [pc, #20]	; (800393c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003928:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800392c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3714      	adds	r7, #20
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	40007000 	.word	0x40007000
 8003940:	20000000 	.word	0x20000000
 8003944:	431bde83 	.word	0x431bde83

08003948 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800394c:	4b05      	ldr	r3, [pc, #20]	; (8003964 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	4a04      	ldr	r2, [pc, #16]	; (8003964 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003952:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003956:	6093      	str	r3, [r2, #8]
}
 8003958:	bf00      	nop
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	40007000 	.word	0x40007000

08003968 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b088      	sub	sp, #32
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e306      	b.n	8003f88 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d075      	beq.n	8003a72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003986:	4b97      	ldr	r3, [pc, #604]	; (8003be4 <HAL_RCC_OscConfig+0x27c>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 030c 	and.w	r3, r3, #12
 800398e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003990:	4b94      	ldr	r3, [pc, #592]	; (8003be4 <HAL_RCC_OscConfig+0x27c>)
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	f003 0303 	and.w	r3, r3, #3
 8003998:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	2b0c      	cmp	r3, #12
 800399e:	d102      	bne.n	80039a6 <HAL_RCC_OscConfig+0x3e>
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	2b03      	cmp	r3, #3
 80039a4:	d002      	beq.n	80039ac <HAL_RCC_OscConfig+0x44>
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	2b08      	cmp	r3, #8
 80039aa:	d10b      	bne.n	80039c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ac:	4b8d      	ldr	r3, [pc, #564]	; (8003be4 <HAL_RCC_OscConfig+0x27c>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d05b      	beq.n	8003a70 <HAL_RCC_OscConfig+0x108>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d157      	bne.n	8003a70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e2e1      	b.n	8003f88 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039cc:	d106      	bne.n	80039dc <HAL_RCC_OscConfig+0x74>
 80039ce:	4b85      	ldr	r3, [pc, #532]	; (8003be4 <HAL_RCC_OscConfig+0x27c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a84      	ldr	r2, [pc, #528]	; (8003be4 <HAL_RCC_OscConfig+0x27c>)
 80039d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	e01d      	b.n	8003a18 <HAL_RCC_OscConfig+0xb0>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039e4:	d10c      	bne.n	8003a00 <HAL_RCC_OscConfig+0x98>
 80039e6:	4b7f      	ldr	r3, [pc, #508]	; (8003be4 <HAL_RCC_OscConfig+0x27c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a7e      	ldr	r2, [pc, #504]	; (8003be4 <HAL_RCC_OscConfig+0x27c>)
 80039ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	4b7c      	ldr	r3, [pc, #496]	; (8003be4 <HAL_RCC_OscConfig+0x27c>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a7b      	ldr	r2, [pc, #492]	; (8003be4 <HAL_RCC_OscConfig+0x27c>)
 80039f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	e00b      	b.n	8003a18 <HAL_RCC_OscConfig+0xb0>
 8003a00:	4b78      	ldr	r3, [pc, #480]	; (8003be4 <HAL_RCC_OscConfig+0x27c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a77      	ldr	r2, [pc, #476]	; (8003be4 <HAL_RCC_OscConfig+0x27c>)
 8003a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	4b75      	ldr	r3, [pc, #468]	; (8003be4 <HAL_RCC_OscConfig+0x27c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a74      	ldr	r2, [pc, #464]	; (8003be4 <HAL_RCC_OscConfig+0x27c>)
 8003a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d013      	beq.n	8003a48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a20:	f7fe fa92 	bl	8001f48 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a28:	f7fe fa8e 	bl	8001f48 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b64      	cmp	r3, #100	; 0x64
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e2a6      	b.n	8003f88 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a3a:	4b6a      	ldr	r3, [pc, #424]	; (8003be4 <HAL_RCC_OscConfig+0x27c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0f0      	beq.n	8003a28 <HAL_RCC_OscConfig+0xc0>
 8003a46:	e014      	b.n	8003a72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a48:	f7fe fa7e 	bl	8001f48 <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a50:	f7fe fa7a 	bl	8001f48 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b64      	cmp	r3, #100	; 0x64
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e292      	b.n	8003f88 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a62:	4b60      	ldr	r3, [pc, #384]	; (8003be4 <HAL_RCC_OscConfig+0x27c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1f0      	bne.n	8003a50 <HAL_RCC_OscConfig+0xe8>
 8003a6e:	e000      	b.n	8003a72 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d075      	beq.n	8003b6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a7e:	4b59      	ldr	r3, [pc, #356]	; (8003be4 <HAL_RCC_OscConfig+0x27c>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 030c 	and.w	r3, r3, #12
 8003a86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a88:	4b56      	ldr	r3, [pc, #344]	; (8003be4 <HAL_RCC_OscConfig+0x27c>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f003 0303 	and.w	r3, r3, #3
 8003a90:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	2b0c      	cmp	r3, #12
 8003a96:	d102      	bne.n	8003a9e <HAL_RCC_OscConfig+0x136>
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d002      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x13c>
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	2b04      	cmp	r3, #4
 8003aa2:	d11f      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aa4:	4b4f      	ldr	r3, [pc, #316]	; (8003be4 <HAL_RCC_OscConfig+0x27c>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d005      	beq.n	8003abc <HAL_RCC_OscConfig+0x154>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e265      	b.n	8003f88 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003abc:	4b49      	ldr	r3, [pc, #292]	; (8003be4 <HAL_RCC_OscConfig+0x27c>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	061b      	lsls	r3, r3, #24
 8003aca:	4946      	ldr	r1, [pc, #280]	; (8003be4 <HAL_RCC_OscConfig+0x27c>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ad0:	4b45      	ldr	r3, [pc, #276]	; (8003be8 <HAL_RCC_OscConfig+0x280>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fe f9eb 	bl	8001eb0 <HAL_InitTick>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d043      	beq.n	8003b68 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e251      	b.n	8003f88 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d023      	beq.n	8003b34 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aec:	4b3d      	ldr	r3, [pc, #244]	; (8003be4 <HAL_RCC_OscConfig+0x27c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a3c      	ldr	r2, [pc, #240]	; (8003be4 <HAL_RCC_OscConfig+0x27c>)
 8003af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af8:	f7fe fa26 	bl	8001f48 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b00:	f7fe fa22 	bl	8001f48 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e23a      	b.n	8003f88 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b12:	4b34      	ldr	r3, [pc, #208]	; (8003be4 <HAL_RCC_OscConfig+0x27c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0f0      	beq.n	8003b00 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b1e:	4b31      	ldr	r3, [pc, #196]	; (8003be4 <HAL_RCC_OscConfig+0x27c>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	061b      	lsls	r3, r3, #24
 8003b2c:	492d      	ldr	r1, [pc, #180]	; (8003be4 <HAL_RCC_OscConfig+0x27c>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	604b      	str	r3, [r1, #4]
 8003b32:	e01a      	b.n	8003b6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b34:	4b2b      	ldr	r3, [pc, #172]	; (8003be4 <HAL_RCC_OscConfig+0x27c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a2a      	ldr	r2, [pc, #168]	; (8003be4 <HAL_RCC_OscConfig+0x27c>)
 8003b3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b40:	f7fe fa02 	bl	8001f48 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b48:	f7fe f9fe 	bl	8001f48 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e216      	b.n	8003f88 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b5a:	4b22      	ldr	r3, [pc, #136]	; (8003be4 <HAL_RCC_OscConfig+0x27c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1f0      	bne.n	8003b48 <HAL_RCC_OscConfig+0x1e0>
 8003b66:	e000      	b.n	8003b6a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d041      	beq.n	8003bfa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d01c      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b7e:	4b19      	ldr	r3, [pc, #100]	; (8003be4 <HAL_RCC_OscConfig+0x27c>)
 8003b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b84:	4a17      	ldr	r2, [pc, #92]	; (8003be4 <HAL_RCC_OscConfig+0x27c>)
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b8e:	f7fe f9db 	bl	8001f48 <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b94:	e008      	b.n	8003ba8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b96:	f7fe f9d7 	bl	8001f48 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e1ef      	b.n	8003f88 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ba8:	4b0e      	ldr	r3, [pc, #56]	; (8003be4 <HAL_RCC_OscConfig+0x27c>)
 8003baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0ef      	beq.n	8003b96 <HAL_RCC_OscConfig+0x22e>
 8003bb6:	e020      	b.n	8003bfa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bb8:	4b0a      	ldr	r3, [pc, #40]	; (8003be4 <HAL_RCC_OscConfig+0x27c>)
 8003bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bbe:	4a09      	ldr	r2, [pc, #36]	; (8003be4 <HAL_RCC_OscConfig+0x27c>)
 8003bc0:	f023 0301 	bic.w	r3, r3, #1
 8003bc4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc8:	f7fe f9be 	bl	8001f48 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bce:	e00d      	b.n	8003bec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bd0:	f7fe f9ba 	bl	8001f48 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d906      	bls.n	8003bec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e1d2      	b.n	8003f88 <HAL_RCC_OscConfig+0x620>
 8003be2:	bf00      	nop
 8003be4:	40021000 	.word	0x40021000
 8003be8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bec:	4b8c      	ldr	r3, [pc, #560]	; (8003e20 <HAL_RCC_OscConfig+0x4b8>)
 8003bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1ea      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 80a6 	beq.w	8003d54 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c0c:	4b84      	ldr	r3, [pc, #528]	; (8003e20 <HAL_RCC_OscConfig+0x4b8>)
 8003c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_RCC_OscConfig+0x2b4>
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e000      	b.n	8003c1e <HAL_RCC_OscConfig+0x2b6>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00d      	beq.n	8003c3e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c22:	4b7f      	ldr	r3, [pc, #508]	; (8003e20 <HAL_RCC_OscConfig+0x4b8>)
 8003c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c26:	4a7e      	ldr	r2, [pc, #504]	; (8003e20 <HAL_RCC_OscConfig+0x4b8>)
 8003c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c2c:	6593      	str	r3, [r2, #88]	; 0x58
 8003c2e:	4b7c      	ldr	r3, [pc, #496]	; (8003e20 <HAL_RCC_OscConfig+0x4b8>)
 8003c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c3e:	4b79      	ldr	r3, [pc, #484]	; (8003e24 <HAL_RCC_OscConfig+0x4bc>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d118      	bne.n	8003c7c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c4a:	4b76      	ldr	r3, [pc, #472]	; (8003e24 <HAL_RCC_OscConfig+0x4bc>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a75      	ldr	r2, [pc, #468]	; (8003e24 <HAL_RCC_OscConfig+0x4bc>)
 8003c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c56:	f7fe f977 	bl	8001f48 <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c5e:	f7fe f973 	bl	8001f48 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e18b      	b.n	8003f88 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c70:	4b6c      	ldr	r3, [pc, #432]	; (8003e24 <HAL_RCC_OscConfig+0x4bc>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0f0      	beq.n	8003c5e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d108      	bne.n	8003c96 <HAL_RCC_OscConfig+0x32e>
 8003c84:	4b66      	ldr	r3, [pc, #408]	; (8003e20 <HAL_RCC_OscConfig+0x4b8>)
 8003c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8a:	4a65      	ldr	r2, [pc, #404]	; (8003e20 <HAL_RCC_OscConfig+0x4b8>)
 8003c8c:	f043 0301 	orr.w	r3, r3, #1
 8003c90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c94:	e024      	b.n	8003ce0 <HAL_RCC_OscConfig+0x378>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	2b05      	cmp	r3, #5
 8003c9c:	d110      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x358>
 8003c9e:	4b60      	ldr	r3, [pc, #384]	; (8003e20 <HAL_RCC_OscConfig+0x4b8>)
 8003ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca4:	4a5e      	ldr	r2, [pc, #376]	; (8003e20 <HAL_RCC_OscConfig+0x4b8>)
 8003ca6:	f043 0304 	orr.w	r3, r3, #4
 8003caa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cae:	4b5c      	ldr	r3, [pc, #368]	; (8003e20 <HAL_RCC_OscConfig+0x4b8>)
 8003cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb4:	4a5a      	ldr	r2, [pc, #360]	; (8003e20 <HAL_RCC_OscConfig+0x4b8>)
 8003cb6:	f043 0301 	orr.w	r3, r3, #1
 8003cba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cbe:	e00f      	b.n	8003ce0 <HAL_RCC_OscConfig+0x378>
 8003cc0:	4b57      	ldr	r3, [pc, #348]	; (8003e20 <HAL_RCC_OscConfig+0x4b8>)
 8003cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc6:	4a56      	ldr	r2, [pc, #344]	; (8003e20 <HAL_RCC_OscConfig+0x4b8>)
 8003cc8:	f023 0301 	bic.w	r3, r3, #1
 8003ccc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cd0:	4b53      	ldr	r3, [pc, #332]	; (8003e20 <HAL_RCC_OscConfig+0x4b8>)
 8003cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd6:	4a52      	ldr	r2, [pc, #328]	; (8003e20 <HAL_RCC_OscConfig+0x4b8>)
 8003cd8:	f023 0304 	bic.w	r3, r3, #4
 8003cdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d016      	beq.n	8003d16 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce8:	f7fe f92e 	bl	8001f48 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cee:	e00a      	b.n	8003d06 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf0:	f7fe f92a 	bl	8001f48 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e140      	b.n	8003f88 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d06:	4b46      	ldr	r3, [pc, #280]	; (8003e20 <HAL_RCC_OscConfig+0x4b8>)
 8003d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0ed      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x388>
 8003d14:	e015      	b.n	8003d42 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d16:	f7fe f917 	bl	8001f48 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d1c:	e00a      	b.n	8003d34 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d1e:	f7fe f913 	bl	8001f48 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e129      	b.n	8003f88 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d34:	4b3a      	ldr	r3, [pc, #232]	; (8003e20 <HAL_RCC_OscConfig+0x4b8>)
 8003d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1ed      	bne.n	8003d1e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d42:	7ffb      	ldrb	r3, [r7, #31]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d105      	bne.n	8003d54 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d48:	4b35      	ldr	r3, [pc, #212]	; (8003e20 <HAL_RCC_OscConfig+0x4b8>)
 8003d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4c:	4a34      	ldr	r2, [pc, #208]	; (8003e20 <HAL_RCC_OscConfig+0x4b8>)
 8003d4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d52:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0320 	and.w	r3, r3, #32
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d03c      	beq.n	8003dda <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d01c      	beq.n	8003da2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d68:	4b2d      	ldr	r3, [pc, #180]	; (8003e20 <HAL_RCC_OscConfig+0x4b8>)
 8003d6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d6e:	4a2c      	ldr	r2, [pc, #176]	; (8003e20 <HAL_RCC_OscConfig+0x4b8>)
 8003d70:	f043 0301 	orr.w	r3, r3, #1
 8003d74:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d78:	f7fe f8e6 	bl	8001f48 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d80:	f7fe f8e2 	bl	8001f48 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e0fa      	b.n	8003f88 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d92:	4b23      	ldr	r3, [pc, #140]	; (8003e20 <HAL_RCC_OscConfig+0x4b8>)
 8003d94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0ef      	beq.n	8003d80 <HAL_RCC_OscConfig+0x418>
 8003da0:	e01b      	b.n	8003dda <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003da2:	4b1f      	ldr	r3, [pc, #124]	; (8003e20 <HAL_RCC_OscConfig+0x4b8>)
 8003da4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003da8:	4a1d      	ldr	r2, [pc, #116]	; (8003e20 <HAL_RCC_OscConfig+0x4b8>)
 8003daa:	f023 0301 	bic.w	r3, r3, #1
 8003dae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db2:	f7fe f8c9 	bl	8001f48 <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dba:	f7fe f8c5 	bl	8001f48 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e0dd      	b.n	8003f88 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003dcc:	4b14      	ldr	r3, [pc, #80]	; (8003e20 <HAL_RCC_OscConfig+0x4b8>)
 8003dce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1ef      	bne.n	8003dba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 80d1 	beq.w	8003f86 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003de4:	4b0e      	ldr	r3, [pc, #56]	; (8003e20 <HAL_RCC_OscConfig+0x4b8>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f003 030c 	and.w	r3, r3, #12
 8003dec:	2b0c      	cmp	r3, #12
 8003dee:	f000 808b 	beq.w	8003f08 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d15e      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dfa:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <HAL_RCC_OscConfig+0x4b8>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a08      	ldr	r2, [pc, #32]	; (8003e20 <HAL_RCC_OscConfig+0x4b8>)
 8003e00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e06:	f7fe f89f 	bl	8001f48 <HAL_GetTick>
 8003e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e0c:	e00c      	b.n	8003e28 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e0e:	f7fe f89b 	bl	8001f48 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d905      	bls.n	8003e28 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e0b3      	b.n	8003f88 <HAL_RCC_OscConfig+0x620>
 8003e20:	40021000 	.word	0x40021000
 8003e24:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e28:	4b59      	ldr	r3, [pc, #356]	; (8003f90 <HAL_RCC_OscConfig+0x628>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1ec      	bne.n	8003e0e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e34:	4b56      	ldr	r3, [pc, #344]	; (8003f90 <HAL_RCC_OscConfig+0x628>)
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	4b56      	ldr	r3, [pc, #344]	; (8003f94 <HAL_RCC_OscConfig+0x62c>)
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	6a11      	ldr	r1, [r2, #32]
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e44:	3a01      	subs	r2, #1
 8003e46:	0112      	lsls	r2, r2, #4
 8003e48:	4311      	orrs	r1, r2
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003e4e:	0212      	lsls	r2, r2, #8
 8003e50:	4311      	orrs	r1, r2
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e56:	0852      	lsrs	r2, r2, #1
 8003e58:	3a01      	subs	r2, #1
 8003e5a:	0552      	lsls	r2, r2, #21
 8003e5c:	4311      	orrs	r1, r2
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e62:	0852      	lsrs	r2, r2, #1
 8003e64:	3a01      	subs	r2, #1
 8003e66:	0652      	lsls	r2, r2, #25
 8003e68:	4311      	orrs	r1, r2
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003e6e:	06d2      	lsls	r2, r2, #27
 8003e70:	430a      	orrs	r2, r1
 8003e72:	4947      	ldr	r1, [pc, #284]	; (8003f90 <HAL_RCC_OscConfig+0x628>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e78:	4b45      	ldr	r3, [pc, #276]	; (8003f90 <HAL_RCC_OscConfig+0x628>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a44      	ldr	r2, [pc, #272]	; (8003f90 <HAL_RCC_OscConfig+0x628>)
 8003e7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e82:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e84:	4b42      	ldr	r3, [pc, #264]	; (8003f90 <HAL_RCC_OscConfig+0x628>)
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	4a41      	ldr	r2, [pc, #260]	; (8003f90 <HAL_RCC_OscConfig+0x628>)
 8003e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e8e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e90:	f7fe f85a 	bl	8001f48 <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e98:	f7fe f856 	bl	8001f48 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e06e      	b.n	8003f88 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eaa:	4b39      	ldr	r3, [pc, #228]	; (8003f90 <HAL_RCC_OscConfig+0x628>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0f0      	beq.n	8003e98 <HAL_RCC_OscConfig+0x530>
 8003eb6:	e066      	b.n	8003f86 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eb8:	4b35      	ldr	r3, [pc, #212]	; (8003f90 <HAL_RCC_OscConfig+0x628>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a34      	ldr	r2, [pc, #208]	; (8003f90 <HAL_RCC_OscConfig+0x628>)
 8003ebe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ec2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003ec4:	4b32      	ldr	r3, [pc, #200]	; (8003f90 <HAL_RCC_OscConfig+0x628>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	4a31      	ldr	r2, [pc, #196]	; (8003f90 <HAL_RCC_OscConfig+0x628>)
 8003eca:	f023 0303 	bic.w	r3, r3, #3
 8003ece:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003ed0:	4b2f      	ldr	r3, [pc, #188]	; (8003f90 <HAL_RCC_OscConfig+0x628>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	4a2e      	ldr	r2, [pc, #184]	; (8003f90 <HAL_RCC_OscConfig+0x628>)
 8003ed6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ede:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee0:	f7fe f832 	bl	8001f48 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee8:	f7fe f82e 	bl	8001f48 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e046      	b.n	8003f88 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003efa:	4b25      	ldr	r3, [pc, #148]	; (8003f90 <HAL_RCC_OscConfig+0x628>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f0      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x580>
 8003f06:	e03e      	b.n	8003f86 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e039      	b.n	8003f88 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003f14:	4b1e      	ldr	r3, [pc, #120]	; (8003f90 <HAL_RCC_OscConfig+0x628>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f003 0203 	and.w	r2, r3, #3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d12c      	bne.n	8003f82 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	3b01      	subs	r3, #1
 8003f34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d123      	bne.n	8003f82 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f44:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d11b      	bne.n	8003f82 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f54:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d113      	bne.n	8003f82 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f64:	085b      	lsrs	r3, r3, #1
 8003f66:	3b01      	subs	r3, #1
 8003f68:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d109      	bne.n	8003f82 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f78:	085b      	lsrs	r3, r3, #1
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d001      	beq.n	8003f86 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e000      	b.n	8003f88 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3720      	adds	r7, #32
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40021000 	.word	0x40021000
 8003f94:	019f800c 	.word	0x019f800c

08003f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e11e      	b.n	80041ee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fb0:	4b91      	ldr	r3, [pc, #580]	; (80041f8 <HAL_RCC_ClockConfig+0x260>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 030f 	and.w	r3, r3, #15
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d910      	bls.n	8003fe0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fbe:	4b8e      	ldr	r3, [pc, #568]	; (80041f8 <HAL_RCC_ClockConfig+0x260>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f023 020f 	bic.w	r2, r3, #15
 8003fc6:	498c      	ldr	r1, [pc, #560]	; (80041f8 <HAL_RCC_ClockConfig+0x260>)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fce:	4b8a      	ldr	r3, [pc, #552]	; (80041f8 <HAL_RCC_ClockConfig+0x260>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d001      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e106      	b.n	80041ee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d073      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	2b03      	cmp	r3, #3
 8003ff2:	d129      	bne.n	8004048 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ff4:	4b81      	ldr	r3, [pc, #516]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e0f4      	b.n	80041ee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004004:	f000 f99c 	bl	8004340 <RCC_GetSysClockFreqFromPLLSource>
 8004008:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	4a7c      	ldr	r2, [pc, #496]	; (8004200 <HAL_RCC_ClockConfig+0x268>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d93f      	bls.n	8004092 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004012:	4b7a      	ldr	r3, [pc, #488]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d009      	beq.n	8004032 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004026:	2b00      	cmp	r3, #0
 8004028:	d033      	beq.n	8004092 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800402e:	2b00      	cmp	r3, #0
 8004030:	d12f      	bne.n	8004092 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004032:	4b72      	ldr	r3, [pc, #456]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800403a:	4a70      	ldr	r2, [pc, #448]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 800403c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004040:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004042:	2380      	movs	r3, #128	; 0x80
 8004044:	617b      	str	r3, [r7, #20]
 8004046:	e024      	b.n	8004092 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	2b02      	cmp	r3, #2
 800404e:	d107      	bne.n	8004060 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004050:	4b6a      	ldr	r3, [pc, #424]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d109      	bne.n	8004070 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e0c6      	b.n	80041ee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004060:	4b66      	ldr	r3, [pc, #408]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e0be      	b.n	80041ee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004070:	f000 f8ce 	bl	8004210 <HAL_RCC_GetSysClockFreq>
 8004074:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	4a61      	ldr	r2, [pc, #388]	; (8004200 <HAL_RCC_ClockConfig+0x268>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d909      	bls.n	8004092 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800407e:	4b5f      	ldr	r3, [pc, #380]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004086:	4a5d      	ldr	r2, [pc, #372]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 8004088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800408c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800408e:	2380      	movs	r3, #128	; 0x80
 8004090:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004092:	4b5a      	ldr	r3, [pc, #360]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f023 0203 	bic.w	r2, r3, #3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	4957      	ldr	r1, [pc, #348]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040a4:	f7fd ff50 	bl	8001f48 <HAL_GetTick>
 80040a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040aa:	e00a      	b.n	80040c2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ac:	f7fd ff4c 	bl	8001f48 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e095      	b.n	80041ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c2:	4b4e      	ldr	r3, [pc, #312]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 020c 	and.w	r2, r3, #12
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d1eb      	bne.n	80040ac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d023      	beq.n	8004128 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d005      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040ec:	4b43      	ldr	r3, [pc, #268]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	4a42      	ldr	r2, [pc, #264]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 80040f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80040f6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0308 	and.w	r3, r3, #8
 8004100:	2b00      	cmp	r3, #0
 8004102:	d007      	beq.n	8004114 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004104:	4b3d      	ldr	r3, [pc, #244]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800410c:	4a3b      	ldr	r2, [pc, #236]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 800410e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004112:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004114:	4b39      	ldr	r3, [pc, #228]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	4936      	ldr	r1, [pc, #216]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 8004122:	4313      	orrs	r3, r2
 8004124:	608b      	str	r3, [r1, #8]
 8004126:	e008      	b.n	800413a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	2b80      	cmp	r3, #128	; 0x80
 800412c:	d105      	bne.n	800413a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800412e:	4b33      	ldr	r3, [pc, #204]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	4a32      	ldr	r2, [pc, #200]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 8004134:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004138:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800413a:	4b2f      	ldr	r3, [pc, #188]	; (80041f8 <HAL_RCC_ClockConfig+0x260>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 030f 	and.w	r3, r3, #15
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	429a      	cmp	r2, r3
 8004146:	d21d      	bcs.n	8004184 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004148:	4b2b      	ldr	r3, [pc, #172]	; (80041f8 <HAL_RCC_ClockConfig+0x260>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f023 020f 	bic.w	r2, r3, #15
 8004150:	4929      	ldr	r1, [pc, #164]	; (80041f8 <HAL_RCC_ClockConfig+0x260>)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	4313      	orrs	r3, r2
 8004156:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004158:	f7fd fef6 	bl	8001f48 <HAL_GetTick>
 800415c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800415e:	e00a      	b.n	8004176 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004160:	f7fd fef2 	bl	8001f48 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	f241 3288 	movw	r2, #5000	; 0x1388
 800416e:	4293      	cmp	r3, r2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e03b      	b.n	80041ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004176:	4b20      	ldr	r3, [pc, #128]	; (80041f8 <HAL_RCC_ClockConfig+0x260>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 030f 	and.w	r3, r3, #15
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	429a      	cmp	r2, r3
 8004182:	d1ed      	bne.n	8004160 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b00      	cmp	r3, #0
 800418e:	d008      	beq.n	80041a2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004190:	4b1a      	ldr	r3, [pc, #104]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	4917      	ldr	r1, [pc, #92]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d009      	beq.n	80041c2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041ae:	4b13      	ldr	r3, [pc, #76]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	490f      	ldr	r1, [pc, #60]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041c2:	f000 f825 	bl	8004210 <HAL_RCC_GetSysClockFreq>
 80041c6:	4602      	mov	r2, r0
 80041c8:	4b0c      	ldr	r3, [pc, #48]	; (80041fc <HAL_RCC_ClockConfig+0x264>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	091b      	lsrs	r3, r3, #4
 80041ce:	f003 030f 	and.w	r3, r3, #15
 80041d2:	490c      	ldr	r1, [pc, #48]	; (8004204 <HAL_RCC_ClockConfig+0x26c>)
 80041d4:	5ccb      	ldrb	r3, [r1, r3]
 80041d6:	f003 031f 	and.w	r3, r3, #31
 80041da:	fa22 f303 	lsr.w	r3, r2, r3
 80041de:	4a0a      	ldr	r2, [pc, #40]	; (8004208 <HAL_RCC_ClockConfig+0x270>)
 80041e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80041e2:	4b0a      	ldr	r3, [pc, #40]	; (800420c <HAL_RCC_ClockConfig+0x274>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fd fe62 	bl	8001eb0 <HAL_InitTick>
 80041ec:	4603      	mov	r3, r0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3718      	adds	r7, #24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	40022000 	.word	0x40022000
 80041fc:	40021000 	.word	0x40021000
 8004200:	04c4b400 	.word	0x04c4b400
 8004204:	0800756c 	.word	0x0800756c
 8004208:	20000000 	.word	0x20000000
 800420c:	20000004 	.word	0x20000004

08004210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004216:	4b2c      	ldr	r3, [pc, #176]	; (80042c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 030c 	and.w	r3, r3, #12
 800421e:	2b04      	cmp	r3, #4
 8004220:	d102      	bne.n	8004228 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004222:	4b2a      	ldr	r3, [pc, #168]	; (80042cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004224:	613b      	str	r3, [r7, #16]
 8004226:	e047      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004228:	4b27      	ldr	r3, [pc, #156]	; (80042c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 030c 	and.w	r3, r3, #12
 8004230:	2b08      	cmp	r3, #8
 8004232:	d102      	bne.n	800423a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004234:	4b25      	ldr	r3, [pc, #148]	; (80042cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004236:	613b      	str	r3, [r7, #16]
 8004238:	e03e      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800423a:	4b23      	ldr	r3, [pc, #140]	; (80042c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 030c 	and.w	r3, r3, #12
 8004242:	2b0c      	cmp	r3, #12
 8004244:	d136      	bne.n	80042b4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004246:	4b20      	ldr	r3, [pc, #128]	; (80042c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004250:	4b1d      	ldr	r3, [pc, #116]	; (80042c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	091b      	lsrs	r3, r3, #4
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	3301      	adds	r3, #1
 800425c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2b03      	cmp	r3, #3
 8004262:	d10c      	bne.n	800427e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004264:	4a19      	ldr	r2, [pc, #100]	; (80042cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	fbb2 f3f3 	udiv	r3, r2, r3
 800426c:	4a16      	ldr	r2, [pc, #88]	; (80042c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800426e:	68d2      	ldr	r2, [r2, #12]
 8004270:	0a12      	lsrs	r2, r2, #8
 8004272:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004276:	fb02 f303 	mul.w	r3, r2, r3
 800427a:	617b      	str	r3, [r7, #20]
      break;
 800427c:	e00c      	b.n	8004298 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800427e:	4a13      	ldr	r2, [pc, #76]	; (80042cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	fbb2 f3f3 	udiv	r3, r2, r3
 8004286:	4a10      	ldr	r2, [pc, #64]	; (80042c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004288:	68d2      	ldr	r2, [r2, #12]
 800428a:	0a12      	lsrs	r2, r2, #8
 800428c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004290:	fb02 f303 	mul.w	r3, r2, r3
 8004294:	617b      	str	r3, [r7, #20]
      break;
 8004296:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004298:	4b0b      	ldr	r3, [pc, #44]	; (80042c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	0e5b      	lsrs	r3, r3, #25
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	3301      	adds	r3, #1
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b0:	613b      	str	r3, [r7, #16]
 80042b2:	e001      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80042b8:	693b      	ldr	r3, [r7, #16]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	371c      	adds	r7, #28
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40021000 	.word	0x40021000
 80042cc:	00f42400 	.word	0x00f42400

080042d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042d4:	4b03      	ldr	r3, [pc, #12]	; (80042e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80042d6:	681b      	ldr	r3, [r3, #0]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	20000000 	.word	0x20000000

080042e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042ec:	f7ff fff0 	bl	80042d0 <HAL_RCC_GetHCLKFreq>
 80042f0:	4602      	mov	r2, r0
 80042f2:	4b06      	ldr	r3, [pc, #24]	; (800430c <HAL_RCC_GetPCLK1Freq+0x24>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	0a1b      	lsrs	r3, r3, #8
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	4904      	ldr	r1, [pc, #16]	; (8004310 <HAL_RCC_GetPCLK1Freq+0x28>)
 80042fe:	5ccb      	ldrb	r3, [r1, r3]
 8004300:	f003 031f 	and.w	r3, r3, #31
 8004304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004308:	4618      	mov	r0, r3
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40021000 	.word	0x40021000
 8004310:	0800757c 	.word	0x0800757c

08004314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004318:	f7ff ffda 	bl	80042d0 <HAL_RCC_GetHCLKFreq>
 800431c:	4602      	mov	r2, r0
 800431e:	4b06      	ldr	r3, [pc, #24]	; (8004338 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	0adb      	lsrs	r3, r3, #11
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	4904      	ldr	r1, [pc, #16]	; (800433c <HAL_RCC_GetPCLK2Freq+0x28>)
 800432a:	5ccb      	ldrb	r3, [r1, r3]
 800432c:	f003 031f 	and.w	r3, r3, #31
 8004330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004334:	4618      	mov	r0, r3
 8004336:	bd80      	pop	{r7, pc}
 8004338:	40021000 	.word	0x40021000
 800433c:	0800757c 	.word	0x0800757c

08004340 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004340:	b480      	push	{r7}
 8004342:	b087      	sub	sp, #28
 8004344:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004346:	4b1e      	ldr	r3, [pc, #120]	; (80043c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f003 0303 	and.w	r3, r3, #3
 800434e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004350:	4b1b      	ldr	r3, [pc, #108]	; (80043c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	091b      	lsrs	r3, r3, #4
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	3301      	adds	r3, #1
 800435c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	2b03      	cmp	r3, #3
 8004362:	d10c      	bne.n	800437e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004364:	4a17      	ldr	r2, [pc, #92]	; (80043c4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	fbb2 f3f3 	udiv	r3, r2, r3
 800436c:	4a14      	ldr	r2, [pc, #80]	; (80043c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800436e:	68d2      	ldr	r2, [r2, #12]
 8004370:	0a12      	lsrs	r2, r2, #8
 8004372:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004376:	fb02 f303 	mul.w	r3, r2, r3
 800437a:	617b      	str	r3, [r7, #20]
    break;
 800437c:	e00c      	b.n	8004398 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800437e:	4a11      	ldr	r2, [pc, #68]	; (80043c4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	fbb2 f3f3 	udiv	r3, r2, r3
 8004386:	4a0e      	ldr	r2, [pc, #56]	; (80043c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004388:	68d2      	ldr	r2, [r2, #12]
 800438a:	0a12      	lsrs	r2, r2, #8
 800438c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004390:	fb02 f303 	mul.w	r3, r2, r3
 8004394:	617b      	str	r3, [r7, #20]
    break;
 8004396:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004398:	4b09      	ldr	r3, [pc, #36]	; (80043c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	0e5b      	lsrs	r3, r3, #25
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	3301      	adds	r3, #1
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80043b2:	687b      	ldr	r3, [r7, #4]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	371c      	adds	r7, #28
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	40021000 	.word	0x40021000
 80043c4:	00f42400 	.word	0x00f42400

080043c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043d0:	2300      	movs	r3, #0
 80043d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043d4:	2300      	movs	r3, #0
 80043d6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 8098 	beq.w	8004516 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043e6:	2300      	movs	r3, #0
 80043e8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ea:	4b43      	ldr	r3, [pc, #268]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10d      	bne.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043f6:	4b40      	ldr	r3, [pc, #256]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fa:	4a3f      	ldr	r2, [pc, #252]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004400:	6593      	str	r3, [r2, #88]	; 0x58
 8004402:	4b3d      	ldr	r3, [pc, #244]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800440a:	60bb      	str	r3, [r7, #8]
 800440c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800440e:	2301      	movs	r3, #1
 8004410:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004412:	4b3a      	ldr	r3, [pc, #232]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a39      	ldr	r2, [pc, #228]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800441c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800441e:	f7fd fd93 	bl	8001f48 <HAL_GetTick>
 8004422:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004424:	e009      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004426:	f7fd fd8f 	bl	8001f48 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d902      	bls.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	74fb      	strb	r3, [r7, #19]
        break;
 8004438:	e005      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800443a:	4b30      	ldr	r3, [pc, #192]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0ef      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004446:	7cfb      	ldrb	r3, [r7, #19]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d159      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800444c:	4b2a      	ldr	r3, [pc, #168]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800444e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004456:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d01e      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	429a      	cmp	r2, r3
 8004466:	d019      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004468:	4b23      	ldr	r3, [pc, #140]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800446a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004472:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004474:	4b20      	ldr	r3, [pc, #128]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447a:	4a1f      	ldr	r2, [pc, #124]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800447c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004480:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004484:	4b1c      	ldr	r3, [pc, #112]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448a:	4a1b      	ldr	r2, [pc, #108]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800448c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004490:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004494:	4a18      	ldr	r2, [pc, #96]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d016      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a6:	f7fd fd4f 	bl	8001f48 <HAL_GetTick>
 80044aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044ac:	e00b      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ae:	f7fd fd4b 	bl	8001f48 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044bc:	4293      	cmp	r3, r2
 80044be:	d902      	bls.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	74fb      	strb	r3, [r7, #19]
            break;
 80044c4:	e006      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044c6:	4b0c      	ldr	r3, [pc, #48]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0ec      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80044d4:	7cfb      	ldrb	r3, [r7, #19]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10b      	bne.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044da:	4b07      	ldr	r3, [pc, #28]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e8:	4903      	ldr	r1, [pc, #12]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80044f0:	e008      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044f2:	7cfb      	ldrb	r3, [r7, #19]
 80044f4:	74bb      	strb	r3, [r7, #18]
 80044f6:	e005      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80044f8:	40021000 	.word	0x40021000
 80044fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004500:	7cfb      	ldrb	r3, [r7, #19]
 8004502:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004504:	7c7b      	ldrb	r3, [r7, #17]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d105      	bne.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800450a:	4ba6      	ldr	r3, [pc, #664]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800450c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800450e:	4aa5      	ldr	r2, [pc, #660]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004514:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00a      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004522:	4ba0      	ldr	r3, [pc, #640]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004528:	f023 0203 	bic.w	r2, r3, #3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	499c      	ldr	r1, [pc, #624]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004532:	4313      	orrs	r3, r2
 8004534:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00a      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004544:	4b97      	ldr	r3, [pc, #604]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454a:	f023 020c 	bic.w	r2, r3, #12
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	4994      	ldr	r1, [pc, #592]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004554:	4313      	orrs	r3, r2
 8004556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0304 	and.w	r3, r3, #4
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00a      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004566:	4b8f      	ldr	r3, [pc, #572]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	498b      	ldr	r1, [pc, #556]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004576:	4313      	orrs	r3, r2
 8004578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0308 	and.w	r3, r3, #8
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00a      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004588:	4b86      	ldr	r3, [pc, #536]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800458a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	4983      	ldr	r1, [pc, #524]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004598:	4313      	orrs	r3, r2
 800459a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0320 	and.w	r3, r3, #32
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00a      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045aa:	4b7e      	ldr	r3, [pc, #504]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	497a      	ldr	r1, [pc, #488]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00a      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045cc:	4b75      	ldr	r3, [pc, #468]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	4972      	ldr	r1, [pc, #456]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045ee:	4b6d      	ldr	r3, [pc, #436]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	4969      	ldr	r1, [pc, #420]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00a      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004610:	4b64      	ldr	r3, [pc, #400]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004616:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	4961      	ldr	r1, [pc, #388]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004620:	4313      	orrs	r3, r2
 8004622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00a      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004632:	4b5c      	ldr	r3, [pc, #368]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004638:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	4958      	ldr	r1, [pc, #352]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004642:	4313      	orrs	r3, r2
 8004644:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004650:	2b00      	cmp	r3, #0
 8004652:	d015      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004654:	4b53      	ldr	r3, [pc, #332]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004662:	4950      	ldr	r1, [pc, #320]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004664:	4313      	orrs	r3, r2
 8004666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004672:	d105      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004674:	4b4b      	ldr	r3, [pc, #300]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	4a4a      	ldr	r2, [pc, #296]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800467a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800467e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004688:	2b00      	cmp	r3, #0
 800468a:	d015      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800468c:	4b45      	ldr	r3, [pc, #276]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800468e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004692:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469a:	4942      	ldr	r1, [pc, #264]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800469c:	4313      	orrs	r3, r2
 800469e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046aa:	d105      	bne.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046ac:	4b3d      	ldr	r3, [pc, #244]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	4a3c      	ldr	r2, [pc, #240]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046b6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d015      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80046c4:	4b37      	ldr	r3, [pc, #220]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d2:	4934      	ldr	r1, [pc, #208]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046e2:	d105      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046e4:	4b2f      	ldr	r3, [pc, #188]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	4a2e      	ldr	r2, [pc, #184]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046ee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d015      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046fc:	4b29      	ldr	r3, [pc, #164]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004702:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800470a:	4926      	ldr	r1, [pc, #152]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800470c:	4313      	orrs	r3, r2
 800470e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004716:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800471a:	d105      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800471c:	4b21      	ldr	r3, [pc, #132]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	4a20      	ldr	r2, [pc, #128]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004722:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004726:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d015      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004734:	4b1b      	ldr	r3, [pc, #108]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004742:	4918      	ldr	r1, [pc, #96]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004744:	4313      	orrs	r3, r2
 8004746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004752:	d105      	bne.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004754:	4b13      	ldr	r3, [pc, #76]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	4a12      	ldr	r2, [pc, #72]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800475a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800475e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d015      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800476c:	4b0d      	ldr	r3, [pc, #52]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800476e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004772:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800477a:	490a      	ldr	r1, [pc, #40]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800477c:	4313      	orrs	r3, r2
 800477e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004786:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800478a:	d105      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800478c:	4b05      	ldr	r3, [pc, #20]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	4a04      	ldr	r2, [pc, #16]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004796:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004798:	7cbb      	ldrb	r3, [r7, #18]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3718      	adds	r7, #24
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	40021000 	.word	0x40021000

080047a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e09d      	b.n	80048f6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d108      	bne.n	80047d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047ca:	d009      	beq.n	80047e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	61da      	str	r2, [r3, #28]
 80047d2:	e005      	b.n	80047e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d106      	bne.n	8004800 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7fd f848 	bl	8001890 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004816:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004820:	d902      	bls.n	8004828 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004822:	2300      	movs	r3, #0
 8004824:	60fb      	str	r3, [r7, #12]
 8004826:	e002      	b.n	800482e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800482c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004836:	d007      	beq.n	8004848 <HAL_SPI_Init+0xa0>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004840:	d002      	beq.n	8004848 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004858:	431a      	orrs	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	431a      	orrs	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	431a      	orrs	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004876:	431a      	orrs	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004880:	431a      	orrs	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800488a:	ea42 0103 	orr.w	r1, r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004892:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	0c1b      	lsrs	r3, r3, #16
 80048a4:	f003 0204 	and.w	r2, r3, #4
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	f003 0310 	and.w	r3, r3, #16
 80048b0:	431a      	orrs	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b6:	f003 0308 	and.w	r3, r3, #8
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80048c4:	ea42 0103 	orr.w	r1, r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	69da      	ldr	r2, [r3, #28]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b08a      	sub	sp, #40	; 0x28
 8004902:	af00      	add	r7, sp, #0
 8004904:	60f8      	str	r0, [r7, #12]
 8004906:	60b9      	str	r1, [r7, #8]
 8004908:	607a      	str	r2, [r7, #4]
 800490a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800490c:	2301      	movs	r3, #1
 800490e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004910:	2300      	movs	r3, #0
 8004912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800491c:	2b01      	cmp	r3, #1
 800491e:	d101      	bne.n	8004924 <HAL_SPI_TransmitReceive+0x26>
 8004920:	2302      	movs	r3, #2
 8004922:	e1fb      	b.n	8004d1c <HAL_SPI_TransmitReceive+0x41e>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800492c:	f7fd fb0c 	bl	8001f48 <HAL_GetTick>
 8004930:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004938:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004940:	887b      	ldrh	r3, [r7, #2]
 8004942:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004944:	887b      	ldrh	r3, [r7, #2]
 8004946:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004948:	7efb      	ldrb	r3, [r7, #27]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d00e      	beq.n	800496c <HAL_SPI_TransmitReceive+0x6e>
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004954:	d106      	bne.n	8004964 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d102      	bne.n	8004964 <HAL_SPI_TransmitReceive+0x66>
 800495e:	7efb      	ldrb	r3, [r7, #27]
 8004960:	2b04      	cmp	r3, #4
 8004962:	d003      	beq.n	800496c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004964:	2302      	movs	r3, #2
 8004966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800496a:	e1cd      	b.n	8004d08 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d005      	beq.n	800497e <HAL_SPI_TransmitReceive+0x80>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d002      	beq.n	800497e <HAL_SPI_TransmitReceive+0x80>
 8004978:	887b      	ldrh	r3, [r7, #2]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d103      	bne.n	8004986 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004984:	e1c0      	b.n	8004d08 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b04      	cmp	r3, #4
 8004990:	d003      	beq.n	800499a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2205      	movs	r2, #5
 8004996:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	887a      	ldrh	r2, [r7, #2]
 80049aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	887a      	ldrh	r2, [r7, #2]
 80049b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	887a      	ldrh	r2, [r7, #2]
 80049c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	887a      	ldrh	r2, [r7, #2]
 80049c6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049dc:	d802      	bhi.n	80049e4 <HAL_SPI_TransmitReceive+0xe6>
 80049de:	8a3b      	ldrh	r3, [r7, #16]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d908      	bls.n	80049f6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049f2:	605a      	str	r2, [r3, #4]
 80049f4:	e007      	b.n	8004a06 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a04:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a10:	2b40      	cmp	r3, #64	; 0x40
 8004a12:	d007      	beq.n	8004a24 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a2c:	d97c      	bls.n	8004b28 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <HAL_SPI_TransmitReceive+0x13e>
 8004a36:	8a7b      	ldrh	r3, [r7, #18]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d169      	bne.n	8004b10 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a40:	881a      	ldrh	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4c:	1c9a      	adds	r2, r3, #2
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a60:	e056      	b.n	8004b10 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d11b      	bne.n	8004aa8 <HAL_SPI_TransmitReceive+0x1aa>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d016      	beq.n	8004aa8 <HAL_SPI_TransmitReceive+0x1aa>
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d113      	bne.n	8004aa8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a84:	881a      	ldrh	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a90:	1c9a      	adds	r2, r3, #2
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d11c      	bne.n	8004af0 <HAL_SPI_TransmitReceive+0x1f2>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d016      	beq.n	8004af0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68da      	ldr	r2, [r3, #12]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004acc:	b292      	uxth	r2, r2
 8004ace:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad4:	1c9a      	adds	r2, r3, #2
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004aec:	2301      	movs	r3, #1
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004af0:	f7fd fa2a 	bl	8001f48 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d807      	bhi.n	8004b10 <HAL_SPI_TransmitReceive+0x212>
 8004b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b06:	d003      	beq.n	8004b10 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004b0e:	e0fb      	b.n	8004d08 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1a3      	bne.n	8004a62 <HAL_SPI_TransmitReceive+0x164>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d19d      	bne.n	8004a62 <HAL_SPI_TransmitReceive+0x164>
 8004b26:	e0df      	b.n	8004ce8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <HAL_SPI_TransmitReceive+0x23a>
 8004b30:	8a7b      	ldrh	r3, [r7, #18]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	f040 80cb 	bne.w	8004cce <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d912      	bls.n	8004b68 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b46:	881a      	ldrh	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b52:	1c9a      	adds	r2, r3, #2
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	3b02      	subs	r3, #2
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b66:	e0b2      	b.n	8004cce <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	330c      	adds	r3, #12
 8004b72:	7812      	ldrb	r2, [r2, #0]
 8004b74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7a:	1c5a      	adds	r2, r3, #1
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	3b01      	subs	r3, #1
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b8e:	e09e      	b.n	8004cce <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d134      	bne.n	8004c08 <HAL_SPI_TransmitReceive+0x30a>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d02f      	beq.n	8004c08 <HAL_SPI_TransmitReceive+0x30a>
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d12c      	bne.n	8004c08 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d912      	bls.n	8004bde <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbc:	881a      	ldrh	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc8:	1c9a      	adds	r2, r3, #2
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	3b02      	subs	r3, #2
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bdc:	e012      	b.n	8004c04 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	330c      	adds	r3, #12
 8004be8:	7812      	ldrb	r2, [r2, #0]
 8004bea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf0:	1c5a      	adds	r2, r3, #1
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d148      	bne.n	8004ca8 <HAL_SPI_TransmitReceive+0x3aa>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d042      	beq.n	8004ca8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d923      	bls.n	8004c76 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68da      	ldr	r2, [r3, #12]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	b292      	uxth	r2, r2
 8004c3a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c40:	1c9a      	adds	r2, r3, #2
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	3b02      	subs	r3, #2
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d81f      	bhi.n	8004ca4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c72:	605a      	str	r2, [r3, #4]
 8004c74:	e016      	b.n	8004ca4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f103 020c 	add.w	r2, r3, #12
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	7812      	ldrb	r2, [r2, #0]
 8004c84:	b2d2      	uxtb	r2, r2
 8004c86:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8c:	1c5a      	adds	r2, r3, #1
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ca8:	f7fd f94e 	bl	8001f48 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d803      	bhi.n	8004cc0 <HAL_SPI_TransmitReceive+0x3c2>
 8004cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cbe:	d102      	bne.n	8004cc6 <HAL_SPI_TransmitReceive+0x3c8>
 8004cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d103      	bne.n	8004cce <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004ccc:	e01c      	b.n	8004d08 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f47f af5b 	bne.w	8004b90 <HAL_SPI_TransmitReceive+0x292>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f47f af54 	bne.w	8004b90 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ce8:	69fa      	ldr	r2, [r7, #28]
 8004cea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 fa57 	bl	80051a0 <SPI_EndRxTxTransaction>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d006      	beq.n	8004d06 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2220      	movs	r2, #32
 8004d02:	661a      	str	r2, [r3, #96]	; 0x60
 8004d04:	e000      	b.n	8004d08 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004d06:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004d18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3728      	adds	r7, #40	; 0x28
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b088      	sub	sp, #32
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	099b      	lsrs	r3, r3, #6
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10f      	bne.n	8004d68 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	099b      	lsrs	r3, r3, #6
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d004      	beq.n	8004d68 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	4798      	blx	r3
    return;
 8004d66:	e0d7      	b.n	8004f18 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	085b      	lsrs	r3, r3, #1
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00a      	beq.n	8004d8a <HAL_SPI_IRQHandler+0x66>
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	09db      	lsrs	r3, r3, #7
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d004      	beq.n	8004d8a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	4798      	blx	r3
    return;
 8004d88:	e0c6      	b.n	8004f18 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	095b      	lsrs	r3, r3, #5
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10c      	bne.n	8004db0 <HAL_SPI_IRQHandler+0x8c>
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	099b      	lsrs	r3, r3, #6
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d106      	bne.n	8004db0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	0a1b      	lsrs	r3, r3, #8
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 80b4 	beq.w	8004f18 <HAL_SPI_IRQHandler+0x1f4>
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	095b      	lsrs	r3, r3, #5
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 80ad 	beq.w	8004f18 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	099b      	lsrs	r3, r3, #6
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d023      	beq.n	8004e12 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b03      	cmp	r3, #3
 8004dd4:	d011      	beq.n	8004dfa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dda:	f043 0204 	orr.w	r2, r3, #4
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004de2:	2300      	movs	r3, #0
 8004de4:	617b      	str	r3, [r7, #20]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	617b      	str	r3, [r7, #20]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	617b      	str	r3, [r7, #20]
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	e00b      	b.n	8004e12 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	613b      	str	r3, [r7, #16]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	613b      	str	r3, [r7, #16]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	613b      	str	r3, [r7, #16]
 8004e0e:	693b      	ldr	r3, [r7, #16]
        return;
 8004e10:	e082      	b.n	8004f18 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	095b      	lsrs	r3, r3, #5
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d014      	beq.n	8004e48 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e22:	f043 0201 	orr.w	r2, r3, #1
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	60fb      	str	r3, [r7, #12]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e44:	601a      	str	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	0a1b      	lsrs	r3, r3, #8
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00c      	beq.n	8004e6e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e58:	f043 0208 	orr.w	r2, r3, #8
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004e60:	2300      	movs	r3, #0
 8004e62:	60bb      	str	r3, [r7, #8]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	60bb      	str	r3, [r7, #8]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d04f      	beq.n	8004f16 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e84:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d104      	bne.n	8004ea2 <HAL_SPI_IRQHandler+0x17e>
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d034      	beq.n	8004f0c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 0203 	bic.w	r2, r2, #3
 8004eb0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d011      	beq.n	8004ede <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ebe:	4a18      	ldr	r2, [pc, #96]	; (8004f20 <HAL_SPI_IRQHandler+0x1fc>)
 8004ec0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fd ffbe 	bl	8002e48 <HAL_DMA_Abort_IT>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d005      	beq.n	8004ede <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ed6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d016      	beq.n	8004f14 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eea:	4a0d      	ldr	r2, [pc, #52]	; (8004f20 <HAL_SPI_IRQHandler+0x1fc>)
 8004eec:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7fd ffa8 	bl	8002e48 <HAL_DMA_Abort_IT>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00a      	beq.n	8004f14 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004f0a:	e003      	b.n	8004f14 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 f809 	bl	8004f24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004f12:	e000      	b.n	8004f16 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004f14:	bf00      	nop
    return;
 8004f16:	bf00      	nop
  }
}
 8004f18:	3720      	adds	r7, #32
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	08004f39 	.word	0x08004f39

08004f24 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f44:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f7ff ffe5 	bl	8004f24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004f5a:	bf00      	nop
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
	...

08004f64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b088      	sub	sp, #32
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	603b      	str	r3, [r7, #0]
 8004f70:	4613      	mov	r3, r2
 8004f72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f74:	f7fc ffe8 	bl	8001f48 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7c:	1a9b      	subs	r3, r3, r2
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	4413      	add	r3, r2
 8004f82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f84:	f7fc ffe0 	bl	8001f48 <HAL_GetTick>
 8004f88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f8a:	4b39      	ldr	r3, [pc, #228]	; (8005070 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	015b      	lsls	r3, r3, #5
 8004f90:	0d1b      	lsrs	r3, r3, #20
 8004f92:	69fa      	ldr	r2, [r7, #28]
 8004f94:	fb02 f303 	mul.w	r3, r2, r3
 8004f98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f9a:	e054      	b.n	8005046 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fa2:	d050      	beq.n	8005046 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fa4:	f7fc ffd0 	bl	8001f48 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	69fa      	ldr	r2, [r7, #28]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d902      	bls.n	8004fba <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d13d      	bne.n	8005036 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fd2:	d111      	bne.n	8004ff8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fdc:	d004      	beq.n	8004fe8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fe6:	d107      	bne.n	8004ff8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ff6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005000:	d10f      	bne.n	8005022 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005020:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e017      	b.n	8005066 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	3b01      	subs	r3, #1
 8005044:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	4013      	ands	r3, r2
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	429a      	cmp	r2, r3
 8005054:	bf0c      	ite	eq
 8005056:	2301      	moveq	r3, #1
 8005058:	2300      	movne	r3, #0
 800505a:	b2db      	uxtb	r3, r3
 800505c:	461a      	mov	r2, r3
 800505e:	79fb      	ldrb	r3, [r7, #7]
 8005060:	429a      	cmp	r2, r3
 8005062:	d19b      	bne.n	8004f9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3720      	adds	r7, #32
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	20000000 	.word	0x20000000

08005074 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b08a      	sub	sp, #40	; 0x28
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
 8005080:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005082:	2300      	movs	r3, #0
 8005084:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005086:	f7fc ff5f 	bl	8001f48 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508e:	1a9b      	subs	r3, r3, r2
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	4413      	add	r3, r2
 8005094:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005096:	f7fc ff57 	bl	8001f48 <HAL_GetTick>
 800509a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	330c      	adds	r3, #12
 80050a2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80050a4:	4b3d      	ldr	r3, [pc, #244]	; (800519c <SPI_WaitFifoStateUntilTimeout+0x128>)
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	4613      	mov	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	00da      	lsls	r2, r3, #3
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	0d1b      	lsrs	r3, r3, #20
 80050b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b6:	fb02 f303 	mul.w	r3, r2, r3
 80050ba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80050bc:	e060      	b.n	8005180 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80050c4:	d107      	bne.n	80050d6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d104      	bne.n	80050d6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80050d4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050dc:	d050      	beq.n	8005180 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050de:	f7fc ff33 	bl	8001f48 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d902      	bls.n	80050f4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d13d      	bne.n	8005170 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005102:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800510c:	d111      	bne.n	8005132 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005116:	d004      	beq.n	8005122 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005120:	d107      	bne.n	8005132 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005130:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800513a:	d10f      	bne.n	800515c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800515a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e010      	b.n	8005192 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005176:	2300      	movs	r3, #0
 8005178:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	3b01      	subs	r3, #1
 800517e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689a      	ldr	r2, [r3, #8]
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	4013      	ands	r3, r2
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	429a      	cmp	r2, r3
 800518e:	d196      	bne.n	80050be <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3728      	adds	r7, #40	; 0x28
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	20000000 	.word	0x20000000

080051a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af02      	add	r7, sp, #8
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f7ff ff5b 	bl	8005074 <SPI_WaitFifoStateUntilTimeout>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d007      	beq.n	80051d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c8:	f043 0220 	orr.w	r2, r3, #32
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e027      	b.n	8005224 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2200      	movs	r2, #0
 80051dc:	2180      	movs	r1, #128	; 0x80
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f7ff fec0 	bl	8004f64 <SPI_WaitFlagStateUntilTimeout>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d007      	beq.n	80051fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ee:	f043 0220 	orr.w	r2, r3, #32
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e014      	b.n	8005224 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2200      	movs	r2, #0
 8005202:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f7ff ff34 	bl	8005074 <SPI_WaitFifoStateUntilTimeout>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d007      	beq.n	8005222 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005216:	f043 0220 	orr.w	r2, r3, #32
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e000      	b.n	8005224 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e049      	b.n	80052d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d106      	bne.n	8005258 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7fc fb68 	bl	8001928 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2202      	movs	r2, #2
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	3304      	adds	r3, #4
 8005268:	4619      	mov	r1, r3
 800526a:	4610      	mov	r0, r2
 800526c:	f000 fcfc 	bl	8005c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3708      	adds	r7, #8
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b082      	sub	sp, #8
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e049      	b.n	8005380 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d106      	bne.n	8005306 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f841 	bl	8005388 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2202      	movs	r2, #2
 800530a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	3304      	adds	r3, #4
 8005316:	4619      	mov	r1, r3
 8005318:	4610      	mov	r0, r2
 800531a:	f000 fca5 	bl	8005c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d101      	bne.n	80053b0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e097      	b.n	80054e0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d106      	bne.n	80053ca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f7fc fb0b 	bl	80019e0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2202      	movs	r2, #2
 80053ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	6812      	ldr	r2, [r2, #0]
 80053dc:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80053e0:	f023 0307 	bic.w	r3, r3, #7
 80053e4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	3304      	adds	r3, #4
 80053ee:	4619      	mov	r1, r3
 80053f0:	4610      	mov	r0, r2
 80053f2:	f000 fc39 	bl	8005c68 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	4313      	orrs	r3, r2
 8005416:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800541e:	f023 0303 	bic.w	r3, r3, #3
 8005422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	021b      	lsls	r3, r3, #8
 800542e:	4313      	orrs	r3, r2
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	4313      	orrs	r3, r2
 8005434:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800543c:	f023 030c 	bic.w	r3, r3, #12
 8005440:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005448:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800544c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	68da      	ldr	r2, [r3, #12]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	021b      	lsls	r3, r3, #8
 8005458:	4313      	orrs	r3, r2
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	4313      	orrs	r3, r2
 800545e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	011a      	lsls	r2, r3, #4
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	031b      	lsls	r3, r3, #12
 800546c:	4313      	orrs	r3, r2
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	4313      	orrs	r3, r2
 8005472:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800547a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005482:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	011b      	lsls	r3, r3, #4
 800548e:	4313      	orrs	r3, r2
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3718      	adds	r7, #24
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d122      	bne.n	8005544 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f003 0302 	and.w	r3, r3, #2
 8005508:	2b02      	cmp	r3, #2
 800550a:	d11b      	bne.n	8005544 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f06f 0202 	mvn.w	r2, #2
 8005514:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	f003 0303 	and.w	r3, r3, #3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 fb7e 	bl	8005c2c <HAL_TIM_IC_CaptureCallback>
 8005530:	e005      	b.n	800553e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 fb70 	bl	8005c18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 fb81 	bl	8005c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f003 0304 	and.w	r3, r3, #4
 800554e:	2b04      	cmp	r3, #4
 8005550:	d122      	bne.n	8005598 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f003 0304 	and.w	r3, r3, #4
 800555c:	2b04      	cmp	r3, #4
 800555e:	d11b      	bne.n	8005598 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f06f 0204 	mvn.w	r2, #4
 8005568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2202      	movs	r2, #2
 800556e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800557a:	2b00      	cmp	r3, #0
 800557c:	d003      	beq.n	8005586 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 fb54 	bl	8005c2c <HAL_TIM_IC_CaptureCallback>
 8005584:	e005      	b.n	8005592 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 fb46 	bl	8005c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 fb57 	bl	8005c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	f003 0308 	and.w	r3, r3, #8
 80055a2:	2b08      	cmp	r3, #8
 80055a4:	d122      	bne.n	80055ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f003 0308 	and.w	r3, r3, #8
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	d11b      	bne.n	80055ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f06f 0208 	mvn.w	r2, #8
 80055bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2204      	movs	r2, #4
 80055c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	f003 0303 	and.w	r3, r3, #3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 fb2a 	bl	8005c2c <HAL_TIM_IC_CaptureCallback>
 80055d8:	e005      	b.n	80055e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 fb1c 	bl	8005c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 fb2d 	bl	8005c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	f003 0310 	and.w	r3, r3, #16
 80055f6:	2b10      	cmp	r3, #16
 80055f8:	d122      	bne.n	8005640 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f003 0310 	and.w	r3, r3, #16
 8005604:	2b10      	cmp	r3, #16
 8005606:	d11b      	bne.n	8005640 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f06f 0210 	mvn.w	r2, #16
 8005610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2208      	movs	r2, #8
 8005616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 fb00 	bl	8005c2c <HAL_TIM_IC_CaptureCallback>
 800562c:	e005      	b.n	800563a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 faf2 	bl	8005c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 fb03 	bl	8005c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b01      	cmp	r3, #1
 800564c:	d10e      	bne.n	800566c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b01      	cmp	r3, #1
 800565a:	d107      	bne.n	800566c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f06f 0201 	mvn.w	r2, #1
 8005664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 facc 	bl	8005c04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005676:	2b80      	cmp	r3, #128	; 0x80
 8005678:	d10e      	bne.n	8005698 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005684:	2b80      	cmp	r3, #128	; 0x80
 8005686:	d107      	bne.n	8005698 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f001 f921 	bl	80068da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056a6:	d10e      	bne.n	80056c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b2:	2b80      	cmp	r3, #128	; 0x80
 80056b4:	d107      	bne.n	80056c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80056be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f001 f914 	bl	80068ee <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d0:	2b40      	cmp	r3, #64	; 0x40
 80056d2:	d10e      	bne.n	80056f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056de:	2b40      	cmp	r3, #64	; 0x40
 80056e0:	d107      	bne.n	80056f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 fab1 	bl	8005c54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	f003 0320 	and.w	r3, r3, #32
 80056fc:	2b20      	cmp	r3, #32
 80056fe:	d10e      	bne.n	800571e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f003 0320 	and.w	r3, r3, #32
 800570a:	2b20      	cmp	r3, #32
 800570c:	d107      	bne.n	800571e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f06f 0220 	mvn.w	r2, #32
 8005716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f001 f8d4 	bl	80068c6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005728:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800572c:	d10f      	bne.n	800574e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005738:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800573c:	d107      	bne.n	800574e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f001 f8da 	bl	8006902 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005758:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800575c:	d10f      	bne.n	800577e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005768:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800576c:	d107      	bne.n	800577e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f001 f8cc 	bl	8006916 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005788:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800578c:	d10f      	bne.n	80057ae <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005798:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800579c:	d107      	bne.n	80057ae <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80057a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f001 f8be 	bl	800692a <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057bc:	d10f      	bne.n	80057de <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057cc:	d107      	bne.n	80057de <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80057d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f001 f8b0 	bl	800693e <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057de:	bf00      	nop
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
	...

080057e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057f4:	2300      	movs	r3, #0
 80057f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d101      	bne.n	8005806 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005802:	2302      	movs	r3, #2
 8005804:	e0ff      	b.n	8005a06 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b14      	cmp	r3, #20
 8005812:	f200 80f0 	bhi.w	80059f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005816:	a201      	add	r2, pc, #4	; (adr r2, 800581c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581c:	08005871 	.word	0x08005871
 8005820:	080059f7 	.word	0x080059f7
 8005824:	080059f7 	.word	0x080059f7
 8005828:	080059f7 	.word	0x080059f7
 800582c:	080058b1 	.word	0x080058b1
 8005830:	080059f7 	.word	0x080059f7
 8005834:	080059f7 	.word	0x080059f7
 8005838:	080059f7 	.word	0x080059f7
 800583c:	080058f3 	.word	0x080058f3
 8005840:	080059f7 	.word	0x080059f7
 8005844:	080059f7 	.word	0x080059f7
 8005848:	080059f7 	.word	0x080059f7
 800584c:	08005933 	.word	0x08005933
 8005850:	080059f7 	.word	0x080059f7
 8005854:	080059f7 	.word	0x080059f7
 8005858:	080059f7 	.word	0x080059f7
 800585c:	08005975 	.word	0x08005975
 8005860:	080059f7 	.word	0x080059f7
 8005864:	080059f7 	.word	0x080059f7
 8005868:	080059f7 	.word	0x080059f7
 800586c:	080059b5 	.word	0x080059b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68b9      	ldr	r1, [r7, #8]
 8005876:	4618      	mov	r0, r3
 8005878:	f000 fa86 	bl	8005d88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	699a      	ldr	r2, [r3, #24]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f042 0208 	orr.w	r2, r2, #8
 800588a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	699a      	ldr	r2, [r3, #24]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f022 0204 	bic.w	r2, r2, #4
 800589a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6999      	ldr	r1, [r3, #24]
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	691a      	ldr	r2, [r3, #16]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	619a      	str	r2, [r3, #24]
      break;
 80058ae:	e0a5      	b.n	80059fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68b9      	ldr	r1, [r7, #8]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 faf6 	bl	8005ea8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	699a      	ldr	r2, [r3, #24]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699a      	ldr	r2, [r3, #24]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6999      	ldr	r1, [r3, #24]
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	021a      	lsls	r2, r3, #8
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	430a      	orrs	r2, r1
 80058ee:	619a      	str	r2, [r3, #24]
      break;
 80058f0:	e084      	b.n	80059fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68b9      	ldr	r1, [r7, #8]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f000 fb5f 	bl	8005fbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	69da      	ldr	r2, [r3, #28]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f042 0208 	orr.w	r2, r2, #8
 800590c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	69da      	ldr	r2, [r3, #28]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 0204 	bic.w	r2, r2, #4
 800591c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	69d9      	ldr	r1, [r3, #28]
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	691a      	ldr	r2, [r3, #16]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	430a      	orrs	r2, r1
 800592e:	61da      	str	r2, [r3, #28]
      break;
 8005930:	e064      	b.n	80059fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68b9      	ldr	r1, [r7, #8]
 8005938:	4618      	mov	r0, r3
 800593a:	f000 fbc7 	bl	80060cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	69da      	ldr	r2, [r3, #28]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800594c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	69da      	ldr	r2, [r3, #28]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800595c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	69d9      	ldr	r1, [r3, #28]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	021a      	lsls	r2, r3, #8
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	61da      	str	r2, [r3, #28]
      break;
 8005972:	e043      	b.n	80059fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68b9      	ldr	r1, [r7, #8]
 800597a:	4618      	mov	r0, r3
 800597c:	f000 fc30 	bl	80061e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f042 0208 	orr.w	r2, r2, #8
 800598e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f022 0204 	bic.w	r2, r2, #4
 800599e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	691a      	ldr	r2, [r3, #16]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80059b2:	e023      	b.n	80059fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68b9      	ldr	r1, [r7, #8]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f000 fc74 	bl	80062a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059de:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	021a      	lsls	r2, r3, #8
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	430a      	orrs	r2, r1
 80059f2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80059f4:	e002      	b.n	80059fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	75fb      	strb	r3, [r7, #23]
      break;
 80059fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3718      	adds	r7, #24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop

08005a10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d101      	bne.n	8005a2c <HAL_TIM_ConfigClockSource+0x1c>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e0de      	b.n	8005bea <HAL_TIM_ConfigClockSource+0x1da>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2202      	movs	r2, #2
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005a4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a63      	ldr	r2, [pc, #396]	; (8005bf4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	f000 80a9 	beq.w	8005bbe <HAL_TIM_ConfigClockSource+0x1ae>
 8005a6c:	4a61      	ldr	r2, [pc, #388]	; (8005bf4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	f200 80ae 	bhi.w	8005bd0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a74:	4a60      	ldr	r2, [pc, #384]	; (8005bf8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	f000 80a1 	beq.w	8005bbe <HAL_TIM_ConfigClockSource+0x1ae>
 8005a7c:	4a5e      	ldr	r2, [pc, #376]	; (8005bf8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	f200 80a6 	bhi.w	8005bd0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a84:	4a5d      	ldr	r2, [pc, #372]	; (8005bfc <HAL_TIM_ConfigClockSource+0x1ec>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	f000 8099 	beq.w	8005bbe <HAL_TIM_ConfigClockSource+0x1ae>
 8005a8c:	4a5b      	ldr	r2, [pc, #364]	; (8005bfc <HAL_TIM_ConfigClockSource+0x1ec>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	f200 809e 	bhi.w	8005bd0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005a94:	4a5a      	ldr	r2, [pc, #360]	; (8005c00 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	f000 8091 	beq.w	8005bbe <HAL_TIM_ConfigClockSource+0x1ae>
 8005a9c:	4a58      	ldr	r2, [pc, #352]	; (8005c00 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	f200 8096 	bhi.w	8005bd0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005aa4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005aa8:	f000 8089 	beq.w	8005bbe <HAL_TIM_ConfigClockSource+0x1ae>
 8005aac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005ab0:	f200 808e 	bhi.w	8005bd0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ab4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ab8:	d03e      	beq.n	8005b38 <HAL_TIM_ConfigClockSource+0x128>
 8005aba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005abe:	f200 8087 	bhi.w	8005bd0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ac6:	f000 8086 	beq.w	8005bd6 <HAL_TIM_ConfigClockSource+0x1c6>
 8005aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ace:	d87f      	bhi.n	8005bd0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ad0:	2b70      	cmp	r3, #112	; 0x70
 8005ad2:	d01a      	beq.n	8005b0a <HAL_TIM_ConfigClockSource+0xfa>
 8005ad4:	2b70      	cmp	r3, #112	; 0x70
 8005ad6:	d87b      	bhi.n	8005bd0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ad8:	2b60      	cmp	r3, #96	; 0x60
 8005ada:	d050      	beq.n	8005b7e <HAL_TIM_ConfigClockSource+0x16e>
 8005adc:	2b60      	cmp	r3, #96	; 0x60
 8005ade:	d877      	bhi.n	8005bd0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ae0:	2b50      	cmp	r3, #80	; 0x50
 8005ae2:	d03c      	beq.n	8005b5e <HAL_TIM_ConfigClockSource+0x14e>
 8005ae4:	2b50      	cmp	r3, #80	; 0x50
 8005ae6:	d873      	bhi.n	8005bd0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005ae8:	2b40      	cmp	r3, #64	; 0x40
 8005aea:	d058      	beq.n	8005b9e <HAL_TIM_ConfigClockSource+0x18e>
 8005aec:	2b40      	cmp	r3, #64	; 0x40
 8005aee:	d86f      	bhi.n	8005bd0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005af0:	2b30      	cmp	r3, #48	; 0x30
 8005af2:	d064      	beq.n	8005bbe <HAL_TIM_ConfigClockSource+0x1ae>
 8005af4:	2b30      	cmp	r3, #48	; 0x30
 8005af6:	d86b      	bhi.n	8005bd0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005af8:	2b20      	cmp	r3, #32
 8005afa:	d060      	beq.n	8005bbe <HAL_TIM_ConfigClockSource+0x1ae>
 8005afc:	2b20      	cmp	r3, #32
 8005afe:	d867      	bhi.n	8005bd0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d05c      	beq.n	8005bbe <HAL_TIM_ConfigClockSource+0x1ae>
 8005b04:	2b10      	cmp	r3, #16
 8005b06:	d05a      	beq.n	8005bbe <HAL_TIM_ConfigClockSource+0x1ae>
 8005b08:	e062      	b.n	8005bd0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6818      	ldr	r0, [r3, #0]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	6899      	ldr	r1, [r3, #8]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	f000 fca7 	bl	800646c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	609a      	str	r2, [r3, #8]
      break;
 8005b36:	e04f      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6818      	ldr	r0, [r3, #0]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	6899      	ldr	r1, [r3, #8]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f000 fc90 	bl	800646c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689a      	ldr	r2, [r3, #8]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b5a:	609a      	str	r2, [r3, #8]
      break;
 8005b5c:	e03c      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6818      	ldr	r0, [r3, #0]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	6859      	ldr	r1, [r3, #4]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	f000 fc02 	bl	8006374 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2150      	movs	r1, #80	; 0x50
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 fc5b 	bl	8006432 <TIM_ITRx_SetConfig>
      break;
 8005b7c:	e02c      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6818      	ldr	r0, [r3, #0]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	6859      	ldr	r1, [r3, #4]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	f000 fc21 	bl	80063d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2160      	movs	r1, #96	; 0x60
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 fc4b 	bl	8006432 <TIM_ITRx_SetConfig>
      break;
 8005b9c:	e01c      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6818      	ldr	r0, [r3, #0]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	6859      	ldr	r1, [r3, #4]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	461a      	mov	r2, r3
 8005bac:	f000 fbe2 	bl	8006374 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2140      	movs	r1, #64	; 0x40
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 fc3b 	bl	8006432 <TIM_ITRx_SetConfig>
      break;
 8005bbc:	e00c      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	4610      	mov	r0, r2
 8005bca:	f000 fc32 	bl	8006432 <TIM_ITRx_SetConfig>
      break;
 8005bce:	e003      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8005bd4:	e000      	b.n	8005bd8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005bd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	00100070 	.word	0x00100070
 8005bf8:	00100040 	.word	0x00100040
 8005bfc:	00100030 	.word	0x00100030
 8005c00:	00100020 	.word	0x00100020

08005c04 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c5c:	bf00      	nop
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a3c      	ldr	r2, [pc, #240]	; (8005d6c <TIM_Base_SetConfig+0x104>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d00f      	beq.n	8005ca0 <TIM_Base_SetConfig+0x38>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c86:	d00b      	beq.n	8005ca0 <TIM_Base_SetConfig+0x38>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a39      	ldr	r2, [pc, #228]	; (8005d70 <TIM_Base_SetConfig+0x108>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d007      	beq.n	8005ca0 <TIM_Base_SetConfig+0x38>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a38      	ldr	r2, [pc, #224]	; (8005d74 <TIM_Base_SetConfig+0x10c>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d003      	beq.n	8005ca0 <TIM_Base_SetConfig+0x38>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a37      	ldr	r2, [pc, #220]	; (8005d78 <TIM_Base_SetConfig+0x110>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d108      	bne.n	8005cb2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a2d      	ldr	r2, [pc, #180]	; (8005d6c <TIM_Base_SetConfig+0x104>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d01b      	beq.n	8005cf2 <TIM_Base_SetConfig+0x8a>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc0:	d017      	beq.n	8005cf2 <TIM_Base_SetConfig+0x8a>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a2a      	ldr	r2, [pc, #168]	; (8005d70 <TIM_Base_SetConfig+0x108>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d013      	beq.n	8005cf2 <TIM_Base_SetConfig+0x8a>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a29      	ldr	r2, [pc, #164]	; (8005d74 <TIM_Base_SetConfig+0x10c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d00f      	beq.n	8005cf2 <TIM_Base_SetConfig+0x8a>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a28      	ldr	r2, [pc, #160]	; (8005d78 <TIM_Base_SetConfig+0x110>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d00b      	beq.n	8005cf2 <TIM_Base_SetConfig+0x8a>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a27      	ldr	r2, [pc, #156]	; (8005d7c <TIM_Base_SetConfig+0x114>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d007      	beq.n	8005cf2 <TIM_Base_SetConfig+0x8a>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a26      	ldr	r2, [pc, #152]	; (8005d80 <TIM_Base_SetConfig+0x118>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d003      	beq.n	8005cf2 <TIM_Base_SetConfig+0x8a>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a25      	ldr	r2, [pc, #148]	; (8005d84 <TIM_Base_SetConfig+0x11c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d108      	bne.n	8005d04 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	689a      	ldr	r2, [r3, #8]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a10      	ldr	r2, [pc, #64]	; (8005d6c <TIM_Base_SetConfig+0x104>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d00f      	beq.n	8005d50 <TIM_Base_SetConfig+0xe8>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a11      	ldr	r2, [pc, #68]	; (8005d78 <TIM_Base_SetConfig+0x110>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d00b      	beq.n	8005d50 <TIM_Base_SetConfig+0xe8>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a10      	ldr	r2, [pc, #64]	; (8005d7c <TIM_Base_SetConfig+0x114>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d007      	beq.n	8005d50 <TIM_Base_SetConfig+0xe8>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a0f      	ldr	r2, [pc, #60]	; (8005d80 <TIM_Base_SetConfig+0x118>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d003      	beq.n	8005d50 <TIM_Base_SetConfig+0xe8>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a0e      	ldr	r2, [pc, #56]	; (8005d84 <TIM_Base_SetConfig+0x11c>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d103      	bne.n	8005d58 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	691a      	ldr	r2, [r3, #16]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	615a      	str	r2, [r3, #20]
}
 8005d5e:	bf00      	nop
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	40012c00 	.word	0x40012c00
 8005d70:	40000400 	.word	0x40000400
 8005d74:	40000800 	.word	0x40000800
 8005d78:	40013400 	.word	0x40013400
 8005d7c:	40014000 	.word	0x40014000
 8005d80:	40014400 	.word	0x40014400
 8005d84:	40014800 	.word	0x40014800

08005d88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	f023 0201 	bic.w	r2, r3, #1
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f023 0303 	bic.w	r3, r3, #3
 8005dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f023 0302 	bic.w	r3, r3, #2
 8005dd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a2c      	ldr	r2, [pc, #176]	; (8005e94 <TIM_OC1_SetConfig+0x10c>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d00f      	beq.n	8005e08 <TIM_OC1_SetConfig+0x80>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a2b      	ldr	r2, [pc, #172]	; (8005e98 <TIM_OC1_SetConfig+0x110>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d00b      	beq.n	8005e08 <TIM_OC1_SetConfig+0x80>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a2a      	ldr	r2, [pc, #168]	; (8005e9c <TIM_OC1_SetConfig+0x114>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d007      	beq.n	8005e08 <TIM_OC1_SetConfig+0x80>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a29      	ldr	r2, [pc, #164]	; (8005ea0 <TIM_OC1_SetConfig+0x118>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d003      	beq.n	8005e08 <TIM_OC1_SetConfig+0x80>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a28      	ldr	r2, [pc, #160]	; (8005ea4 <TIM_OC1_SetConfig+0x11c>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d10c      	bne.n	8005e22 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	f023 0308 	bic.w	r3, r3, #8
 8005e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	f023 0304 	bic.w	r3, r3, #4
 8005e20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a1b      	ldr	r2, [pc, #108]	; (8005e94 <TIM_OC1_SetConfig+0x10c>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d00f      	beq.n	8005e4a <TIM_OC1_SetConfig+0xc2>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a1a      	ldr	r2, [pc, #104]	; (8005e98 <TIM_OC1_SetConfig+0x110>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d00b      	beq.n	8005e4a <TIM_OC1_SetConfig+0xc2>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a19      	ldr	r2, [pc, #100]	; (8005e9c <TIM_OC1_SetConfig+0x114>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d007      	beq.n	8005e4a <TIM_OC1_SetConfig+0xc2>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a18      	ldr	r2, [pc, #96]	; (8005ea0 <TIM_OC1_SetConfig+0x118>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d003      	beq.n	8005e4a <TIM_OC1_SetConfig+0xc2>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a17      	ldr	r2, [pc, #92]	; (8005ea4 <TIM_OC1_SetConfig+0x11c>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d111      	bne.n	8005e6e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	699b      	ldr	r3, [r3, #24]
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	621a      	str	r2, [r3, #32]
}
 8005e88:	bf00      	nop
 8005e8a:	371c      	adds	r7, #28
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr
 8005e94:	40012c00 	.word	0x40012c00
 8005e98:	40013400 	.word	0x40013400
 8005e9c:	40014000 	.word	0x40014000
 8005ea0:	40014400 	.word	0x40014400
 8005ea4:	40014800 	.word	0x40014800

08005ea8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b087      	sub	sp, #28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	f023 0210 	bic.w	r2, r3, #16
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ee2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	021b      	lsls	r3, r3, #8
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	f023 0320 	bic.w	r3, r3, #32
 8005ef6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	011b      	lsls	r3, r3, #4
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a28      	ldr	r2, [pc, #160]	; (8005fa8 <TIM_OC2_SetConfig+0x100>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d003      	beq.n	8005f14 <TIM_OC2_SetConfig+0x6c>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a27      	ldr	r2, [pc, #156]	; (8005fac <TIM_OC2_SetConfig+0x104>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d10d      	bne.n	8005f30 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	011b      	lsls	r3, r3, #4
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a1d      	ldr	r2, [pc, #116]	; (8005fa8 <TIM_OC2_SetConfig+0x100>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d00f      	beq.n	8005f58 <TIM_OC2_SetConfig+0xb0>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a1c      	ldr	r2, [pc, #112]	; (8005fac <TIM_OC2_SetConfig+0x104>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d00b      	beq.n	8005f58 <TIM_OC2_SetConfig+0xb0>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a1b      	ldr	r2, [pc, #108]	; (8005fb0 <TIM_OC2_SetConfig+0x108>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d007      	beq.n	8005f58 <TIM_OC2_SetConfig+0xb0>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a1a      	ldr	r2, [pc, #104]	; (8005fb4 <TIM_OC2_SetConfig+0x10c>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d003      	beq.n	8005f58 <TIM_OC2_SetConfig+0xb0>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a19      	ldr	r2, [pc, #100]	; (8005fb8 <TIM_OC2_SetConfig+0x110>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d113      	bne.n	8005f80 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	621a      	str	r2, [r3, #32]
}
 8005f9a:	bf00      	nop
 8005f9c:	371c      	adds	r7, #28
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	40012c00 	.word	0x40012c00
 8005fac:	40013400 	.word	0x40013400
 8005fb0:	40014000 	.word	0x40014000
 8005fb4:	40014400 	.word	0x40014400
 8005fb8:	40014800 	.word	0x40014800

08005fbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 0303 	bic.w	r3, r3, #3
 8005ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	021b      	lsls	r3, r3, #8
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	4313      	orrs	r3, r2
 8006014:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a27      	ldr	r2, [pc, #156]	; (80060b8 <TIM_OC3_SetConfig+0xfc>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d003      	beq.n	8006026 <TIM_OC3_SetConfig+0x6a>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a26      	ldr	r2, [pc, #152]	; (80060bc <TIM_OC3_SetConfig+0x100>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d10d      	bne.n	8006042 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800602c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	021b      	lsls	r3, r3, #8
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	4313      	orrs	r3, r2
 8006038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a1c      	ldr	r2, [pc, #112]	; (80060b8 <TIM_OC3_SetConfig+0xfc>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d00f      	beq.n	800606a <TIM_OC3_SetConfig+0xae>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a1b      	ldr	r2, [pc, #108]	; (80060bc <TIM_OC3_SetConfig+0x100>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d00b      	beq.n	800606a <TIM_OC3_SetConfig+0xae>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a1a      	ldr	r2, [pc, #104]	; (80060c0 <TIM_OC3_SetConfig+0x104>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d007      	beq.n	800606a <TIM_OC3_SetConfig+0xae>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a19      	ldr	r2, [pc, #100]	; (80060c4 <TIM_OC3_SetConfig+0x108>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d003      	beq.n	800606a <TIM_OC3_SetConfig+0xae>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a18      	ldr	r2, [pc, #96]	; (80060c8 <TIM_OC3_SetConfig+0x10c>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d113      	bne.n	8006092 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006070:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006078:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	011b      	lsls	r3, r3, #4
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	4313      	orrs	r3, r2
 8006084:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	011b      	lsls	r3, r3, #4
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	4313      	orrs	r3, r2
 8006090:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	685a      	ldr	r2, [r3, #4]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	697a      	ldr	r2, [r7, #20]
 80060aa:	621a      	str	r2, [r3, #32]
}
 80060ac:	bf00      	nop
 80060ae:	371c      	adds	r7, #28
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr
 80060b8:	40012c00 	.word	0x40012c00
 80060bc:	40013400 	.word	0x40013400
 80060c0:	40014000 	.word	0x40014000
 80060c4:	40014400 	.word	0x40014400
 80060c8:	40014800 	.word	0x40014800

080060cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b087      	sub	sp, #28
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	69db      	ldr	r3, [r3, #28]
 80060f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006106:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	021b      	lsls	r3, r3, #8
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	4313      	orrs	r3, r2
 8006112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800611a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	031b      	lsls	r3, r3, #12
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	4313      	orrs	r3, r2
 8006126:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a28      	ldr	r2, [pc, #160]	; (80061cc <TIM_OC4_SetConfig+0x100>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d003      	beq.n	8006138 <TIM_OC4_SetConfig+0x6c>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a27      	ldr	r2, [pc, #156]	; (80061d0 <TIM_OC4_SetConfig+0x104>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d10d      	bne.n	8006154 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800613e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	031b      	lsls	r3, r3, #12
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	4313      	orrs	r3, r2
 800614a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006152:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a1d      	ldr	r2, [pc, #116]	; (80061cc <TIM_OC4_SetConfig+0x100>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d00f      	beq.n	800617c <TIM_OC4_SetConfig+0xb0>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a1c      	ldr	r2, [pc, #112]	; (80061d0 <TIM_OC4_SetConfig+0x104>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d00b      	beq.n	800617c <TIM_OC4_SetConfig+0xb0>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a1b      	ldr	r2, [pc, #108]	; (80061d4 <TIM_OC4_SetConfig+0x108>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d007      	beq.n	800617c <TIM_OC4_SetConfig+0xb0>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a1a      	ldr	r2, [pc, #104]	; (80061d8 <TIM_OC4_SetConfig+0x10c>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d003      	beq.n	800617c <TIM_OC4_SetConfig+0xb0>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a19      	ldr	r2, [pc, #100]	; (80061dc <TIM_OC4_SetConfig+0x110>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d113      	bne.n	80061a4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006182:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800618a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	019b      	lsls	r3, r3, #6
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	4313      	orrs	r3, r2
 8006196:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	019b      	lsls	r3, r3, #6
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	621a      	str	r2, [r3, #32]
}
 80061be:	bf00      	nop
 80061c0:	371c      	adds	r7, #28
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	40012c00 	.word	0x40012c00
 80061d0:	40013400 	.word	0x40013400
 80061d4:	40014000 	.word	0x40014000
 80061d8:	40014400 	.word	0x40014400
 80061dc:	40014800 	.word	0x40014800

080061e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b087      	sub	sp, #28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800620e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	4313      	orrs	r3, r2
 800621c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006224:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	041b      	lsls	r3, r3, #16
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	4313      	orrs	r3, r2
 8006230:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a17      	ldr	r2, [pc, #92]	; (8006294 <TIM_OC5_SetConfig+0xb4>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d00f      	beq.n	800625a <TIM_OC5_SetConfig+0x7a>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a16      	ldr	r2, [pc, #88]	; (8006298 <TIM_OC5_SetConfig+0xb8>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d00b      	beq.n	800625a <TIM_OC5_SetConfig+0x7a>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a15      	ldr	r2, [pc, #84]	; (800629c <TIM_OC5_SetConfig+0xbc>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d007      	beq.n	800625a <TIM_OC5_SetConfig+0x7a>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a14      	ldr	r2, [pc, #80]	; (80062a0 <TIM_OC5_SetConfig+0xc0>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d003      	beq.n	800625a <TIM_OC5_SetConfig+0x7a>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a13      	ldr	r2, [pc, #76]	; (80062a4 <TIM_OC5_SetConfig+0xc4>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d109      	bne.n	800626e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006260:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	021b      	lsls	r3, r3, #8
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	4313      	orrs	r3, r2
 800626c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	621a      	str	r2, [r3, #32]
}
 8006288:	bf00      	nop
 800628a:	371c      	adds	r7, #28
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr
 8006294:	40012c00 	.word	0x40012c00
 8006298:	40013400 	.word	0x40013400
 800629c:	40014000 	.word	0x40014000
 80062a0:	40014400 	.word	0x40014400
 80062a4:	40014800 	.word	0x40014800

080062a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b087      	sub	sp, #28
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	021b      	lsls	r3, r3, #8
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	051b      	lsls	r3, r3, #20
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a18      	ldr	r2, [pc, #96]	; (8006360 <TIM_OC6_SetConfig+0xb8>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d00f      	beq.n	8006324 <TIM_OC6_SetConfig+0x7c>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a17      	ldr	r2, [pc, #92]	; (8006364 <TIM_OC6_SetConfig+0xbc>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d00b      	beq.n	8006324 <TIM_OC6_SetConfig+0x7c>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a16      	ldr	r2, [pc, #88]	; (8006368 <TIM_OC6_SetConfig+0xc0>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d007      	beq.n	8006324 <TIM_OC6_SetConfig+0x7c>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a15      	ldr	r2, [pc, #84]	; (800636c <TIM_OC6_SetConfig+0xc4>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d003      	beq.n	8006324 <TIM_OC6_SetConfig+0x7c>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a14      	ldr	r2, [pc, #80]	; (8006370 <TIM_OC6_SetConfig+0xc8>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d109      	bne.n	8006338 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800632a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	695b      	ldr	r3, [r3, #20]
 8006330:	029b      	lsls	r3, r3, #10
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	4313      	orrs	r3, r2
 8006336:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	621a      	str	r2, [r3, #32]
}
 8006352:	bf00      	nop
 8006354:	371c      	adds	r7, #28
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	40012c00 	.word	0x40012c00
 8006364:	40013400 	.word	0x40013400
 8006368:	40014000 	.word	0x40014000
 800636c:	40014400 	.word	0x40014400
 8006370:	40014800 	.word	0x40014800

08006374 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006374:	b480      	push	{r7}
 8006376:	b087      	sub	sp, #28
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	f023 0201 	bic.w	r2, r3, #1
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800639e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	011b      	lsls	r3, r3, #4
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f023 030a 	bic.w	r3, r3, #10
 80063b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	621a      	str	r2, [r3, #32]
}
 80063c6:	bf00      	nop
 80063c8:	371c      	adds	r7, #28
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b087      	sub	sp, #28
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	60f8      	str	r0, [r7, #12]
 80063da:	60b9      	str	r1, [r7, #8]
 80063dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	f023 0210 	bic.w	r2, r3, #16
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6a1b      	ldr	r3, [r3, #32]
 80063f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	031b      	lsls	r3, r3, #12
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	4313      	orrs	r3, r2
 8006406:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800640e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	011b      	lsls	r3, r3, #4
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	4313      	orrs	r3, r2
 8006418:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	621a      	str	r2, [r3, #32]
}
 8006426:	bf00      	nop
 8006428:	371c      	adds	r7, #28
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006432:	b480      	push	{r7}
 8006434:	b085      	sub	sp, #20
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
 800643a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800644c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800644e:	683a      	ldr	r2, [r7, #0]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	4313      	orrs	r3, r2
 8006454:	f043 0307 	orr.w	r3, r3, #7
 8006458:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	609a      	str	r2, [r3, #8]
}
 8006460:	bf00      	nop
 8006462:	3714      	adds	r7, #20
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800646c:	b480      	push	{r7}
 800646e:	b087      	sub	sp, #28
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
 8006478:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006486:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	021a      	lsls	r2, r3, #8
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	431a      	orrs	r2, r3
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	4313      	orrs	r3, r2
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	4313      	orrs	r3, r2
 8006498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	609a      	str	r2, [r3, #8]
}
 80064a0:	bf00      	nop
 80064a2:	371c      	adds	r7, #28
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d101      	bne.n	80064c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064c0:	2302      	movs	r3, #2
 80064c2:	e065      	b.n	8006590 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2202      	movs	r2, #2
 80064d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a2c      	ldr	r2, [pc, #176]	; (800659c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d004      	beq.n	80064f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a2b      	ldr	r2, [pc, #172]	; (80065a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d108      	bne.n	800650a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80064fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	4313      	orrs	r3, r2
 8006508:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006514:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	4313      	orrs	r3, r2
 800651e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a1b      	ldr	r2, [pc, #108]	; (800659c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d018      	beq.n	8006564 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800653a:	d013      	beq.n	8006564 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a18      	ldr	r2, [pc, #96]	; (80065a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d00e      	beq.n	8006564 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a17      	ldr	r2, [pc, #92]	; (80065a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d009      	beq.n	8006564 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a12      	ldr	r2, [pc, #72]	; (80065a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d004      	beq.n	8006564 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a13      	ldr	r2, [pc, #76]	; (80065ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d10c      	bne.n	800657e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800656a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	4313      	orrs	r3, r2
 8006574:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3714      	adds	r7, #20
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr
 800659c:	40012c00 	.word	0x40012c00
 80065a0:	40013400 	.word	0x40013400
 80065a4:	40000400 	.word	0x40000400
 80065a8:	40000800 	.word	0x40000800
 80065ac:	40014000 	.word	0x40014000

080065b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d101      	bne.n	80065cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80065c8:	2302      	movs	r3, #2
 80065ca:	e087      	b.n	80066dc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	4313      	orrs	r3, r2
 80065e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4313      	orrs	r3, r2
 800660a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	4313      	orrs	r3, r2
 8006618:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	4313      	orrs	r3, r2
 8006626:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006632:	4313      	orrs	r3, r2
 8006634:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	041b      	lsls	r3, r3, #16
 8006642:	4313      	orrs	r3, r2
 8006644:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a27      	ldr	r2, [pc, #156]	; (80066e8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d004      	beq.n	800665a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a25      	ldr	r2, [pc, #148]	; (80066ec <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d106      	bne.n	8006668 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	69db      	ldr	r3, [r3, #28]
 8006664:	4313      	orrs	r3, r2
 8006666:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a1e      	ldr	r2, [pc, #120]	; (80066e8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d004      	beq.n	800667c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a1d      	ldr	r2, [pc, #116]	; (80066ec <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d126      	bne.n	80066ca <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006686:	051b      	lsls	r3, r3, #20
 8006688:	4313      	orrs	r3, r2
 800668a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	4313      	orrs	r3, r2
 8006698:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a4:	4313      	orrs	r3, r2
 80066a6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a0e      	ldr	r2, [pc, #56]	; (80066e8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d004      	beq.n	80066bc <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a0d      	ldr	r2, [pc, #52]	; (80066ec <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d106      	bne.n	80066ca <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c6:	4313      	orrs	r3, r2
 80066c8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3714      	adds	r7, #20
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr
 80066e8:	40012c00 	.word	0x40012c00
 80066ec:	40013400 	.word	0x40013400

080066f0 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 80066f0:	b480      	push	{r7}
 80066f2:	b08b      	sub	sp, #44	; 0x2c
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066fc:	2300      	movs	r3, #0
 80066fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006708:	2b01      	cmp	r3, #1
 800670a:	d101      	bne.n	8006710 <HAL_TIMEx_ConfigBreakInput+0x20>
 800670c:	2302      	movs	r3, #2
 800670e:	e0c1      	b.n	8006894 <HAL_TIMEx_ConfigBreakInput+0x1a4>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	3b01      	subs	r3, #1
 800671e:	2b0f      	cmp	r3, #15
 8006720:	d854      	bhi.n	80067cc <HAL_TIMEx_ConfigBreakInput+0xdc>
 8006722:	a201      	add	r2, pc, #4	; (adr r2, 8006728 <HAL_TIMEx_ConfigBreakInput+0x38>)
 8006724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006728:	08006769 	.word	0x08006769
 800672c:	0800677d 	.word	0x0800677d
 8006730:	080067cd 	.word	0x080067cd
 8006734:	08006791 	.word	0x08006791
 8006738:	080067cd 	.word	0x080067cd
 800673c:	080067cd 	.word	0x080067cd
 8006740:	080067cd 	.word	0x080067cd
 8006744:	080067a5 	.word	0x080067a5
 8006748:	080067cd 	.word	0x080067cd
 800674c:	080067cd 	.word	0x080067cd
 8006750:	080067cd 	.word	0x080067cd
 8006754:	080067cd 	.word	0x080067cd
 8006758:	080067cd 	.word	0x080067cd
 800675c:	080067cd 	.word	0x080067cd
 8006760:	080067cd 	.word	0x080067cd
 8006764:	080067b9 	.word	0x080067b9
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 8006768:	2301      	movs	r3, #1
 800676a:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800676c:	2300      	movs	r3, #0
 800676e:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8006770:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006774:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8006776:	2309      	movs	r3, #9
 8006778:	617b      	str	r3, [r7, #20]
      break;
 800677a:	e030      	b.n	80067de <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800677c:	2302      	movs	r3, #2
 800677e:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8006780:	2301      	movs	r3, #1
 8006782:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 8006784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006788:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800678a:	230a      	movs	r3, #10
 800678c:	617b      	str	r3, [r7, #20]
      break;
 800678e:	e026      	b.n	80067de <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8006790:	2304      	movs	r3, #4
 8006792:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8006794:	2302      	movs	r3, #2
 8006796:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8006798:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800679c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800679e:	230b      	movs	r3, #11
 80067a0:	617b      	str	r3, [r7, #20]
      break;
 80067a2:	e01c      	b.n	80067de <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 80067a4:	2308      	movs	r3, #8
 80067a6:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 80067a8:	2303      	movs	r3, #3
 80067aa:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 80067ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067b0:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 80067b2:	230c      	movs	r3, #12
 80067b4:	617b      	str	r3, [r7, #20]
      break;
 80067b6:	e012      	b.n	80067de <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 80067b8:	2310      	movs	r3, #16
 80067ba:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 80067bc:	2304      	movs	r3, #4
 80067be:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 80067c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80067c4:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 80067c6:	230d      	movs	r3, #13
 80067c8:	617b      	str	r3, [r7, #20]
      break;
 80067ca:	e008      	b.n	80067de <HAL_TIMEx_ConfigBreakInput+0xee>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 80067cc:	2300      	movs	r3, #0
 80067ce:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 80067d0:	2300      	movs	r3, #0
 80067d2:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 80067d4:	2300      	movs	r3, #0
 80067d6:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 80067d8:	2300      	movs	r3, #0
 80067da:	617b      	str	r3, [r7, #20]
      break;
 80067dc:	bf00      	nop
    }
  }

  switch (BreakInput)
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d003      	beq.n	80067ec <HAL_TIMEx_ConfigBreakInput+0xfc>
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d025      	beq.n	8006836 <HAL_TIMEx_ConfigBreakInput+0x146>
 80067ea:	e049      	b.n	8006880 <HAL_TIMEx_ConfigBreakInput+0x190>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067f2:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 80067f4:	6a3b      	ldr	r3, [r7, #32]
 80067f6:	43db      	mvns	r3, r3
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	4013      	ands	r3, r2
 80067fc:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	685a      	ldr	r2, [r3, #4]
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	409a      	lsls	r2, r3
 8006806:	6a3b      	ldr	r3, [r7, #32]
 8006808:	4013      	ands	r3, r2
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	4313      	orrs	r3, r2
 800680e:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	43db      	mvns	r3, r3
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	4013      	ands	r3, r2
 8006818:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	689a      	ldr	r2, [r3, #8]
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	409a      	lsls	r2, r3
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	4013      	ands	r3, r2
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	4313      	orrs	r3, r2
 800682a:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 8006834:	e028      	b.n	8006888 <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800683c:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	43db      	mvns	r3, r3
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	4013      	ands	r3, r2
 8006846:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685a      	ldr	r2, [r3, #4]
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	409a      	lsls	r2, r3
 8006850:	6a3b      	ldr	r3, [r7, #32]
 8006852:	4013      	ands	r3, r2
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	4313      	orrs	r3, r2
 8006858:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	43db      	mvns	r3, r3
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	4013      	ands	r3, r2
 8006862:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689a      	ldr	r2, [r3, #8]
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	409a      	lsls	r2, r3
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	4013      	ands	r3, r2
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	4313      	orrs	r3, r2
 8006874:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800687e:	e003      	b.n	8006888 <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    default:
      status = HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8006886:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006890:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006894:	4618      	mov	r0, r3
 8006896:	372c      	adds	r7, #44	; 0x2c
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80068b6:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	370c      	adds	r7, #12
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr

080068c6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068c6:	b480      	push	{r7}
 80068c8:	b083      	sub	sp, #12
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068ce:	bf00      	nop
 80068d0:	370c      	adds	r7, #12
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr

080068da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068da:	b480      	push	{r7}
 80068dc:	b083      	sub	sp, #12
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068e2:	bf00      	nop
 80068e4:	370c      	adds	r7, #12
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b083      	sub	sp, #12
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80068f6:	bf00      	nop
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006902:	b480      	push	{r7}
 8006904:	b083      	sub	sp, #12
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800690a:	bf00      	nop
 800690c:	370c      	adds	r7, #12
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006916:	b480      	push	{r7}
 8006918:	b083      	sub	sp, #12
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800691e:	bf00      	nop
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800692a:	b480      	push	{r7}
 800692c:	b083      	sub	sp, #12
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006932:	bf00      	nop
 8006934:	370c      	adds	r7, #12
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr

0800693e <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800693e:	b480      	push	{r7}
 8006940:	b083      	sub	sp, #12
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006946:	bf00      	nop
 8006948:	370c      	adds	r7, #12
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr

08006952 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b082      	sub	sp, #8
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d101      	bne.n	8006964 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e042      	b.n	80069ea <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800696a:	2b00      	cmp	r3, #0
 800696c:	d106      	bne.n	800697c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7fb f8dc 	bl	8001b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2224      	movs	r2, #36	; 0x24
 8006980:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f022 0201 	bic.w	r2, r2, #1
 8006992:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 f82d 	bl	80069f4 <UART_SetConfig>
 800699a:	4603      	mov	r3, r0
 800699c:	2b01      	cmp	r3, #1
 800699e:	d101      	bne.n	80069a4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e022      	b.n	80069ea <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d002      	beq.n	80069b2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 faed 	bl	8006f8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	685a      	ldr	r2, [r3, #4]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	689a      	ldr	r2, [r3, #8]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f042 0201 	orr.w	r2, r2, #1
 80069e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fb74 	bl	80070d0 <UART_CheckIdleState>
 80069e8:	4603      	mov	r3, r0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
	...

080069f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069f8:	b08c      	sub	sp, #48	; 0x30
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069fe:	2300      	movs	r3, #0
 8006a00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	689a      	ldr	r2, [r3, #8]
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	431a      	orrs	r2, r3
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	431a      	orrs	r2, r3
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	69db      	ldr	r3, [r3, #28]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	4bab      	ldr	r3, [pc, #684]	; (8006cd0 <UART_SetConfig+0x2dc>)
 8006a24:	4013      	ands	r3, r2
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	6812      	ldr	r2, [r2, #0]
 8006a2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a2c:	430b      	orrs	r3, r1
 8006a2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	68da      	ldr	r2, [r3, #12]
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	430a      	orrs	r2, r1
 8006a44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4aa0      	ldr	r2, [pc, #640]	; (8006cd4 <UART_SetConfig+0x2e0>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d004      	beq.n	8006a60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	6a1b      	ldr	r3, [r3, #32]
 8006a5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006a6a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	6812      	ldr	r2, [r2, #0]
 8006a72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a74:	430b      	orrs	r3, r1
 8006a76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7e:	f023 010f 	bic.w	r1, r3, #15
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a91      	ldr	r2, [pc, #580]	; (8006cd8 <UART_SetConfig+0x2e4>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d125      	bne.n	8006ae4 <UART_SetConfig+0xf0>
 8006a98:	4b90      	ldr	r3, [pc, #576]	; (8006cdc <UART_SetConfig+0x2e8>)
 8006a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a9e:	f003 0303 	and.w	r3, r3, #3
 8006aa2:	2b03      	cmp	r3, #3
 8006aa4:	d81a      	bhi.n	8006adc <UART_SetConfig+0xe8>
 8006aa6:	a201      	add	r2, pc, #4	; (adr r2, 8006aac <UART_SetConfig+0xb8>)
 8006aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aac:	08006abd 	.word	0x08006abd
 8006ab0:	08006acd 	.word	0x08006acd
 8006ab4:	08006ac5 	.word	0x08006ac5
 8006ab8:	08006ad5 	.word	0x08006ad5
 8006abc:	2301      	movs	r3, #1
 8006abe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ac2:	e0d6      	b.n	8006c72 <UART_SetConfig+0x27e>
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006aca:	e0d2      	b.n	8006c72 <UART_SetConfig+0x27e>
 8006acc:	2304      	movs	r3, #4
 8006ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ad2:	e0ce      	b.n	8006c72 <UART_SetConfig+0x27e>
 8006ad4:	2308      	movs	r3, #8
 8006ad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ada:	e0ca      	b.n	8006c72 <UART_SetConfig+0x27e>
 8006adc:	2310      	movs	r3, #16
 8006ade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ae2:	e0c6      	b.n	8006c72 <UART_SetConfig+0x27e>
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a7d      	ldr	r2, [pc, #500]	; (8006ce0 <UART_SetConfig+0x2ec>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d138      	bne.n	8006b60 <UART_SetConfig+0x16c>
 8006aee:	4b7b      	ldr	r3, [pc, #492]	; (8006cdc <UART_SetConfig+0x2e8>)
 8006af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006af4:	f003 030c 	and.w	r3, r3, #12
 8006af8:	2b0c      	cmp	r3, #12
 8006afa:	d82d      	bhi.n	8006b58 <UART_SetConfig+0x164>
 8006afc:	a201      	add	r2, pc, #4	; (adr r2, 8006b04 <UART_SetConfig+0x110>)
 8006afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b02:	bf00      	nop
 8006b04:	08006b39 	.word	0x08006b39
 8006b08:	08006b59 	.word	0x08006b59
 8006b0c:	08006b59 	.word	0x08006b59
 8006b10:	08006b59 	.word	0x08006b59
 8006b14:	08006b49 	.word	0x08006b49
 8006b18:	08006b59 	.word	0x08006b59
 8006b1c:	08006b59 	.word	0x08006b59
 8006b20:	08006b59 	.word	0x08006b59
 8006b24:	08006b41 	.word	0x08006b41
 8006b28:	08006b59 	.word	0x08006b59
 8006b2c:	08006b59 	.word	0x08006b59
 8006b30:	08006b59 	.word	0x08006b59
 8006b34:	08006b51 	.word	0x08006b51
 8006b38:	2300      	movs	r3, #0
 8006b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b3e:	e098      	b.n	8006c72 <UART_SetConfig+0x27e>
 8006b40:	2302      	movs	r3, #2
 8006b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b46:	e094      	b.n	8006c72 <UART_SetConfig+0x27e>
 8006b48:	2304      	movs	r3, #4
 8006b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b4e:	e090      	b.n	8006c72 <UART_SetConfig+0x27e>
 8006b50:	2308      	movs	r3, #8
 8006b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b56:	e08c      	b.n	8006c72 <UART_SetConfig+0x27e>
 8006b58:	2310      	movs	r3, #16
 8006b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b5e:	e088      	b.n	8006c72 <UART_SetConfig+0x27e>
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a5f      	ldr	r2, [pc, #380]	; (8006ce4 <UART_SetConfig+0x2f0>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d125      	bne.n	8006bb6 <UART_SetConfig+0x1c2>
 8006b6a:	4b5c      	ldr	r3, [pc, #368]	; (8006cdc <UART_SetConfig+0x2e8>)
 8006b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b70:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b74:	2b30      	cmp	r3, #48	; 0x30
 8006b76:	d016      	beq.n	8006ba6 <UART_SetConfig+0x1b2>
 8006b78:	2b30      	cmp	r3, #48	; 0x30
 8006b7a:	d818      	bhi.n	8006bae <UART_SetConfig+0x1ba>
 8006b7c:	2b20      	cmp	r3, #32
 8006b7e:	d00a      	beq.n	8006b96 <UART_SetConfig+0x1a2>
 8006b80:	2b20      	cmp	r3, #32
 8006b82:	d814      	bhi.n	8006bae <UART_SetConfig+0x1ba>
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d002      	beq.n	8006b8e <UART_SetConfig+0x19a>
 8006b88:	2b10      	cmp	r3, #16
 8006b8a:	d008      	beq.n	8006b9e <UART_SetConfig+0x1aa>
 8006b8c:	e00f      	b.n	8006bae <UART_SetConfig+0x1ba>
 8006b8e:	2300      	movs	r3, #0
 8006b90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b94:	e06d      	b.n	8006c72 <UART_SetConfig+0x27e>
 8006b96:	2302      	movs	r3, #2
 8006b98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b9c:	e069      	b.n	8006c72 <UART_SetConfig+0x27e>
 8006b9e:	2304      	movs	r3, #4
 8006ba0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ba4:	e065      	b.n	8006c72 <UART_SetConfig+0x27e>
 8006ba6:	2308      	movs	r3, #8
 8006ba8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bac:	e061      	b.n	8006c72 <UART_SetConfig+0x27e>
 8006bae:	2310      	movs	r3, #16
 8006bb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bb4:	e05d      	b.n	8006c72 <UART_SetConfig+0x27e>
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a4b      	ldr	r2, [pc, #300]	; (8006ce8 <UART_SetConfig+0x2f4>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d125      	bne.n	8006c0c <UART_SetConfig+0x218>
 8006bc0:	4b46      	ldr	r3, [pc, #280]	; (8006cdc <UART_SetConfig+0x2e8>)
 8006bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bc6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006bca:	2bc0      	cmp	r3, #192	; 0xc0
 8006bcc:	d016      	beq.n	8006bfc <UART_SetConfig+0x208>
 8006bce:	2bc0      	cmp	r3, #192	; 0xc0
 8006bd0:	d818      	bhi.n	8006c04 <UART_SetConfig+0x210>
 8006bd2:	2b80      	cmp	r3, #128	; 0x80
 8006bd4:	d00a      	beq.n	8006bec <UART_SetConfig+0x1f8>
 8006bd6:	2b80      	cmp	r3, #128	; 0x80
 8006bd8:	d814      	bhi.n	8006c04 <UART_SetConfig+0x210>
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d002      	beq.n	8006be4 <UART_SetConfig+0x1f0>
 8006bde:	2b40      	cmp	r3, #64	; 0x40
 8006be0:	d008      	beq.n	8006bf4 <UART_SetConfig+0x200>
 8006be2:	e00f      	b.n	8006c04 <UART_SetConfig+0x210>
 8006be4:	2300      	movs	r3, #0
 8006be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bea:	e042      	b.n	8006c72 <UART_SetConfig+0x27e>
 8006bec:	2302      	movs	r3, #2
 8006bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bf2:	e03e      	b.n	8006c72 <UART_SetConfig+0x27e>
 8006bf4:	2304      	movs	r3, #4
 8006bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bfa:	e03a      	b.n	8006c72 <UART_SetConfig+0x27e>
 8006bfc:	2308      	movs	r3, #8
 8006bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c02:	e036      	b.n	8006c72 <UART_SetConfig+0x27e>
 8006c04:	2310      	movs	r3, #16
 8006c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c0a:	e032      	b.n	8006c72 <UART_SetConfig+0x27e>
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a30      	ldr	r2, [pc, #192]	; (8006cd4 <UART_SetConfig+0x2e0>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d12a      	bne.n	8006c6c <UART_SetConfig+0x278>
 8006c16:	4b31      	ldr	r3, [pc, #196]	; (8006cdc <UART_SetConfig+0x2e8>)
 8006c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c24:	d01a      	beq.n	8006c5c <UART_SetConfig+0x268>
 8006c26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c2a:	d81b      	bhi.n	8006c64 <UART_SetConfig+0x270>
 8006c2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c30:	d00c      	beq.n	8006c4c <UART_SetConfig+0x258>
 8006c32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c36:	d815      	bhi.n	8006c64 <UART_SetConfig+0x270>
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d003      	beq.n	8006c44 <UART_SetConfig+0x250>
 8006c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c40:	d008      	beq.n	8006c54 <UART_SetConfig+0x260>
 8006c42:	e00f      	b.n	8006c64 <UART_SetConfig+0x270>
 8006c44:	2300      	movs	r3, #0
 8006c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c4a:	e012      	b.n	8006c72 <UART_SetConfig+0x27e>
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c52:	e00e      	b.n	8006c72 <UART_SetConfig+0x27e>
 8006c54:	2304      	movs	r3, #4
 8006c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c5a:	e00a      	b.n	8006c72 <UART_SetConfig+0x27e>
 8006c5c:	2308      	movs	r3, #8
 8006c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c62:	e006      	b.n	8006c72 <UART_SetConfig+0x27e>
 8006c64:	2310      	movs	r3, #16
 8006c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c6a:	e002      	b.n	8006c72 <UART_SetConfig+0x27e>
 8006c6c:	2310      	movs	r3, #16
 8006c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a17      	ldr	r2, [pc, #92]	; (8006cd4 <UART_SetConfig+0x2e0>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	f040 80a8 	bne.w	8006dce <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006c82:	2b08      	cmp	r3, #8
 8006c84:	d834      	bhi.n	8006cf0 <UART_SetConfig+0x2fc>
 8006c86:	a201      	add	r2, pc, #4	; (adr r2, 8006c8c <UART_SetConfig+0x298>)
 8006c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8c:	08006cb1 	.word	0x08006cb1
 8006c90:	08006cf1 	.word	0x08006cf1
 8006c94:	08006cb9 	.word	0x08006cb9
 8006c98:	08006cf1 	.word	0x08006cf1
 8006c9c:	08006cbf 	.word	0x08006cbf
 8006ca0:	08006cf1 	.word	0x08006cf1
 8006ca4:	08006cf1 	.word	0x08006cf1
 8006ca8:	08006cf1 	.word	0x08006cf1
 8006cac:	08006cc7 	.word	0x08006cc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cb0:	f7fd fb1a 	bl	80042e8 <HAL_RCC_GetPCLK1Freq>
 8006cb4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006cb6:	e021      	b.n	8006cfc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cb8:	4b0c      	ldr	r3, [pc, #48]	; (8006cec <UART_SetConfig+0x2f8>)
 8006cba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006cbc:	e01e      	b.n	8006cfc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cbe:	f7fd faa7 	bl	8004210 <HAL_RCC_GetSysClockFreq>
 8006cc2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006cc4:	e01a      	b.n	8006cfc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ccc:	e016      	b.n	8006cfc <UART_SetConfig+0x308>
 8006cce:	bf00      	nop
 8006cd0:	cfff69f3 	.word	0xcfff69f3
 8006cd4:	40008000 	.word	0x40008000
 8006cd8:	40013800 	.word	0x40013800
 8006cdc:	40021000 	.word	0x40021000
 8006ce0:	40004400 	.word	0x40004400
 8006ce4:	40004800 	.word	0x40004800
 8006ce8:	40004c00 	.word	0x40004c00
 8006cec:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006cfa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	f000 812a 	beq.w	8006f58 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d08:	4a9e      	ldr	r2, [pc, #632]	; (8006f84 <UART_SetConfig+0x590>)
 8006d0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d12:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d16:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	005b      	lsls	r3, r3, #1
 8006d20:	4413      	add	r3, r2
 8006d22:	69ba      	ldr	r2, [r7, #24]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d305      	bcc.n	8006d34 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d2e:	69ba      	ldr	r2, [r7, #24]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d903      	bls.n	8006d3c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006d3a:	e10d      	b.n	8006f58 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3e:	2200      	movs	r2, #0
 8006d40:	60bb      	str	r3, [r7, #8]
 8006d42:	60fa      	str	r2, [r7, #12]
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d48:	4a8e      	ldr	r2, [pc, #568]	; (8006f84 <UART_SetConfig+0x590>)
 8006d4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	2200      	movs	r2, #0
 8006d52:	603b      	str	r3, [r7, #0]
 8006d54:	607a      	str	r2, [r7, #4]
 8006d56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d5e:	f7f9 fe79 	bl	8000a54 <__aeabi_uldivmod>
 8006d62:	4602      	mov	r2, r0
 8006d64:	460b      	mov	r3, r1
 8006d66:	4610      	mov	r0, r2
 8006d68:	4619      	mov	r1, r3
 8006d6a:	f04f 0200 	mov.w	r2, #0
 8006d6e:	f04f 0300 	mov.w	r3, #0
 8006d72:	020b      	lsls	r3, r1, #8
 8006d74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d78:	0202      	lsls	r2, r0, #8
 8006d7a:	6979      	ldr	r1, [r7, #20]
 8006d7c:	6849      	ldr	r1, [r1, #4]
 8006d7e:	0849      	lsrs	r1, r1, #1
 8006d80:	2000      	movs	r0, #0
 8006d82:	460c      	mov	r4, r1
 8006d84:	4605      	mov	r5, r0
 8006d86:	eb12 0804 	adds.w	r8, r2, r4
 8006d8a:	eb43 0905 	adc.w	r9, r3, r5
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	469a      	mov	sl, r3
 8006d96:	4693      	mov	fp, r2
 8006d98:	4652      	mov	r2, sl
 8006d9a:	465b      	mov	r3, fp
 8006d9c:	4640      	mov	r0, r8
 8006d9e:	4649      	mov	r1, r9
 8006da0:	f7f9 fe58 	bl	8000a54 <__aeabi_uldivmod>
 8006da4:	4602      	mov	r2, r0
 8006da6:	460b      	mov	r3, r1
 8006da8:	4613      	mov	r3, r2
 8006daa:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006dac:	6a3b      	ldr	r3, [r7, #32]
 8006dae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006db2:	d308      	bcc.n	8006dc6 <UART_SetConfig+0x3d2>
 8006db4:	6a3b      	ldr	r3, [r7, #32]
 8006db6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dba:	d204      	bcs.n	8006dc6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6a3a      	ldr	r2, [r7, #32]
 8006dc2:	60da      	str	r2, [r3, #12]
 8006dc4:	e0c8      	b.n	8006f58 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006dcc:	e0c4      	b.n	8006f58 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dd6:	d167      	bne.n	8006ea8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006dd8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ddc:	2b08      	cmp	r3, #8
 8006dde:	d828      	bhi.n	8006e32 <UART_SetConfig+0x43e>
 8006de0:	a201      	add	r2, pc, #4	; (adr r2, 8006de8 <UART_SetConfig+0x3f4>)
 8006de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de6:	bf00      	nop
 8006de8:	08006e0d 	.word	0x08006e0d
 8006dec:	08006e15 	.word	0x08006e15
 8006df0:	08006e1d 	.word	0x08006e1d
 8006df4:	08006e33 	.word	0x08006e33
 8006df8:	08006e23 	.word	0x08006e23
 8006dfc:	08006e33 	.word	0x08006e33
 8006e00:	08006e33 	.word	0x08006e33
 8006e04:	08006e33 	.word	0x08006e33
 8006e08:	08006e2b 	.word	0x08006e2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e0c:	f7fd fa6c 	bl	80042e8 <HAL_RCC_GetPCLK1Freq>
 8006e10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e12:	e014      	b.n	8006e3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e14:	f7fd fa7e 	bl	8004314 <HAL_RCC_GetPCLK2Freq>
 8006e18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e1a:	e010      	b.n	8006e3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e1c:	4b5a      	ldr	r3, [pc, #360]	; (8006f88 <UART_SetConfig+0x594>)
 8006e1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e20:	e00d      	b.n	8006e3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e22:	f7fd f9f5 	bl	8004210 <HAL_RCC_GetSysClockFreq>
 8006e26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e28:	e009      	b.n	8006e3e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e30:	e005      	b.n	8006e3e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006e32:	2300      	movs	r3, #0
 8006e34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006e3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f000 8089 	beq.w	8006f58 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4a:	4a4e      	ldr	r2, [pc, #312]	; (8006f84 <UART_SetConfig+0x590>)
 8006e4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e50:	461a      	mov	r2, r3
 8006e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e54:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e58:	005a      	lsls	r2, r3, #1
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	085b      	lsrs	r3, r3, #1
 8006e60:	441a      	add	r2, r3
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
 8006e6e:	2b0f      	cmp	r3, #15
 8006e70:	d916      	bls.n	8006ea0 <UART_SetConfig+0x4ac>
 8006e72:	6a3b      	ldr	r3, [r7, #32]
 8006e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e78:	d212      	bcs.n	8006ea0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e7a:	6a3b      	ldr	r3, [r7, #32]
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	f023 030f 	bic.w	r3, r3, #15
 8006e82:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e84:	6a3b      	ldr	r3, [r7, #32]
 8006e86:	085b      	lsrs	r3, r3, #1
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	f003 0307 	and.w	r3, r3, #7
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	8bfb      	ldrh	r3, [r7, #30]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	8bfa      	ldrh	r2, [r7, #30]
 8006e9c:	60da      	str	r2, [r3, #12]
 8006e9e:	e05b      	b.n	8006f58 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006ea6:	e057      	b.n	8006f58 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ea8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006eac:	2b08      	cmp	r3, #8
 8006eae:	d828      	bhi.n	8006f02 <UART_SetConfig+0x50e>
 8006eb0:	a201      	add	r2, pc, #4	; (adr r2, 8006eb8 <UART_SetConfig+0x4c4>)
 8006eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb6:	bf00      	nop
 8006eb8:	08006edd 	.word	0x08006edd
 8006ebc:	08006ee5 	.word	0x08006ee5
 8006ec0:	08006eed 	.word	0x08006eed
 8006ec4:	08006f03 	.word	0x08006f03
 8006ec8:	08006ef3 	.word	0x08006ef3
 8006ecc:	08006f03 	.word	0x08006f03
 8006ed0:	08006f03 	.word	0x08006f03
 8006ed4:	08006f03 	.word	0x08006f03
 8006ed8:	08006efb 	.word	0x08006efb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006edc:	f7fd fa04 	bl	80042e8 <HAL_RCC_GetPCLK1Freq>
 8006ee0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ee2:	e014      	b.n	8006f0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ee4:	f7fd fa16 	bl	8004314 <HAL_RCC_GetPCLK2Freq>
 8006ee8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006eea:	e010      	b.n	8006f0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006eec:	4b26      	ldr	r3, [pc, #152]	; (8006f88 <UART_SetConfig+0x594>)
 8006eee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ef0:	e00d      	b.n	8006f0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ef2:	f7fd f98d 	bl	8004210 <HAL_RCC_GetSysClockFreq>
 8006ef6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ef8:	e009      	b.n	8006f0e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006efa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006efe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f00:	e005      	b.n	8006f0e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006f02:	2300      	movs	r3, #0
 8006f04:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006f0c:	bf00      	nop
    }

    if (pclk != 0U)
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d021      	beq.n	8006f58 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f18:	4a1a      	ldr	r2, [pc, #104]	; (8006f84 <UART_SetConfig+0x590>)
 8006f1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f22:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	085b      	lsrs	r3, r3, #1
 8006f2c:	441a      	add	r2, r3
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f38:	6a3b      	ldr	r3, [r7, #32]
 8006f3a:	2b0f      	cmp	r3, #15
 8006f3c:	d909      	bls.n	8006f52 <UART_SetConfig+0x55e>
 8006f3e:	6a3b      	ldr	r3, [r7, #32]
 8006f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f44:	d205      	bcs.n	8006f52 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f46:	6a3b      	ldr	r3, [r7, #32]
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	60da      	str	r2, [r3, #12]
 8006f50:	e002      	b.n	8006f58 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	2200      	movs	r2, #0
 8006f72:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006f74:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3730      	adds	r7, #48	; 0x30
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f82:	bf00      	nop
 8006f84:	08007584 	.word	0x08007584
 8006f88:	00f42400 	.word	0x00f42400

08006f8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00a      	beq.n	8006fb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	430a      	orrs	r2, r1
 8006fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fba:	f003 0302 	and.w	r3, r3, #2
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00a      	beq.n	8006fd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	430a      	orrs	r2, r1
 8006fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fdc:	f003 0304 	and.w	r3, r3, #4
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00a      	beq.n	8006ffa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffe:	f003 0308 	and.w	r3, r3, #8
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00a      	beq.n	800701c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	430a      	orrs	r2, r1
 800701a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007020:	f003 0310 	and.w	r3, r3, #16
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00a      	beq.n	800703e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	430a      	orrs	r2, r1
 800703c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007042:	f003 0320 	and.w	r3, r3, #32
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00a      	beq.n	8007060 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	430a      	orrs	r2, r1
 800705e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007068:	2b00      	cmp	r3, #0
 800706a:	d01a      	beq.n	80070a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	430a      	orrs	r2, r1
 8007080:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007086:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800708a:	d10a      	bne.n	80070a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	430a      	orrs	r2, r1
 80070a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00a      	beq.n	80070c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	430a      	orrs	r2, r1
 80070c2:	605a      	str	r2, [r3, #4]
  }
}
 80070c4:	bf00      	nop
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b086      	sub	sp, #24
 80070d4:	af02      	add	r7, sp, #8
 80070d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070e0:	f7fa ff32 	bl	8001f48 <HAL_GetTick>
 80070e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0308 	and.w	r3, r3, #8
 80070f0:	2b08      	cmp	r3, #8
 80070f2:	d10e      	bne.n	8007112 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070f8:	9300      	str	r3, [sp, #0]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f82f 	bl	8007166 <UART_WaitOnFlagUntilTimeout>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d001      	beq.n	8007112 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800710e:	2303      	movs	r3, #3
 8007110:	e025      	b.n	800715e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 0304 	and.w	r3, r3, #4
 800711c:	2b04      	cmp	r3, #4
 800711e:	d10e      	bne.n	800713e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007120:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 f819 	bl	8007166 <UART_WaitOnFlagUntilTimeout>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e00f      	b.n	800715e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2220      	movs	r2, #32
 8007142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2220      	movs	r2, #32
 800714a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b09c      	sub	sp, #112	; 0x70
 800716a:	af00      	add	r7, sp, #0
 800716c:	60f8      	str	r0, [r7, #12]
 800716e:	60b9      	str	r1, [r7, #8]
 8007170:	603b      	str	r3, [r7, #0]
 8007172:	4613      	mov	r3, r2
 8007174:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007176:	e0a9      	b.n	80072cc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007178:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800717a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800717e:	f000 80a5 	beq.w	80072cc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007182:	f7fa fee1 	bl	8001f48 <HAL_GetTick>
 8007186:	4602      	mov	r2, r0
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800718e:	429a      	cmp	r2, r3
 8007190:	d302      	bcc.n	8007198 <UART_WaitOnFlagUntilTimeout+0x32>
 8007192:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007194:	2b00      	cmp	r3, #0
 8007196:	d140      	bne.n	800721a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071a0:	e853 3f00 	ldrex	r3, [r3]
 80071a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80071a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071ac:	667b      	str	r3, [r7, #100]	; 0x64
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	461a      	mov	r2, r3
 80071b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071b8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80071bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80071be:	e841 2300 	strex	r3, r2, [r1]
 80071c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80071c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1e6      	bne.n	8007198 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	3308      	adds	r3, #8
 80071d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071d4:	e853 3f00 	ldrex	r3, [r3]
 80071d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071dc:	f023 0301 	bic.w	r3, r3, #1
 80071e0:	663b      	str	r3, [r7, #96]	; 0x60
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	3308      	adds	r3, #8
 80071e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80071ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80071ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80071f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071f2:	e841 2300 	strex	r3, r2, [r1]
 80071f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80071f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1e5      	bne.n	80071ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2220      	movs	r2, #32
 8007202:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2220      	movs	r2, #32
 800720a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	e069      	b.n	80072ee <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0304 	and.w	r3, r3, #4
 8007224:	2b00      	cmp	r3, #0
 8007226:	d051      	beq.n	80072cc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	69db      	ldr	r3, [r3, #28]
 800722e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007232:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007236:	d149      	bne.n	80072cc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007240:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724a:	e853 3f00 	ldrex	r3, [r3]
 800724e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007256:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	461a      	mov	r2, r3
 800725e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007260:	637b      	str	r3, [r7, #52]	; 0x34
 8007262:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007264:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007266:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007268:	e841 2300 	strex	r3, r2, [r1]
 800726c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800726e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1e6      	bne.n	8007242 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	3308      	adds	r3, #8
 800727a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	e853 3f00 	ldrex	r3, [r3]
 8007282:	613b      	str	r3, [r7, #16]
   return(result);
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	f023 0301 	bic.w	r3, r3, #1
 800728a:	66bb      	str	r3, [r7, #104]	; 0x68
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	3308      	adds	r3, #8
 8007292:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007294:	623a      	str	r2, [r7, #32]
 8007296:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007298:	69f9      	ldr	r1, [r7, #28]
 800729a:	6a3a      	ldr	r2, [r7, #32]
 800729c:	e841 2300 	strex	r3, r2, [r1]
 80072a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1e5      	bne.n	8007274 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2220      	movs	r2, #32
 80072ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2220      	movs	r2, #32
 80072b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2220      	movs	r2, #32
 80072bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80072c8:	2303      	movs	r3, #3
 80072ca:	e010      	b.n	80072ee <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	69da      	ldr	r2, [r3, #28]
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	4013      	ands	r3, r2
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	429a      	cmp	r2, r3
 80072da:	bf0c      	ite	eq
 80072dc:	2301      	moveq	r3, #1
 80072de:	2300      	movne	r3, #0
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	461a      	mov	r2, r3
 80072e4:	79fb      	ldrb	r3, [r7, #7]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	f43f af46 	beq.w	8007178 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3770      	adds	r7, #112	; 0x70
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80072f6:	b480      	push	{r7}
 80072f8:	b085      	sub	sp, #20
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007304:	2b01      	cmp	r3, #1
 8007306:	d101      	bne.n	800730c <HAL_UARTEx_DisableFifoMode+0x16>
 8007308:	2302      	movs	r3, #2
 800730a:	e027      	b.n	800735c <HAL_UARTEx_DisableFifoMode+0x66>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2224      	movs	r2, #36	; 0x24
 8007318:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f022 0201 	bic.w	r2, r2, #1
 8007332:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800733a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2220      	movs	r2, #32
 800734e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3714      	adds	r7, #20
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007378:	2b01      	cmp	r3, #1
 800737a:	d101      	bne.n	8007380 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800737c:	2302      	movs	r3, #2
 800737e:	e02d      	b.n	80073dc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2224      	movs	r2, #36	; 0x24
 800738c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f022 0201 	bic.w	r2, r2, #1
 80073a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	683a      	ldr	r2, [r7, #0]
 80073b8:	430a      	orrs	r2, r1
 80073ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 f84f 	bl	8007460 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2220      	movs	r2, #32
 80073ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d101      	bne.n	80073fc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80073f8:	2302      	movs	r3, #2
 80073fa:	e02d      	b.n	8007458 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2224      	movs	r2, #36	; 0x24
 8007408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f022 0201 	bic.w	r2, r2, #1
 8007422:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	683a      	ldr	r2, [r7, #0]
 8007434:	430a      	orrs	r2, r1
 8007436:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f811 	bl	8007460 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2220      	movs	r2, #32
 800744a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007460:	b480      	push	{r7}
 8007462:	b085      	sub	sp, #20
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800746c:	2b00      	cmp	r3, #0
 800746e:	d108      	bne.n	8007482 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007480:	e031      	b.n	80074e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007482:	2308      	movs	r3, #8
 8007484:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007486:	2308      	movs	r3, #8
 8007488:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	0e5b      	lsrs	r3, r3, #25
 8007492:	b2db      	uxtb	r3, r3
 8007494:	f003 0307 	and.w	r3, r3, #7
 8007498:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	0f5b      	lsrs	r3, r3, #29
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	f003 0307 	and.w	r3, r3, #7
 80074a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074aa:	7bbb      	ldrb	r3, [r7, #14]
 80074ac:	7b3a      	ldrb	r2, [r7, #12]
 80074ae:	4911      	ldr	r1, [pc, #68]	; (80074f4 <UARTEx_SetNbDataToProcess+0x94>)
 80074b0:	5c8a      	ldrb	r2, [r1, r2]
 80074b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80074b6:	7b3a      	ldrb	r2, [r7, #12]
 80074b8:	490f      	ldr	r1, [pc, #60]	; (80074f8 <UARTEx_SetNbDataToProcess+0x98>)
 80074ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074c8:	7bfb      	ldrb	r3, [r7, #15]
 80074ca:	7b7a      	ldrb	r2, [r7, #13]
 80074cc:	4909      	ldr	r1, [pc, #36]	; (80074f4 <UARTEx_SetNbDataToProcess+0x94>)
 80074ce:	5c8a      	ldrb	r2, [r1, r2]
 80074d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80074d4:	7b7a      	ldrb	r2, [r7, #13]
 80074d6:	4908      	ldr	r1, [pc, #32]	; (80074f8 <UARTEx_SetNbDataToProcess+0x98>)
 80074d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074da:	fb93 f3f2 	sdiv	r3, r3, r2
 80074de:	b29a      	uxth	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80074e6:	bf00      	nop
 80074e8:	3714      	adds	r7, #20
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	0800759c 	.word	0x0800759c
 80074f8:	080075a4 	.word	0x080075a4

080074fc <__libc_init_array>:
 80074fc:	b570      	push	{r4, r5, r6, lr}
 80074fe:	4d0d      	ldr	r5, [pc, #52]	; (8007534 <__libc_init_array+0x38>)
 8007500:	4c0d      	ldr	r4, [pc, #52]	; (8007538 <__libc_init_array+0x3c>)
 8007502:	1b64      	subs	r4, r4, r5
 8007504:	10a4      	asrs	r4, r4, #2
 8007506:	2600      	movs	r6, #0
 8007508:	42a6      	cmp	r6, r4
 800750a:	d109      	bne.n	8007520 <__libc_init_array+0x24>
 800750c:	4d0b      	ldr	r5, [pc, #44]	; (800753c <__libc_init_array+0x40>)
 800750e:	4c0c      	ldr	r4, [pc, #48]	; (8007540 <__libc_init_array+0x44>)
 8007510:	f000 f820 	bl	8007554 <_init>
 8007514:	1b64      	subs	r4, r4, r5
 8007516:	10a4      	asrs	r4, r4, #2
 8007518:	2600      	movs	r6, #0
 800751a:	42a6      	cmp	r6, r4
 800751c:	d105      	bne.n	800752a <__libc_init_array+0x2e>
 800751e:	bd70      	pop	{r4, r5, r6, pc}
 8007520:	f855 3b04 	ldr.w	r3, [r5], #4
 8007524:	4798      	blx	r3
 8007526:	3601      	adds	r6, #1
 8007528:	e7ee      	b.n	8007508 <__libc_init_array+0xc>
 800752a:	f855 3b04 	ldr.w	r3, [r5], #4
 800752e:	4798      	blx	r3
 8007530:	3601      	adds	r6, #1
 8007532:	e7f2      	b.n	800751a <__libc_init_array+0x1e>
 8007534:	080075b4 	.word	0x080075b4
 8007538:	080075b4 	.word	0x080075b4
 800753c:	080075b4 	.word	0x080075b4
 8007540:	080075b8 	.word	0x080075b8

08007544 <memset>:
 8007544:	4402      	add	r2, r0
 8007546:	4603      	mov	r3, r0
 8007548:	4293      	cmp	r3, r2
 800754a:	d100      	bne.n	800754e <memset+0xa>
 800754c:	4770      	bx	lr
 800754e:	f803 1b01 	strb.w	r1, [r3], #1
 8007552:	e7f9      	b.n	8007548 <memset+0x4>

08007554 <_init>:
 8007554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007556:	bf00      	nop
 8007558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800755a:	bc08      	pop	{r3}
 800755c:	469e      	mov	lr, r3
 800755e:	4770      	bx	lr

08007560 <_fini>:
 8007560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007562:	bf00      	nop
 8007564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007566:	bc08      	pop	{r3}
 8007568:	469e      	mov	lr, r3
 800756a:	4770      	bx	lr
